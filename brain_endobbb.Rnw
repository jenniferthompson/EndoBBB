%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

%\usepackage[margin=.5in, landscape]{geometry} %resets margins
\usepackage[margin=.45in]{geometry} %resets margins
\usepackage{hyperref}
\usepackage{lscape}
\usepackage{pdfpages}

\title{BRAIN-ICU: Endothelial and BBB/Brain Injury vs. Delirium and Long-Term Outcomes}
\date{\today}
\author{Jennifer Thompson, MPH; Supervisor: Rameela Chandrasekhar, PhD}
\begin{document}
\maketitle
\tableofcontents
\listoftables
\listoffigures
\clearpage

<<setup, include=FALSE, results='hide', cache=FALSE>>=
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE, cache = FALSE, error = FALSE, results='hide')
options(replace.assign = TRUE, width = 90)

library(mice)
library(MASS)
library(pscl)
library(rms)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(devtools)

@

The following analyses examine the relationships between endothelial/blood-brain barrier (BBB)
injury at BRAIN study enrollment and delirium duration, long-term cognitive outcomes (RBANS and
Trails B), and long-term disability outcomes (Katz ADL and Functional Activities Questionnaire)
among BRAIN-ICU survivors with both endothelial marker data and at least partial long-term outcomes.
They also investigate whether these associations are modified by either age or systemic
inflammation, as measured by IL-6 at study enrollment.

\textbf{Important note:} Because these endothelial/BBB markers were measured only on ICU survivors
with long-term followup outcomes available, the results are \textbf{only} applicable to that
population.

Latex and R code used for this analysis can be found here: \url{https://github.com/jenniferthompson/EndoBBB/blob/master/brain_endobbb.Rnw}.

<<datamgmt>>=
## Set cutoff for p-values for keeping nonlinear, interaction terms in model
pcutoff <- 0.2

## Set number of imputations
nimp <- 10

## Set number of bootstraps for zero-inflated models
n.bootsets <- 500

## Set height for figures
onepanel.height <- 2.5
twopanel.height <- 5.5

## Set method to use in pool.compare() (Wald or likelihood)
use.method <- 'likelihood'

## Prefixes of biomarker variables for use in lapply()
endo.names <- c('bdnf', 'esel', 'pai1', 's100b', 'uchl')

## Load all BRAIN data
if(Sys.info()['sysname'] == 'Darwin'){
  if(length(grep('Volumes', getwd())) > 0){
    load('/Volumes/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
    source('/Volumes/thomps23/R/multiplot.r')
    source('/Volumes/thomps23/R/rmsHelpers/model_results.R')
    source('/Volumes/thomps23/R/rmsHelpers/combine_cohorts.R')
    source('/Volumes/thomps23/R/rmsHelpers/latex_rms_results.R')
  } else{
    load('braindata.Rdata')
    source('multiplot.r')
    source('model_results.R')
    source('combine_cohorts.R')
    source('latex_rms_results.R')
  }
} else{
  load('/home/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
  source('/home/thomps23/R/multiplot.r')
  source('/home/thomps23/R/rmsHelpers/model_results.R')
  source('/home/thomps23/R/rmsHelpers/combine_cohorts.R')
  source('/home/thomps23/R/rmsHelpers/latex_rms_results.R')
}

## Read in biomarker data from .csv files from Brennan
marker.data <- bind_rows(lapply(endo.names, FUN = function(x){
  tmp <- read.csv(paste0(x, '_2nov2015.csv'))[,1:4]
  tmp$marker <- x
  tmp[!is.na(tmp$id),]
})) %>%
  ## Delete if coefficient of variance > 30; indicates nonreproducibility of marker results
  filter(cv < 30 | mean.pgml == -9999) %>%
  ## Get one variable per marker mean
  select(id, marker, mean.pgml) %>%
  spread(key = marker, value = mean.pgml) %>%
  ## Delete PAI-1 values for 5 patients with unreliable values;
  ##  see email discussion with Brennan, 11/17/2015
  mutate(pai1 = ifelse(id %in% c(11262, 11265, 11266, 11173, 11480), NA, pai1))

names(marker.data)[2:ncol(marker.data)] <- paste0(names(marker.data)[2:ncol(marker.data)], '.day1')

## Function to impute randomly sampled value in a "low" range ##
## LLD for S100B = 2.7
## LLD for UCHL = 60
impute.lld <- function(x, ## object to be imputed
                       lld.val, ## value (numeric) indicating marker is below limit of detection
                       na.vals, ## value(s) (numberic) indicating marker is truly missing,
                       min.val, max.val){ ## limits of range (usually 0-lower limit)
  if(!is.na(x) & x %nin% c(lld.val, na.vals)){
    return(x)
  } else if(!is.na(x) & x == lld.val){
    set.seed(56)
    return(runif(n = 1, min = min.val, max = max.val))
  } else{
    return(NA)
  }
}

marker.data$s100b.day1 <- unlist(lapply(marker.data$s100b.day1,
                                        FUN = impute.lld,
                                        lld.val = -9999,
                                        na.vals = -1,
                                        min.val = 0, max.val = 2.7))
marker.data$uchl.day1 <- unlist(lapply(marker.data$uchl.day1,
                                       FUN = impute.lld,
                                       lld.val = -9999,
                                       na.vals = -1,
                                       min.val = 0, max.val = 60))

## Indicator for complete biomarker data
marker.data$comp.markers <- rowSums(is.na(marker.data[,paste0(endo.names, '.day1')])) == 0

## -- For CONSORT info, get in-hospital, f/u status for each BRAIN-ICU patient ---------------------
brain.oneobs$hosp.status <- with(brain.oneobs, {
  factor(ifelse(!is.na(studywd.amt) &
                  studywd.amt %in% c("2. W/D from Participation and All Data Collected",
                                     "4. N/A Study Staff Withdrew Patient"), 1,
         ifelse(!is.na(died.inhosp) & died.inhosp == "Died in hospital", 2,
         ifelse(!is.na(studywd.date), 3, 4))),
         levels = 1:4,
         labels = c("Withdrew all data",
                    "Died in hospital",
                    "Withdrew in hospital",
                    "Discharged alive, remained in study"))
})

brain.fu$hadfu <- rowSums(!is.na(brain.fu[,c("rbans.global.score",
                                             "trail.b.tscore",
                                             "adl.totscore",
                                             "faq.totscore")])) > 0

hadfu.3m <- subset(brain.fu, fu.period == "3 Month" & hadfu)$id
hadfu.12m <- subset(brain.fu, fu.period == "12 Month" & hadfu)$id

brain.oneobs$three.status <- with(brain.oneobs, {
  factor(
    ifelse(hosp.status != "Discharged alive, remained in study", NA,
    ifelse(id %in% subset(brain.fu, fu.period == "3 Month" & status == "Deceased")$id, 1,
    ifelse(id %in% subset(brain.fu,
                          fu.period == "3 Month" & status == "Living-Withdrew from the study")$id,
           2,
    ifelse(id %in% hadfu.3m, 5,
    ifelse(id %in% hadfu.12m, 4, 3))))),
    levels = 1:5,
    labels = c("Died before 3m followup",
               "Withdrew before 3m followup",
               "Permanently lost to followup",
               "Temporarily lost to followup",
               "Assessed at 3m followup"))
})

brain.oneobs$twelve.status <- with(brain.oneobs, {
  factor(
    ifelse(hosp.status != "Discharged alive, remained in study" |
             (!is.na(three.status) &
                three.status %in% c("Died before 3m followup", "Withdrew before 3m followup")), NA,
    ifelse(id %in% subset(brain.fu, fu.period == "12 Month" & status == "Deceased")$id, 1,
    ifelse(id %in% subset(brain.fu,
                          fu.period == "12 Month" & status == "Living-Withdrew from the study")$id,
           2,
    ifelse(id %in% hadfu.12m, 4, 3)))),
    levels = 1:4,
    labels = c("Died before 12m followup",
               "Withdrew before 12m followup",
               "Lost to followup",
               "Assessed at 12m followup"))
})

## -- Merge biomarker data onto BRAIN data ---------------------------------------------------------
oneobs.vars <- c('id', 'age.enroll', 'sex.pp', 'race.pp', 'edu', 'charlson.score', 'iqcode.score.e',
                 'stroke.risk', 'adl.e', 'faq.e', 'frailty', 'admit.dx', 'icu.type', 'num.apache',
                 'apache.aps', 'sofa', 'mean.modsofa.icu',
                 'mean.benz.icu', 'mean.op.new.icu', 'mean.prop.icu', 'mean.dex.icu',
                 'mean.hal.icu',
                 'ever.vent.s', 'vent.los.tot.eo',
                 'ever.del.s.imp', 'del.s.imp', 'del.s.imp.eo',
                 'ever.coma.s.imp', 'coma.s.imp', 'coma.s.imp.eo',
                 'ever.sevseptic.s', 'icudays.sevseptic.s', 'icudays.sevseptic.eo',
                 'icu.los.tot', 'hosp.los', 'died.brain.365')

## Put followup test scores in wide format
fu.data <- brain.fu %>%
  filter(fu.period %in% c('3 Month', '12 Month')) %>%
  select(id, fu.period, rbans.global.score, trail.b.tscore, adl.totscore, faq.totscore) %>%
  mutate(fu.period = gsub(' Month', '', fu.period),
         faq.rdscore = round(faq.totscore)) %>%
  gather(key = test, value = testscore, rbans.global.score:faq.rdscore) %>%
  mutate(test.time = paste(test, fu.period, sep = '.')) %>%
  filter(!is.na(testscore)) %>%
  select(-test, -fu.period) %>%
  spread(key = test.time, value = testscore)

## Get day 1 values from daily data
day1.data <- brain.daily %>%
  filter(study.day == 1) %>%
  select(id, il6.imp, sofa.cv, sevsepsis.l24)
names(day1.data) <- c('id', 'il6.day1', 'cvsofa.day1', 'sevsepsis.day1')

endo.data <- brain.oneobs[brain.oneobs$id %in% marker.data$id, oneobs.vars] %>%
  left_join(day1.data, by = 'id') %>%
  left_join(marker.data) %>%
  left_join(fu.data, by = 'id') %>%
  mutate(## Create variable for "disabled at baseline" (either ADL or FAQ > 0)
         disabled.e = ifelse(is.na(adl.e) & is.na(faq.e), NA,
                             (!is.na(adl.e) & adl.e > 0) | (!is.na(faq.e) & faq.e > 0)),
         ## Divide age, education, days of sepsis / 10 to address scaling issue
         age.div10 = age.enroll / 10,
         edu.div10 = edu / 10,
         ## Create log10-transformed versions of endothelial markers
         il6.log10 = log10(il6.day1),
         bdnf.log10 = log10(bdnf.day1),
         esel.log10 = log10(esel.day1),
         pai1.log10 = log10(pai1.day1),
         s100b.log10 = log10(s100b.day1),
         uchl.log10 = log10(uchl.day1),
         ## Create indicators for whether each biomarker is present
         has.il6 = !is.na(il6.day1),
         has.bdnf = !is.na(bdnf.day1),
         has.esel = !is.na(esel.day1),
         has.pai1 = !is.na(pai1.day1),
         has.s100b = !is.na(s100b.day1),
         has.uchl = !is.na(uchl.day1),
         ## Create indicators for whether patient is in each cohort at each time point
         cog.cohort.3 = !is.na(rbans.global.score.3) | !is.na(trail.b.tscore.3),
         cog.cohort.12 = !is.na(rbans.global.score.12) | !is.na(trail.b.tscore.12),
         func.cohort.3 = !is.na(adl.totscore.3) | !is.na(faq.totscore.3),
         func.cohort.12 = !is.na(adl.totscore.12) | !is.na(faq.totscore.12),
         fu.cohort.3 = cog.cohort.3 | func.cohort.3,
         fu.cohort.12 = cog.cohort.12 | func.cohort.12,
         fu.cohort.either = fu.cohort.3 | fu.cohort.12,
         ## Create indicators for whether patient is included in cohort but missing a given test
         cohort.norbans.3 = ifelse(!fu.cohort.3, NA, is.na(rbans.global.score.3)),
         cohort.notrailb.3 = ifelse(!fu.cohort.3, NA, is.na(trail.b.tscore.3)),
         cohort.noadl.3 = ifelse(!fu.cohort.3, NA, is.na(adl.totscore.3)),
         cohort.nofaq.3 = ifelse(!fu.cohort.3, NA, is.na(faq.totscore.3)),
         cohort.norbans.12 = ifelse(!fu.cohort.12, NA, is.na(rbans.global.score.12)),
         cohort.notrailb.12 = ifelse(!fu.cohort.12, NA, is.na(trail.b.tscore.12)),
         cohort.noadl.12 = ifelse(!fu.cohort.12, NA, is.na(adl.totscore.12)),
         cohort.nofaq.12 = ifelse(!fu.cohort.12, NA, is.na(faq.totscore.12)),
         cog.cohort.either = cog.cohort.3 | cog.cohort.12,
         func.cohort.either = func.cohort.3 | func.cohort.12)
  ## Remove patients who had no RBANS, Trails B, ADL, or FAQ (must have had other partial outcomes)
  ## ~~and/or had incomplete endothelial markers and/or missing IL-6 ~~
  ## Change, January 2017: we will keep all patients with biomarker data; OK with imputing markers
  ## This data set will be used for delirium duration models

## -- Manually create spline, interaction terms for all biomarkers ---------------------------------
endo.data$bdnf.prime <- as.numeric(rcspline.eval(endo.data$bdnf.log10, nk = 3))
endo.data$esel.prime <- as.numeric(rcspline.eval(endo.data$esel.log10, nk = 3))
endo.data$pai1.prime <- as.numeric(rcspline.eval(endo.data$pai1.log10, nk = 3))
endo.data$s100b.prime <- as.numeric(rcspline.eval(endo.data$s100b.log10, nk = 3))
endo.data$uchl.prime <- as.numeric(rcspline.eval(endo.data$uchl.log10, nk = 3))
endo.data$il6.prime <- as.numeric(rcspline.eval(endo.data$il6.log10, nk = 3))
endo.data$age.prime <- as.numeric(rcspline.eval(endo.data$age.div10, nk = 3))
endo.data$bdnf.il6 <- with(endo.data, bdnf.log10 * il6.log10)
endo.data$bdnfp.il6 <- with(endo.data, bdnf.prime * il6.log10)
endo.data$bdnf.il6p <- with(endo.data, bdnf.log10 * il6.prime)
endo.data$bdnfp.il6p <- with(endo.data, bdnf.prime * il6.prime)
endo.data$bdnf.age <- with(endo.data, bdnf.log10 * age.div10)
endo.data$bdnfp.age <- with(endo.data, bdnf.prime * age.div10)
endo.data$bdnf.agep <- with(endo.data, bdnf.log10 * age.prime)
endo.data$bdnfp.agep <- with(endo.data, bdnf.prime * age.prime)
endo.data$esel.il6 <- with(endo.data, esel.log10 * il6.log10)
endo.data$eselp.il6 <- with(endo.data, esel.prime * il6.log10)
endo.data$esel.il6p <- with(endo.data, esel.log10 * il6.prime)
endo.data$eselp.il6p <- with(endo.data, esel.prime * il6.prime)
endo.data$esel.age <- with(endo.data, esel.log10 * age.div10)
endo.data$eselp.age <- with(endo.data, esel.prime * age.div10)
endo.data$esel.agep <- with(endo.data, esel.log10 * age.prime)
endo.data$eselp.agep <- with(endo.data, esel.prime * age.prime)
endo.data$pai1.il6 <- with(endo.data, pai1.log10 * il6.log10)
endo.data$pai1p.il6 <- with(endo.data, pai1.prime * il6.log10)
endo.data$pai1.il6p <- with(endo.data, pai1.log10 * il6.prime)
endo.data$pai1p.il6p <- with(endo.data, pai1.prime * il6.prime)
endo.data$pai1.age <- with(endo.data, pai1.log10 * age.div10)
endo.data$pai1p.age <- with(endo.data, pai1.prime * age.div10)
endo.data$pai1.agep <- with(endo.data, pai1.log10 * age.prime)
endo.data$pai1p.agep <- with(endo.data, pai1.prime * age.prime)
endo.data$s100b.il6 <- with(endo.data, s100b.log10 * il6.log10)
endo.data$s100bp.il6 <- with(endo.data, s100b.prime * il6.log10)
endo.data$s100b.il6p <- with(endo.data, s100b.log10 * il6.prime)
endo.data$s100bp.il6p <- with(endo.data, s100b.prime * il6.prime)
endo.data$s100b.age <- with(endo.data, s100b.log10 * age.div10)
endo.data$s100bp.age <- with(endo.data, s100b.prime * age.div10)
endo.data$s100b.agep <- with(endo.data, s100b.log10 * age.prime)
endo.data$s100bp.agep <- with(endo.data, s100b.prime * age.prime)
endo.data$uchl.il6 <- with(endo.data, uchl.log10 * il6.log10)
endo.data$uchlp.il6 <- with(endo.data, uchl.prime * il6.log10)
endo.data$uchl.il6p <- with(endo.data, uchl.log10 * il6.prime)
endo.data$uchlp.il6p <- with(endo.data, uchl.prime * il6.prime)
endo.data$uchl.age <- with(endo.data, uchl.log10 * age.div10)
endo.data$uchlp.age <- with(endo.data, uchl.prime * age.div10)
endo.data$uchl.agep <- with(endo.data, uchl.log10 * age.prime)
endo.data$uchlp.agep <- with(endo.data, uchl.prime * age.prime)

label(endo.data$mean.benz.icu) <- 'Mean 24h dose of benzos in the ICU (MDZ equiv.)'
label(endo.data$mean.op.new.icu) <- 'Mean 24h dose of opioids in the ICU (fentanyl equiv.)'
label(endo.data$mean.prop.icu) <- 'Mean 24h dose of propofol in the ICU'
label(endo.data$mean.dex.icu) <- 'Mean 24h dose of dex in the ICU'
label(endo.data$mean.hal.icu) <- 'Mean 24h dose of haldol in the ICU'
label(endo.data$cvsofa.day1) <- 'Cardiovasulcar SOFA score, study day 1'
label(endo.data$sevsepsis.day1) <- 'Severely septic, study day 1'
label(endo.data$disabled.e) <- 'Disabled at enrollment (ADL or FAQ > 0)'
label(endo.data$il6.day1) <- 'IL-6, study day 1'
label(endo.data$bdnf.day1) <- 'BDNF, study day 1'
label(endo.data$esel.day1) <- 'E-selectin, study day 1'
label(endo.data$pai1.day1) <- 'PAI-1, study day 1'
label(endo.data$s100b.day1) <- 'S100B, study day 1'
label(endo.data$uchl.day1) <- 'UCHL, study day 1'
label(endo.data$has.il6) <- 'IL-6 measured, study day 1'
label(endo.data$has.bdnf) <- 'BDNF measured, study day 1'
label(endo.data$has.esel) <- 'E-selectin measured, study day 1'
label(endo.data$has.pai1) <- 'PAI-1 measured, study day 1'
label(endo.data$has.s100b) <- 'S100B measured, study day 1'
label(endo.data$has.uchl) <- 'UCHL measured, study day 1'
label(endo.data$il6.log10) <- 'Log10(IL-6), study day 1'
label(endo.data$bdnf.log10) <- 'Log10(BDNF), study day 1'
label(endo.data$esel.log10) <- 'Log10(E-selectin), study day 1'
label(endo.data$pai1.log10) <- 'Log10(PAI-1), study day 1'
label(endo.data$s100b.log10) <- 'Log10(S100B), study day 1'
label(endo.data$uchl.log10) <- 'Log10(UCHL), study day 1'
label(endo.data$il6.prime) <- 'Log10(IL-6) spline, study day 1'
label(endo.data$bdnf.prime) <- 'Log10(BDNF) spline, study day 1'
label(endo.data$esel.prime) <- 'Log10(E-selectin) spline, study day 1'
label(endo.data$pai1.prime) <- 'Log10(PAI-1) spline, study day 1'
label(endo.data$s100b.prime) <- 'Log10(S100B) spline, study day 1'
label(endo.data$uchl.prime) <- 'Log10(UCHL) spline, study day 1'
label(endo.data$age.prime) <- 'Age / 10 spline'
label(endo.data$rbans.global.score.3) <- 'RBANS global score, 3m'
label(endo.data$rbans.global.score.12) <- 'RBANS global score, 12m'
label(endo.data$trail.b.tscore.3) <- 'Trails B T-score, 3m'
label(endo.data$trail.b.tscore.12) <- 'Trails B T-score, 12m'
label(endo.data$adl.totscore.3) <- 'ADL score, 3m'
label(endo.data$adl.totscore.12) <- 'ADL score, 12m'
label(endo.data$faq.totscore.3) <- 'FAQ score, 3m'
label(endo.data$faq.totscore.12) <- 'FAQ score, 12m'

## Create data set for descriptive tables
endo.data.desc <- bind_rows(endo.data,
                            endo.data[endo.data$fu.cohort.either,]) %>%
  mutate(cohort = factor(c(rep(1, nrow(endo.data)),
                           rep(2, sum(endo.data$cog.cohort.either | endo.data$func.cohort.either))),
                         levels = 1:2,
                         labels = c('Delirium Duration',
                                    'All Followup Patients')),
         ## Revamp race and admission diagnosis variables to shorten categories
         race.pp = factor(as.character(race.pp)),
         admit.dx = factor(ifelse(admit.dx ==
                                    'Metabolic acidosis, hypovolemia, or electrolyte disturbance',
                                  'Metabolic acidosis/hypovolemia/electrolytes',
                                  as.character(admit.dx))))

label(endo.data.desc$age.enroll) <- 'Age at enrollment'
label(endo.data.desc$sex.pp) <- 'Sex'
label(endo.data.desc$race.pp) <- 'Race'
label(endo.data.desc$edu) <- 'Years of education'
label(endo.data.desc$charlson.score) <- 'Charlson score'
label(endo.data.desc$iqcode.score.e) <- 'IQCODE score (missing -> 3)'
label(endo.data.desc$stroke.risk) <- 'Framingham stroke risk profile'
label(endo.data.desc$adl.e) <- 'Katz ADL at enrollment'
label(endo.data.desc$faq.e) <- 'FAQ at enrollment'
label(endo.data.desc$disabled.e) <- 'Disabled at enrollment (ADL or FAQ > 0)'
label(endo.data.desc$frailty) <- 'CSHA Frailty at enrollment'
label(endo.data.desc$icu.type) <- 'ICU type'
label(endo.data.desc$admit.dx) <- 'Primary admission diagnosis'
label(endo.data.desc$num.apache) <- 'APACHE II at ICU admission'
label(endo.data.desc$sofa) <- 'SOFA at ICU admission'
label(endo.data.desc$mean.benz.icu) <- 'Mean 24h benzos in the ICU (MDZ)'
label(endo.data.desc$mean.op.new.icu) <- 'Mean 24h opioids in the ICU (fentanyl)'
label(endo.data.desc$mean.prop.icu) <- 'Mean 24h propofol in the ICU'
label(endo.data.desc$mean.dex.icu) <- 'Mean 24h dex in the ICU'
label(endo.data.desc$mean.hal.icu) <- 'Mean 24h haldol in the ICU'
label(endo.data.desc$cvsofa.day1) <- 'Cardiovasulcar SOFA score, study day 1'
label(endo.data.desc$sevsepsis.day1) <- 'Severely septic, study day 1'
label(endo.data.desc$ever.vent.s) <- 'Ever on MV during study period'
label(endo.data.desc$vent.los.tot.eo) <- 'Time on MV among exposed'
label(endo.data.desc$ever.del.s.imp) <- 'Ever delirious during study period'
label(endo.data.desc$del.s.imp.eo) <- 'Days of delirium among exposed'
label(endo.data.desc$ever.coma.s.imp) <- 'Ever comatose during study period'
label(endo.data.desc$coma.s.imp.eo) <- 'Days of coma among exposed'
label(endo.data.desc$ever.sevseptic.s) <- 'Ever severely septic during study period'
label(endo.data.desc$icudays.sevseptic.eo) <- 'Days of severe sepsis among exposed'
label(endo.data.desc$icu.los.tot) <- 'Total ICU length of stay'
label(endo.data.desc$hosp.los) <- 'Hospital length of stay'
label(endo.data.desc$died.brain.365) <- '12-month mortality'
label(endo.data.desc$has.il6) <- 'IL-6 measured, study day 1'
label(endo.data.desc$has.bdnf) <- 'BDNF measured, study day 1'
label(endo.data.desc$has.esel) <- 'E-selectin measured, study day 1'
label(endo.data.desc$has.pai1) <- 'PAI-1 measured, study day 1'
label(endo.data.desc$has.s100b) <- 'S100B measured, study day 1'
label(endo.data.desc$has.uchl) <- 'UCHL measured, study day 1'
label(endo.data.desc$il6.day1) <- 'IL-6, study day 1'
label(endo.data.desc$bdnf.day1) <- 'BDNF, study day 1'
label(endo.data.desc$esel.day1) <- 'E-selectin, study day 1'
label(endo.data.desc$pai1.day1) <- 'PAI-1, study day 1'
label(endo.data.desc$s100b.day1) <- 'S100B, study day 1'
label(endo.data.desc$uchl.day1) <- 'UCHL, study day 1'
label(endo.data.desc$il6.log10) <- 'Log10(IL-6), study day 1'
label(endo.data.desc$bdnf.log10) <- 'Log10(BDNF), study day 1'
label(endo.data.desc$esel.log10) <- 'Log10(E-selectin), study day 1'
label(endo.data.desc$pai1.log10) <- 'Log10(PAI-1), study day 1'
label(endo.data.desc$s100b.log10) <- 'Log10(S100B), study day 1'
label(endo.data.desc$uchl.log10) <- 'Log10(UCHL), study day 1'
label(endo.data.desc$rbans.global.score.3) <- 'RBANS global score, 3m'
label(endo.data.desc$cohort.norbans.3) <- 'In 3m followup cohort, but missing 3m RBANS'
label(endo.data.desc$rbans.global.score.12) <- 'RBANS global score, 12m'
label(endo.data.desc$cohort.norbans.12) <- 'In 12m followup cohort, but missing 12m RBANS'
label(endo.data.desc$trail.b.tscore.3) <- 'Trails B T-score, 3m'
label(endo.data.desc$cohort.notrailb.3) <- 'In 3m followup cohort, but missing 3m Trails B'
label(endo.data.desc$trail.b.tscore.12) <- 'Trails B T-score, 12m'
label(endo.data.desc$cohort.notrailb.12) <- 'In 12m followup cohort, but missing 12m Trails B'
label(endo.data.desc$adl.totscore.3) <- 'ADL score, 3m'
label(endo.data.desc$cohort.noadl.3) <- 'In 3m followup cohort, but missing 3m ADL'
label(endo.data.desc$adl.totscore.12) <- 'ADL score, 12m'
label(endo.data.desc$cohort.noadl.12) <- 'In 12m followup cohort, but missing 12m ADL'
label(endo.data.desc$faq.totscore.3) <- 'FAQ score, 3m'
label(endo.data.desc$cohort.nofaq.3) <- 'In 3m followup cohort, but missing 3m FAQ'
label(endo.data.desc$faq.totscore.12) <- 'FAQ score, 12m'
label(endo.data.desc$cohort.nofaq.12) <- 'In 12m followup cohort, but missing 12m FAQ'

@

\section{Descriptive Statistics}
Tables \ref{table:enrollstat} - \ref{table:fustat} present descriptive statistics for the
\Sexpr{length(unique(endo.data$id))} patients with endothelial/BBB injury markers and long-term
followup data. Cohort definitions are as follows:
\begin{itemize}
\item Entire cohort: all patients who had at least some followup testing at at
      least one time point \textbf{and} had at least partial biomarker data (at least one
      endothelial/BBB marker present on day 1). \textbf{Total N: \Sexpr{nrow(endo.data)}.}
\item Any followup outcomes: all patients who had at least one of RBANS global, Trails B, Katz ADL
      or FAQ at at least one time point and had at least partial biomarker data. \textbf{Total N:
      \Sexpr{sum(endo.data$fu.cohort.either)}.}
      \begin{itemize}
      \item 3-month followup: Any patient with at least partial endothelial/BBB marker data at
      baseline and at least one of RBANS global, Trails B, Katz ADL or FAQ at 3-month followup.
      \textbf{Total N: \Sexpr{sum(endo.data$fu.cohort.3)}.}
      \item 12-month followup: Any patient with at least partial endothelial/BBB marker data at
      baseline and at least one of RBANS global, Trails B, Katz ADL or FAQ at 12-month followup.
      \textbf{Total N: \Sexpr{sum(endo.data$fu.cohort.12)}.}
      \end{itemize}
\end{itemize}

\clearpage
\subsection{Patient Flow}

A CONSORT-like diagram for this study is tricky, because patients were not eligible to
be included in delirium models unless they also had followup data available.

For these purposes, "followup" indicates at least one of the following tests had scores available at 3- and/or 12-month followup: RBANS global; Trails B; ADL; FAQ.

<<consort_table>>=
## -- In-hospital section ------------------------------------------------------
n_wdall <- sum(brain.oneobs$hosp.status == "Withdrew all data")
n_eval <- sum(brain.oneobs$hosp.status != "Withdrew all data")
n_diedinhosp <- sum(brain.oneobs$hosp.status == "Died in hospital")
n_wdinhosp <- sum(brain.oneobs$hosp.status == "Withdrew in hospital")
n_dcalive <- sum(brain.oneobs$hosp.status == "Discharged alive, remained in study")
n_nomarkers <- length(setdiff(
  subset(brain.oneobs, hosp.status == "Discharged alive, remained in study")$id,
  unique(marker.data$id)
))
n_markers <- length(unique(marker.data$id))

consort_inhosp <- tribble(
  ~ current,                                                   ~ npts,
  "Enrolled in BRAIN-ICU",                                     nrow(brain.oneobs),
  "~~~Withdrew all data",                                      n_wdall,
  "~~~Evaluated in hospital",                                  n_eval,
  "~~~~~~Died in hospital",                                    n_diedinhosp,
  "~~~~~~Withdrew in hospital",                                n_wdinhosp,
  "~~~~~~Discharged, remained in study",                       n_dcalive,
  "~~~~~~~~~No biomarker data available*",                     n_nomarkers,
  "~~~~~~~~~>=1 biomarker available; inc. in delirium models", n_markers
)

## -- 3m followup section ------------------------------------------------------
n_died3m <- sum(brain.oneobs$three.status == "Died before 3m followup", na.rm = TRUE)
n_wd3m <- sum(brain.oneobs$three.status == "Withdrew before 3m followup", na.rm = TRUE)
n_noassess3m <- sum(brain.oneobs$three.status %in%
                      c("Permanently lost to followup", "Temporarily lost to followup"),
                    na.rm = TRUE)
n_lostperm3m <- sum(brain.oneobs$three.status == "Permanently lost to followup", na.rm = TRUE)
n_losttemp3m <- sum(brain.oneobs$three.status == "Temporarily lost to followup", na.rm = TRUE)
n_fu3m <- sum(brain.oneobs$three.status == "Assessed at 3m followup", na.rm = TRUE)
n_fu3m_nomarker <- length(setdiff(hadfu.3m, unique(marker.data$id)))
n_fu3m_hadmarker <- length(intersect(hadfu.3m, unique(marker.data$id)))

consort_3m <- tribble(
  ~ current,                                          ~ npts,
    "Discharged, remained in study",                      n_dcalive,
    "~~~Died before 3m followup",                         n_died3m,
    "~~~Withdrew before 3m followup",                     n_wd3m,
    "~~~No 3m assessment",                                n_noassess3m,
    "~~~~~~Permanently lost to followup",                 n_lostperm3m,
    "~~~~~~Temporarily lost to followup",                 n_losttemp3m,
    "~~~3m followup available",                           n_fu3m,
    "~~~~~~No biomarker data available",                  n_fu3m_nomarker,
    "~~~~~~Biomarker data available (inc. in 3m models)", n_fu3m_hadmarker
)

## -- 12m followup section -----------------------------------------------------
n_died12m <- sum(brain.oneobs$twelve.status == "Died before 12m followup", na.rm = TRUE)
n_wd12m <- sum(brain.oneobs$twelve.status == "Withdrew before 12m followup", na.rm = TRUE)
n_noassess12m <- sum(brain.oneobs$twelve.status == "Lost to followup", na.rm = TRUE)
n_fu12m <- sum(brain.oneobs$twelve.status == "Assessed at 12m followup", na.rm = TRUE)
n_fu12m_nomarker <- length(setdiff(hadfu.12m, unique(marker.data$id)))
n_fu12m_hadmarker <- length(intersect(hadfu.12m, unique(marker.data$id)))

consort_12m <- tribble(
  ~ current,                                             ~ npts,
    "Eligible for 12m followup",                           n_dcalive - (n_died3m + n_wd3m),
    "~~~Died before 12m followup",                         n_died12m,
    "~~~Withdrew before 12m followup",                     n_wd12m,
    "~~~No 12m assessment",                                n_noassess12m,
    "~~~12m followup available",                           n_fu12m,
    "~~~~~~No biomarker data available",                   n_fu12m_nomarker,
    "~~~~~~Biomarker data available (inc. in 12m models)", n_fu12m_hadmarker
)

consort_info <- bind_rows(consort_inhosp, consort_3m, consort_12m)

@

<<printconsort, results = "asis">>=
latex(consort_info, file = "",
      rowname = "",
      title = "",
      where = "!h",
      caption = "Patient Status Throughout Study",
      colheads = c("", "N"),
      col.just = c("l", "r"),
      rgroup = c("In-Hospital", "3 Months", "12 Months"),
      n.rgroup = c(8, 9, 7),
      insert.bottom = "\\emph{* Biomarkers were only measured on patients with at least one of RBANS, Trails B, ADL, or FAQ at at least one followup point.}")

@

\clearpage
\subsection{Cohort Description}
<<printdescstats, results='asis'>>=
latex(summaryM(age.enroll + sex.pp + race.pp + edu + charlson.score + iqcode.score.e + stroke.risk +
                 adl.e + faq.e + disabled.e + frailty + icu.type + admit.dx + num.apache +
                 sofa ~ cohort,
               data = endo.data.desc),
      file = '',
      where = '!h',
      caption = 'Enrollment Characteristics',
      caption.lot = 'Enrollment Characteristics',
      label = 'table:enrollstat',
      digits = 2,
      size = 'small',
      exclude1 = TRUE,
      long = TRUE,
      prmsd = TRUE,
      prn = FALSE,
      what = '%',
      npct = 'both')

latex(summaryM(mean.benz.icu + mean.op.new.icu + mean.prop.icu + mean.dex.icu + mean.hal.icu +
                 ever.vent.s + vent.los.tot.eo + ever.del.s.imp + del.s.imp.eo +
                 ever.coma.s.imp + coma.s.imp.eo + ever.sevseptic.s + icudays.sevseptic.eo +
                 cvsofa.day1 + sevsepsis.day1 + icu.los.tot + hosp.los + died.brain.365 ~ cohort,
               data = endo.data.desc),
      file = '',
      where = '!h',
      caption = 'In-Hospital Characteristics',
      caption.lot = 'In-Hospital Characteristics',
      label = 'table:inhospstat',
      digits = 2,
      size = 'footnotesize',
      exclude1 = FALSE,
      long = TRUE,
      prmsd = TRUE,
      prn = FALSE,
      what = '%',
      npct = 'both')

latex(summaryM(has.il6 + il6.day1 + has.bdnf + bdnf.day1 + has.esel + esel.day1 + has.pai1 +
                 pai1.day1 + has.s100b + s100b.day1 + has.uchl + uchl.day1 ~ cohort,
               data = endo.data.desc),
      file = '',
      where = '!h',
      caption = 'IL-6 and Endothelial/BBB Marker Characteristics',
      caption.lot = 'IL-6 and Endothelial/BBB Marker Characteristics',
      label = 'table:markerstat',
      digits = 2,
      size = 'footnotesize',
      exclude1 = TRUE,
      long = FALSE,
      prmsd = TRUE,
      prn = FALSE,
      what = '%',
      npct = 'both')

@

\clearpage
<<printoutcomes, results = 'asis'>>=
latex(summaryM(rbans.global.score.3 + cohort.norbans.3 + rbans.global.score.12 + cohort.norbans.12 +
                 trail.b.tscore.3 + cohort.notrailb.3 + trail.b.tscore.12 + cohort.notrailb.12 +
                 adl.totscore.3 + cohort.noadl.3 + adl.totscore.12 + cohort.noadl.12 +
                 faq.totscore.3 + cohort.nofaq.3 + faq.totscore.12 + cohort.nofaq.12 ~ cohort,
               data = subset(endo.data.desc, cohort == 'All Followup Patients')),
      file = '',
      where = '!h',
      caption = 'Followup Outcomes among Patients with Any Followup Data',
      caption.lot = 'Followup Outcomes among Patients with Any Followup Data',
      label = 'table:fustat',
      digits = 2,
      what = '%',
      npct = 'both',
      prmsd = TRUE)

@

\clearpage
<<markerhist>>=
marker.hist.data.org <- endo.data %>%
  select(il6.day1, bdnf.day1, esel.day1, pai1.day1, s100b.day1, uchl.day1) %>%
  gather(key = marker, value = markerval) %>%
  mutate(marker = toupper(gsub('\\.day1$', '', marker)))

marker.hist.data.log10 <- endo.data %>%
  select(il6.log10, bdnf.log10, esel.log10, pai1.log10, s100b.log10, uchl.log10) %>%
  gather(key = marker, value = markerval) %>%
  mutate(marker = toupper(gsub('\\.log10$', '', marker)))

## Function to create histogram of biomarkers on either scale
marker.hist <- function(histdata, xlabel){
  ggplot(aes(x = markerval), data = histdata) +
    facet_wrap(~ marker, scales = 'free_x') +
    geom_histogram(fill = 'navy') +
    xlab(xlabel) +
    ylab('Frequency') +
    theme_bw() +
    theme(axis.text = element_text(colour = 'gray30', size = 8),
          axis.title.x = element_text(vjust = -0.5),
          axis.ticks = element_blank(),
          strip.text = element_text(face = 'bold'))
}

@

<<printmarkerhistorg, results='asis', fig.cap='Histogram of IL-6 and Endothelial Markers, Original Scale', fig.height=4.5, fig.width=8, fig.pos='!h'>>=
marker.hist(marker.hist.data.org, xlabel = 'Endothelial Marker Value, Original Scale')

@

<<printmarkerhistlog10, results='asis', fig.cap='Histogram of IL-6 and Endothelial Markers, Log10 Scale', fig.height=4.5, fig.width=8, fig.pos='!h'>>=
marker.hist(marker.hist.data.log10, xlabel = 'Endothelial Marker Value, Log10 Scale')

@

\subsection{Description of Missingness}
\subsubsection{Delirium Duration Models}
All patients with 1) any long-term followup data and 2) at least partial enrollment biomarker data available were eligible to be included in models with delirium duration as the outcome. Detailed descriptions of missingness for this cohort are included in Table \ref{table:missingdel}, and comparisons of patients with and without any missing data in this cohort are included in Table \ref{table:compmissdel}.

<<delmissingprep>>=
## Vector of variables not included in models, but helpful to describe differences in patients
addl_missvars <- c("sofa", "icu.type", "frailty", "sex.pp", "edu", "ever.vent.s", "vent.los.tot.eo",
                   "ever.del.s.imp", "del.s.imp.eo", "ever.coma.s.imp", "coma.s.imp.eo",
                   "ever.sevseptic.s", "icudays.sevseptic.eo", "icu.los.tot", "hosp.los")

## -- Function to determine N, % of missingness of a particular variable given a df ---------------
npct_missing <- function(vname, df){
  data.frame(vname = vname,
             nmiss = sum(is.na(df[, vname])),
             pctmiss = mean(is.na(df[, vname])) * 100)
}

## -- Stats for missing any data for delirium models -------------------------------------------
del_missvars <- c("del.s.imp", "bdnf.day1", "esel.day1", "pai1.day1", "s100b.day1", "uchl.day1",
                  "il6.day1", "age.enroll", "charlson.score", "iqcode.score.e", "stroke.risk",
                  "apache.aps", "cvsofa.day1", "sevsepsis.day1")

endo.data$missany.del <- factor(as.numeric(rowSums(is.na(endo.data[,del_missvars])) > 0),
                                levels = 0:1,
                                labels = c("Complete data", "Missing >=1 variable"))
label(endo.data$missany.del) <- "Missing any data for delirium models"

n_missany_del <- sum(endo.data$missany.del == "Missing >=1 variable")
pct_missany_del <- mean(endo.data$missany.del == "Missing >=1 variable")*100
del_missany <- data.frame(vname = "missany.del",
                          nmiss = n_missany_del,
                          pctmiss = pct_missany_del)

## -- Missingness among model outcome/covariates -----------------------------------------------
del_missdf <- map_df(del_missvars, .f = npct_missing, df = endo.data) %>%
  bind_rows(del_missany, .) %>%
  mutate(npctmiss = paste0(nmiss, " (", round(pctmiss, 0), "\\%)"),
         vlabel = label(endo.data[,vname]))

## -- Describe cohorts of patients with complete vs incomplete data ----------------------------
del_misscomp <- summaryM(as.formula(paste(paste(c(del_missvars, addl_missvars),
                                                collapse = " + "),
                                          "~ missany.del")),
                         data = endo.data)

@

<<printdelmiss, results = "asis">>=
latex(subset(del_missdf, select = c(vlabel, npctmiss)), file = "",
      where = "!h",
      label = "table:missingdel",
      rowname = NULL,
      caption = "Covariate and Outcome Missingness, Delirium Duration Models",
      caption.lot = "Covariate and Outcome Missingness, Delirium Duration Models",
      colheads = c("Variable", "N (\\%) Missing"),
      col.just = c("l", "r"),
      cgroup = c("", paste("Total N:", nrow(endo.data))),
      n.cgroup = rep(1, 2))

latex(del_misscomp, file = "",
      where = "!h",
      landscape = TRUE,
      size = "small",
      caption = "Patients With vs Without Missing Data, Delirium Duration Models",
      caption.lot = "Patients With vs Without Missing Data, Delirium Duration Models",
      digits = 2,
      prmsd = TRUE,
      what = "%",
      npct = "none")

@

\subsubsection{Long-Term Outcome Models}
All patients with 1) any long-term data for the RBANS, Trails B, ADL and/or FAQ and 2) at least partial enrollment biomarker data available were eligible to be included in models with one of these tests as the outcome. Detailed descriptions of missingness for this cohort, at both 3 and 12 months and overall, are included in Table \ref{table:missinglt}; Table \ref{table:compmisslt} compares patients with any missing data at 3 and/or 12 months to those with complete data at the time point(s) they were included.

<<ltmissingprep>>=
## -- Stats for missing any data for long-term models -------------------------------------------
lt_testvars <- c("rbans.global.score", "trail.b.tscore", "adl.totscore", "faq.totscore")
lt_missvars <- c("bdnf.day1", "esel.day1", "pai1.day1", "s100b.day1", "uchl.day1", "il6.day1",
                 "age.enroll", "charlson.score", "iqcode.score.e", "stroke.risk", "edu",
                 "disabled.e", "mean.modsofa.icu", "del.s.imp", "coma.s.imp", "icudays.sevseptic.s")

## -- Time-specific missingness -----------------------------------------------------------------
vars_3m <- c(paste0(lt_testvars, ".3"), lt_missvars)
vars_12m <- c(paste0(lt_testvars, ".12"), lt_missvars)

endo.data$missany.3m <-
  factor(as.numeric(ifelse(!(endo.data$cog.cohort.3 | endo.data$func.cohort.3), NA,
                           rowSums(is.na(endo.data[,vars_3m])) > 0)),
         levels = 0:1,
         labels = c("Complete data", "Missing >=1 variable"))
endo.data$missany.12m <-
  factor(as.numeric(ifelse(!(endo.data$cog.cohort.12 | endo.data$func.cohort.12), NA,
                           rowSums(is.na(endo.data[,vars_12m])) > 0)),
         levels = 0:1,
         labels = c("Complete data", "Missing >=1 variable"))
endo.data$missany.lt <- factor(as.numeric(
  ifelse(!endo.data$fu.cohort.either, NA,
         (endo.data$fu.cohort.3 & rowSums(is.na(endo.data[,paste0(lt_testvars, ".3")])) > 0) |
           (endo.data$fu.cohort.12 & rowSums(is.na(endo.data[,paste0(lt_testvars, ".12")])) > 0) |
           rowSums(is.na(endo.data[,lt_missvars])) > 0)),
  levels = 0:1,
  labels = c("Complete data", "Missing >=1 variable"))

label(endo.data$missany.3m) <- "Missing any data for 3m models"
label(endo.data$missany.12m) <- "Missing any data for 12m models"
label(endo.data$missany.lt) <- "Missing any data for long-term models"

## Create data frames for "missing anything" at each time point
n_missany_3m <- sum(endo.data$missany.3m == "Missing >=1 variable", na.rm = TRUE)
pct_missany_3m <- mean(endo.data$missany.3m == "Missing >=1 variable", na.rm = TRUE)*100
missdf_3m_any <- data.frame(vname = "missany.3m",
                            nmiss = n_missany_3m,
                            pctmiss = pct_missany_3m)

n_missany_12m <- sum(endo.data$missany.12m == "Missing >=1 variable", na.rm = TRUE)
pct_missany_12m <- mean(endo.data$missany.12m == "Missing >=1 variable", na.rm = TRUE)*100
missdf_12m_any <- data.frame(vname = "missany.12m",
                             nmiss = n_missany_12m,
                             pctmiss = pct_missany_12m)

n_missany_lt <- sum(endo.data$missany.lt == "Missing >=1 variable", na.rm = TRUE)
pct_missany_lt <- mean(endo.data$missany.lt == "Missing >=1 variable", na.rm = TRUE)*100
missdf_lt_any <- data.frame(vname = "missany.lt",
                            nmiss = n_missany_lt,
                            pctmiss = pct_missany_lt)

## -- Function to get missingness for a given *test* (time-specific) ---------------------------
npct_missing_test <- function(vname, timept = c(3, 12), df){
  data.frame(vname = vname,
             nmiss = sum(is.na(df[, paste(vname, timept, sep = ".")])),
             pctmiss = mean(is.na(df[, paste(vname, timept, sep = ".")])) * 100)
}

## -- Function to get missingness for test at either time, given that patient was in cohort ----
npct_missing_test_312 <- function(vname){
  vname2 <- ifelse(vname == "trail.b.tscore", "trailb",
                   gsub("\\..*$", "", vname))
  
  rows_miss <- rowSums(
    subset(endo.data, fu.cohort.either)[,paste0("cohort.no", vname2, ".", c(3, 12))],
    na.rm = TRUE
  )
  
  data.frame(vname = vname,
             nmiss = sum(rows_miss > 0),
             pctmiss = mean(rows_miss > 0) * 100)
}

## -- Missingness among model outcome/covariates -----------------------------------------------
## 3m-specific
## Tests
missdf_3m_tests <- map_df(
  lt_testvars,
  .f = npct_missing_test,
  timept = 3,
  df = subset(endo.data, fu.cohort.3)
)

## Covariates
missdf_3m_covars <- map_df(lt_missvars, .f = npct_missing, df = subset(endo.data, fu.cohort.3))

## 12m-specific
## Tests
missdf_12m_tests <- map_df(
  lt_testvars,
  .f = npct_missing_test,
  timept = 12,
  df = subset(endo.data, fu.cohort.12)
)

missdf_12m_covars <- map_df(lt_missvars, .f = npct_missing, df = subset(endo.data, fu.cohort.12))

## Either time point
missdf_lt_tests <- map_df(lt_testvars,.f = npct_missing_test_312)

missdf_lt_covars <- map_df(
  lt_missvars,
  .f = npct_missing,
  df = subset(endo.data, cog.cohort.either | func.cohort.either)
)

## Combine results for each time point
missdf_3m <- bind_rows(list(missdf_3m_any, missdf_3m_tests, missdf_3m_covars)) %>%
  mutate(npctmiss = paste0(nmiss, " (", round(pctmiss, 0), "\\%)"),
         vname2 = ifelse(vname %in% lt_testvars, paste0(vname, ".3"), vname),
         vlabel = label(endo.data[,vname2]),
         vlabel = gsub(" for 3m models", "", gsub(", 3m", "", vlabel)))

missdf_12m <- bind_rows(list(missdf_12m_any, missdf_12m_tests, missdf_12m_covars)) %>%
  mutate(npctmiss = paste0(nmiss, " (", round(pctmiss, 0), "\\%)"),
         vname2 = ifelse(vname %in% lt_testvars, paste0(vname, ".12"), vname),
         vlabel = label(endo.data[,vname2]),
         vlabel = gsub(" for 12m models", "", gsub(", 12m", "", vlabel)))

missdf_lt <- bind_rows(list(missdf_lt_any, missdf_lt_tests, missdf_lt_covars)) %>%
  mutate(npctmiss = paste0(nmiss, " (", round(pctmiss, 0), "\\%)"),
         vname2 = ifelse(vname %in% lt_testvars, paste0(vname, ".12"), vname),
         vlabel = label(endo.data[,vname2]),
         vlabel = gsub(" for long-term models", "", gsub(", 12m", "", vlabel)))

missdf_lt_combined <- reduce(list(missdf_lt, missdf_3m, missdf_12m), left_join, by = "vlabel") %>%
  ## Order: overall; 3m; 12m
  dplyr::select(vlabel, npctmiss.x, npctmiss.y, npctmiss)

## -- Describe cohorts of patients with complete vs incomplete data ----------------------------
lt_misscomp <- summaryM(as.formula(paste(paste(c(lt_missvars, addl_missvars),
                                                collapse = " + "),
                                          "~ missany.lt")),
                         data = subset(endo.data, fu.cohort.either))

@

<<printltmiss, results = "asis">>=
latex(subset(missdf_lt_combined, select = c(vlabel, npctmiss.x, npctmiss.y, npctmiss)),
      file = "",
      where = "!h",
      size = "small",
      label = "table:missinglt",
      rowname = NULL,
      caption = "Covariate and Outcome Missingness, Long-Term Outcome Models",
      caption.lot = "Covariate and Outcome Missingness, Long-Term Outcome Models",
      colheads = c("Variable", rep("N (\\%) Missing", 3)),
      col.just = c("l", "r", "r", "r"),
      cgroup = c("", "Either Time Point", "3 Months", "12 Months"),
      extracolheads = c("",
                        paste("N =", sum(endo.data$fu.cohort.either)),
                        paste("N =", sum(endo.data$fu.cohort.3)),
                        paste("N =", sum(endo.data$fu.cohort.12))),
      n.cgroup = c(1, 1, 1, 1),
      insert.bottom = "\\emph{Note: Long-term test scores are only examined for missingness at the time point(s) the patient was eligible for followup. For example, if a patient was alive at 3m and had no RBANS global score available, but died prior to 12m, only the 3m RBANS is considered missing.}")

latex(lt_misscomp, file = "",
      where = "!h",
      landscape = TRUE,
      size = "small",
      caption = "Patients With vs Without Missing Data, Long-Term Outcome Models",
      caption.lot = "Patients With vs Without Missing Data, Long-Term Outcome Models",
      digits = 2,
      prmsd = TRUE,
      what = "%",
      npct = "none")

@

<<analysisprep>>=
## Get values to interact for age, IL-6
intvals.age <- quantile(endo.data[,'age.enroll'], probs = c(0.25, 0.5, 0.75, 0.9), na.rm = TRUE)
intvals.il6 <- quantile(endo.data[,'il6.log10'], probs = c(0.25, 0.5, 0.75, 0.9), na.rm = TRUE)

## Function to format and round number to the same number of digits
rndformat <- function(val, digits = 2){
  format(round(val, digits), nsmall = digits, big.mark = ',')
}

formatp <- function(val){
  ifelse(val < 0.0001, '<0.0001',
  ifelse(val < 0.001, '<0.001',
         rndformat(val, digits = 3)))
}

## Function to get p-value from lmtest::lrtest()
lrpval <- function(mod1, mod2, pc.method = 'Wald', mice.obj){
  if(length(class(mod1)) != length(class(mod2))){
    stop('mod1 and mod2 must be of the same class')
  } else if(sum(class(mod1) != class(mod2)) > 0){
    stop('mod1 and mod2 must be of the same class')
  } else{
    if('mira' %in% class(mod1)){
      pool.compare(mod1, mod2, method = pc.method, data = mice.obj)$pvalue
    } else{
      as.data.frame(lmtest::lrtest(mod1, mod2))[2, 'Pr(>Chisq)']
    }
  }
}

## -- Function to calculate ratio, CI for a logit model (eg, negative binomial), using manual ------
## -- variables for nonlinear and interaction terms ------------------------------------------------

## Will calculate IRR/CI for either an endothelial biomarker or IL-6

## Preliminary: Use same comparisons for each biomarker, from original data set, regardless of
##  which cohort we're using
## Main coefficients
bio.ratiovals <- lapply(paste0(c('il6', endo.names), '.log10'),
                        FUN = function(b){
                          quantile(endo.data[,b], probs = c(0.25, 0.75), na.rm = TRUE) })
names(bio.ratiovals) <- paste0(c('il6', endo.names), '.log10')

## Nonlinear terms
biop.ratiovals <- lapply(paste0(c('il6', endo.names), '.log10'),
                         FUN = function(b){
                           as.numeric(rcspline.eval(quantile(endo.data[,b],
                                                             probs = c(0.25, 0.75),
                                                             na.rm = TRUE),
                                                    knots = rcspline.eval(endo.data[,b],
                                                                          nk = 3,
                                                                          knots.only = TRUE))) })
names(biop.ratiovals) <- paste0(c('il6', endo.names), '.log10')

## Function
calc.ratioci.endobbb <- function(irr.marker = TRUE,
                                 marker = c('bdnf', 'esel', 'pai1', 's100b', 'uchl'),
                                 marker.adjust = NULL,
                                 markerp.adjust = NULL,
                                 age.adjust = default.adj.vals$age.div10,
                                 il6.adjust = NULL,
                                 il6p.adjust = NULL,
                                 modcoefs,
                                 modvcov,
                                 alpha = 0.05){

  ## If calculating IRR for an endothelial biomarker
  if(irr.marker){
    ## Default values for biomarkers = those from bio.ratiovals
    if(is.null(marker.adjust)){
      marker.adjust <- as.numeric(bio.ratiovals[[paste0(marker, '.log10')]])
    }
    if(is.null(markerp.adjust)){
      markerp.adjust <- as.numeric(biop.ratiovals[[paste0(marker, '.log10')]])
    }

    if(length(!is.na(as.numeric(marker.adjust))) != 2){
      stop('marker.adjust must have exactly two non-missing numeric values')
    }

    ## Default value for IL-6 = median and corresponding nonlinear value
    if(is.null(il6.adjust)){
      il6.adjust <- default.adj.vals$il6.log10
    }
    if(is.null(il6p.adjust)){
      il6p.adjust <- default.adj.vals$il6.prime
    }

    ## Create named vectors of values to adjust to
    ratiovars <- lapply(1:2, FUN = function(m){
      tmp <- c('marker.log10' = marker.adjust[m],
               'marker.prime' = markerp.adjust[m],
               'marker.age' = marker.adjust[m] * age.adjust,
               'markerp.age' = markerp.adjust[m] * age.adjust,
               'marker.il6' = marker.adjust[m] * il6.adjust,
               'markerp.il6' = markerp.adjust[m] * il6.adjust,
               'marker.il6p' = marker.adjust[m] * il6p.adjust,
               'markerp.il6p' = markerp.adjust[m] * il6p.adjust)
      names(tmp) <- gsub('marker', marker, names(tmp))
      tmp
    })
  ## Otherwise, we're calculating IRR/CI for IL-6; adjust biomarker to median
  } else{
    ## Default values for biomarkers = those from bio.ratiovals
    if(is.null(marker.adjust)){
      marker.adjust <- median(endo.data[,paste0(marker, '.log10')], na.rm = TRUE)
    }
    if(is.null(markerp.adjust)){
      markerp.adjust <-
        as.numeric(rcspline.eval(marker.adjust,
                                 knots = rcspline.eval(endo.data[,paste0(marker, '.log10')],
                                                       nk = 3, knots.only = TRUE)))
    }

    ## Default values for IL-6 = those from bio.ratiovals
    if(is.null(il6.adjust)){
      il6.adjust <- as.numeric(bio.ratiovals[['il6.log10']])
    }
    if(is.null(il6p.adjust)){
      il6p.adjust <- as.numeric(biop.ratiovals[['il6.log10']])
    }

    ## Create named vectors of values to adjust to
    ratiovars <- lapply(1:2, FUN = function(m){
      tmp <- c('il6.log10' = il6.adjust[m],
               'il6.prime' = il6p.adjust[m],
               'marker.il6' = marker.adjust * il6.adjust[m],
               'markerp.il6' = markerp.adjust * il6.adjust[m],
               'marker.il6p' = marker.adjust * il6p.adjust[m],
               'markerp.il6p' = markerp.adjust * il6p.adjust[m])
      names(tmp) <- gsub('marker', marker, names(tmp))
      tmp
    })
  }

  use.coefs <- (1:length(modcoefs))[!is.na(pmatch(names(modcoefs), names(ratiovars[[1]])))]
  use.betas <- modcoefs[use.coefs]

  ## Get vcov matrix for involved components
  use.vcov <- modvcov[use.coefs, use.coefs]

  ## Calculate X values: vector 2 - vector 1
  xvals <- ratiovars[[2]] - ratiovars[[1]]
  xvals <- xvals[names(xvals) %in% names(modcoefs)]

  ## Calculate each component of linear predictor: beta * xvals
  beta.x <- unlist(lapply(1:length(use.betas), FUN = function(b){
    prod(c(use.betas[b], xvals[b]))
  }))

  ratiovar.logor <- sum(beta.x)
  ratiovar.or <- exp(ratiovar.logor)

  ## Calculate SE
  ratiovar.se <- sqrt(xvals %*% use.vcov %*% xvals)

  critval <- 1 - alpha / 2

  ratiovar.lcl <- exp(ratiovar.logor - qnorm(critval)*ratiovar.se)
  ratiovar.ucl <- exp(ratiovar.logor + qnorm(critval)*ratiovar.se)

  return(c('pointest' = ratiovar.or, 'lcl' = ratiovar.lcl, 'ucl' = ratiovar.ucl))
}

## -- Create mice objects to use for multiple imputation for all models ----------------------------
mice.vars <- c('bdnf.log10', 'bdnf.prime', 'bdnf.age', 'bdnfp.age', 'bdnf.agep', 'bdnfp.agep',
               'bdnf.il6', 'bdnfp.il6', 'bdnf.il6p', 'bdnfp.il6p',
               'esel.log10', 'esel.prime', 'esel.age', 'eselp.age', 'esel.agep', 'eselp.agep',
               'esel.il6', 'eselp.il6', 'esel.il6p', 'eselp.il6p',
               'pai1.log10', 'pai1.prime', 'pai1.age', 'pai1p.age', 'pai1.agep', 'pai1p.agep',
               'pai1.il6', 'pai1p.il6', 'pai1.il6p', 'pai1p.il6p',
               's100b.log10', 's100b.prime', 's100b.age', 's100bp.age', 's100b.agep', 's100bp.agep',
               's100b.il6', 's100bp.il6', 's100b.il6p', 's100bp.il6p',
               'uchl.log10', 'uchl.prime', 'uchl.age', 'uchlp.age', 'uchl.agep', 'uchlp.agep',
               'uchl.il6', 'uchlp.il6', 'uchl.il6p', 'uchlp.il6p',
               'age.div10', 'age.prime', 'il6.log10', 'il6.prime', 'charlson.score',
               'iqcode.score.e', 'stroke.risk', 'edu.div10', 'disabled.e', 'adl.e', #'faq.e',
               'apache.aps', 'mean.modsofa.icu', 'cvsofa.day1', 'sevsepsis.day1',
               'icudays.sevseptic.s', 'del.s.imp', 'coma.s.imp',
               'rbans.global.score.3', 'rbans.global.score.12',
               'trail.b.tscore.3', 'trail.b.tscore.12',
               'adl.totscore.3', 'adl.totscore.12',
               'faq.rdscore.3', 'faq.rdscore.12')

mice.del <- mice(data = endo.data[,mice.vars], m = nimp, seed = 56)
mice.3 <- mice(data = endo.data[endo.data$fu.cohort.3, mice.vars], m = nimp, seed = 56)
mice.12 <- mice(data = endo.data[endo.data$fu.cohort.12, mice.vars], m = nimp, seed = 56)

## -- Create aregImpute objects to use for cognitive outcomes (quicker than making -----------------
## -- already-written functions play nicely with mice objects) -------------------------------------
areg.form <- as.formula("~ age.div10 + charlson.score + I(edu.div10) + I(iqcode.score.e) +
                           stroke.risk + mean.modsofa.icu + icudays.sevseptic.s + del.s.imp +
                           coma.s.imp + il6.log10 + bdnf.log10 + esel.log10 + pai1.log10 +
                           s100b.log10 + uchl.log10 + rbans.global.score.3 + rbans.global.score.12 +
                           trail.b.tscore.3 + trail.b.tscore.12")

set.seed(165)
areg.3 <- aregImpute(areg.form, n.impute = 10, nk = 3, data = subset(endo.data, fu.cohort.3))
set.seed(65)
areg.12 <- aregImpute(areg.form, n.impute = 10, nk = 0, data = subset(endo.data, fu.cohort.12))

## -- Create design matrices for NB models ---------------------------------------------------------
## Default covariate values: 0 (reference level) for factors, median for numeric
covar.adjust <- c('charlson.score', 'iqcode.score.e', 'edu.div10', 'disabled.e', 'stroke.risk',
                  'apache.aps', 'cvsofa.day1', 'sevsepsis.day1', 'mean.modsofa.icu', 'del.s.imp',
                  'coma.s.imp', 'age.div10', 'il6.log10', 'il6.prime')
default.adj.vals <- lapply(covar.adjust,
                           FUN = function(x){
                             if(is.factor(endo.data[,x]) | is.logical(endo.data[,x])){
                               0
                             } else{
                               median(endo.data[,x], na.rm = TRUE)
                             }
                           })
names(default.adj.vals) <- covar.adjust

## Get values to adjust interaction values to: 25th, 50th, 75th, 90th percentiles
adjust.pctiles <- c(0.25, 0.5, 0.75, 0.9)
age.intvals <- as.numeric(quantile(endo.data[,'age.div10'], probs = adjust.pctiles, na.rm = TRUE))
names(age.intvals) <- rep('age', length(age.intvals))
il6.intvals <- as.numeric(quantile(endo.data[,'il6.log10'], probs = adjust.pctiles, na.rm = TRUE))
names(il6.intvals) <- rep('il6', length(il6.intvals))
il6p.intvals <- as.numeric(rcspline.eval(il6.intvals,
                                         knots = rcspline.eval(endo.data[,'il6.log10'],
                                                               nk = 3, knots.only = TRUE)))
names(il6p.intvals) <- rep('il6p', length(il6p.intvals))

## Data frame matching short and full versions of markers and possibly interacting variables
var.key <- data.frame(intterm = c('marker', 'markerp', 'age', 'il6', 'il6p'),
                      intvar = c('marker.log10', 'marker.prime', 'age.div10',
                                 'il6.log10', 'il6.prime'))

## -- Function to create a *single* design matrix (for a single panel) -----------------------------
create.designmat <- function(modvars,                    ## character vector of variable names
                             marker = c('bdnf', 'esel', 'pai1', 's100b', 'uchl'),
                             xpctlimits = c(0.05, 0.95), ## Plotting range in %iles
                             dataset = endo.data,        ## data set to use
                             cohort.var = NULL,          ## which cohort to restrict data set to
                             intvals = NULL){            ## named vector with value(s) to set
                                                         ##  interacting variable to (either age or
                                                         ##  il6, possibly il6p)

  marker.var <- paste0(marker, '.log10')

  ## Get unique values of biomarker, and corresponding nonlinear terms if needed
  if(!is.null(cohort.var)){
    usedata <- dataset[dataset[,cohort.var],]
  } else{
    usedata <- dataset
  }
  marker.vals <- sort(unique(usedata[, marker.var]))
  marker.lims <- quantile(marker.vals, probs = xpctlimits, na.rm = TRUE)
  marker.vals.trim <- marker.vals[marker.vals >= marker.lims[1] & marker.vals <= marker.lims[2]]

  if(paste0(marker, '.prime') %in% modvars){
    marker.knots <- rcspline.eval(marker.vals, nk = 3, knots.only = TRUE)
    markerp.vals <- rcspline.eval(marker.vals.trim, knots = marker.knots)
  }

  ## How many rows will be in resulting matrix? (number of biomarker values plotted)
  matrows <- length(marker.vals.trim)

  ## Which model terms only involve single variables vs. interactions?
  singlevar.cols <- modvars[modvars %in% names(default.adj.vals) |
                              modvars %in% paste0(marker, c('.log10', '.prime'))]
  int.cols <- modvars[!(modvars %in% singlevar.cols)]

  ## Create columns with one variable involved first; will use these to create interaction columns
  design.single <- do.call(cbind,
                           lapply(singlevar.cols, FUN = function(v){
                             if(v == marker.var){
                               marker.vals.trim
                             } else if(v == paste0(marker, '.prime')){
                               markerp.vals
                             } else if(!is.null(intvals) &
                                       v %in% subset(var.key, intterm %in% names(intvals))$intvar){
                               rep(as.numeric(intvals[as.character(subset(var.key,
                                                                          intvar == v)$intterm)]),
                                   matrows)
                             } else if(v %in% names(default.adj.vals)){
                               rep(default.adj.vals[[v]], matrows)
                             } else{
                               rep(NA, matrows)
                             }
                           }))
  colnames(design.single) <- singlevar.cols

  ## If interaction terms needed, use single-variable columns to create those;
  ##  combine to get full matrix
  if(length(int.cols) > 0){
    design.int <- do.call(cbind,
                          lapply(int.cols, FUN = function(v){
                            int.terms <- strsplit(v, '.', fixed = TRUE)[[1]]
                            term.cols <-
                              gsub('marker', marker,
                                   var.key$intvar[match(int.terms,
                                                        gsub('marker', marker, var.key$intterm))])
                            design.single[,term.cols[1]] * design.single[,term.cols[2]]
                          }))
    colnames(design.int) <- int.cols
    cbind('(Intercept)' = rep(1, matrows), cbind(design.single, design.int)[,modvars])
  } else{
    cbind('(Intercept)' = rep(1, matrows), design.single[,modvars])
  }
}

## -- Create lists of interacting values in format to be accepted by create.designmat() ------------
ageint.list <- lapply(age.intvals, FUN = function(a){ names(a) <- 'age'; a})
il6int.list <- lapply(1:length(il6.intvals), FUN = function(i){
  tmp <- c(il6.intvals[i], il6p.intvals[i])
  names(tmp) <- c('il6', 'il6p')
  tmp
})

## -- FUNCTIONS FOR NEGATIVE BINOMIAL MODELS (delirium, ADL, FAQ) ----------------------------------

## -- Function to fit negative binomial models, using either mice or complete case -----------------
## -- Tests (in order) 1) nonlinear terms, 2) interaction terms, 3) age and IL-6 interactions, -----
## -- 4) biomarker variables -----------------------------------------------------------------------
## Nonlinear terms must be included manually
fit.nb.models <- function(covars,            ## vector of model covariates;
                                             ##  subs "marker" for (eg) "bdnf"
                          outcome,           ## string; outcome variable
                          impobj = NULL,     ## mice imputation object
                          dataset = NULL,    ## data set to use
                          cohort.var = NULL, ## Indicator variable in dataset for cohort
                                             ##  (eg, func.cohort.3)
                          maxiter = 25,      ## max number of iterations in glm.fit
                          marker = c('bdnf', 'esel', 'pai1', 's100b', 'uchl')){

  if(is.null(impobj) & is.null(dataset)){
    stop('At least one of impobj, dataset must be supplied')
  }
  if(!is.null(impobj) & !is.mids(impobj)){
    stop('impobj must be of class mids')
  }

  ## -- Setup --------------------------------------------------------------------------------------
  ## Create text for fitting model, depending on whether imputation is used
  if(is.null(impobj)){
    modfit.text = "glm.nb(formula = %s, data = usedata, maxit = maxiter)"
  } else{
    modfit.text = "with(impobj, glm.nb(formula = %s, maxit = maxiter))"
  }

  ## Define data set: if no imputation, complete data from initial dataset object;
  ##   otherwise, either full data set or data set with cohort indicator = TRUE
  if(is.null(cohort.var)){
    if(is.null(impobj)){
      usedata <- dataset[rowSums(is.na(dataset[,c(gsub('marker', marker, covars), outcome)])) == 0,]
    } else{
      usedata <- dataset
    }
  } else{
    usedata <- dataset[dataset[,cohort.var],]
  }

  ## Is IL-6 included in model?
  has.il6 <- length(grep('il6', covars)) > 0

  ## Create vectors of terms for all hypothesis tests needed ##
  if(has.il6){
    ## All nonlinear terms
    nl.vars <- c('il6.prime', 'marker.prime', 'markerp.age', 'markerp.il6', 'marker.il6p',
                 'markerp.il6p')

    ## All interaction terms
    int.vars <- c('marker.age', 'markerp.age', 'marker.il6', 'markerp.il6', 'marker.il6p',
                  'markerp.il6p')

    ## Interactions for age, IL-6
    ageint.vars <- c('marker.age', 'markerp.age')
    il6int.vars <- c('marker.il6', 'markerp.il6', 'marker.il6p', 'markerp.il6p')

    ## Overall effect of IL-6, biomarker
    il6.vars <- c('il6.log10', 'il6.prime', il6int.vars)
    marker.vars <- grep('^marker', covars, value = TRUE)
  } else{
    ## All nonlinear terms
    nl.vars <- c('marker.prime', 'markerp.age')

    ## All interaction terms
    int.vars <- c('marker.age', 'markerp.age')

    ## Interactions for age, IL-6
    ageint.vars <- c('marker.age', 'markerp.age')
    il6int.vars <- il6.vars <- NULL

    ## Overall effect of biomarker
    marker.vars <- grep('^marker', covars, value = TRUE)
  }

  ## Initialize values
  need.nonlin <- p.nonlin <- need.int <- p.int <- p.int.age <- p.int.il6 <- p.il6 <- p.marker <-
    marker.ci <- marker.cistr <- il6.ci <- il6.cistr <- NULL

  ## -- Hypothesis testing -------------------------------------------------------------------------
  ## 1: Nonlinear terms
  ## Create formulas
  nl.form.full <- paste(outcome,
                        paste(c(covars[!(covars %in% nl.vars)], nl.vars), collapse = ' + '),
                        sep = ' ~ ')

  nl.form.test <- paste(outcome, paste(covars[!(covars %in% nl.vars)], collapse = ' + '),
                        sep = ' ~ ')

  ## Test
  nl.mod.full <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, nl.form.full))))
  nl.mod.test <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, nl.form.test))))

  if(!is.null(impobj)){
    p.nonlin <- pool.compare(nl.mod.full, nl.mod.test, method = use.method, data = impobj)$pvalue
  } else{
    p.nonlin <- anova(nl.mod.full, nl.mod.test)[2, 'Pr(Chi)']
  }

  need.nonlin <- p.nonlin < pcutoff

  ## If nonlinear terms are not meaningful, remove them from all future model fits
  if(!need.nonlin){
    covars <- covars[!(covars %in% nl.vars)]
    int.vars <- int.vars[!(int.vars %in% nl.vars)]
  }

  ## 2: Interaction terms
  ## Create formulas
  int.form.full <- paste(outcome,
                         paste(c(covars[!(covars %in% int.vars)], int.vars), collapse = ' + '),
                         sep = ' ~ ')

  int.form.test <- paste(outcome, paste(covars[!(covars %in% int.vars)], collapse = ' + '),
                         sep = ' ~ ')

  ## Test
  int.mod.full <-
    eval(parse(text = sprintf(modfit.text, gsub('marker', marker, int.form.full))))
  int.mod.test <-
    eval(parse(text = sprintf(modfit.text, gsub('marker', marker, int.form.test))))

  if(!is.null(impobj)){
    p.int <- pool.compare(int.mod.full, int.mod.test, method = use.method, data = impobj)$pvalue
  } else{
    p.int <- anova(int.mod.full, int.mod.test)[2, 'Pr(Chi)']
  }

  need.int <- p.int < pcutoff

  ## 3: If interactions needed, get p-values for age and IL-6 interactions separately
  if(need.int){
    if(!need.nonlin){
      ageint.vars <- ageint.vars[!(ageint.vars %in% nl.vars)]
      il6int.vars <- il6int.vars[!(il6int.vars %in% nl.vars)]
    }

    ageint.form.full <- paste(outcome,
                              paste(c(covars[!(covars %in% ageint.vars)], ageint.vars),
                                    collapse = ' + '),
                              sep = ' ~ ')

    ageint.form.test <- paste(outcome, paste(covars[!(covars %in% ageint.vars)], collapse = ' + '),
                              sep = ' ~ ')

    ageint.mod.full <- eval(parse(text = sprintf(modfit.text,
                                                 gsub('marker', marker, ageint.form.full))))
    ageint.mod.test <- eval(parse(text = sprintf(modfit.text,
                                                 gsub('marker', marker, ageint.form.test))))

    if(!is.null(impobj)){
      p.int.age <-
        pool.compare(ageint.mod.full, ageint.mod.test, method = use.method, data = impobj)$pvalue
    } else{
      p.int.age <- anova(ageint.mod.full, ageint.mod.test)[2, 'Pr(Chi)']
    }

    if(has.il6){
      il6int.form.full <- paste(outcome,
                                paste(c(covars[!(covars %in% il6int.vars)], il6int.vars),
                                      collapse = ' + '),
                                sep = ' ~ ')

      il6int.form.test <- paste(outcome,
                                paste(covars[!(covars %in% il6int.vars)], collapse = ' + '),
                                sep = ' ~ ')

      il6int.mod.full <- eval(parse(text = sprintf(modfit.text,
                                                   gsub('marker', marker, il6int.form.full))))
      il6int.mod.test <- eval(parse(text = sprintf(modfit.text,
                                                   gsub('marker', marker, il6int.form.test))))

      if(!is.null(impobj)){
        p.int.il6 <-
          pool.compare(il6int.mod.full, il6int.mod.test, method = use.method, data = impobj)$pvalue
      } else{
        p.int.il6 <- anova(il6int.mod.full, il6int.mod.test)[2, 'Pr(Chi)']
      }
    }
  } else{
    ## If interactions not needed, remove them from future model fits
    covars <- covars[!(covars %in% int.vars)]
  }

  ## 4: Get p-value for overall effect of biomarker
  if(!need.nonlin){
    if(!need.int){
      marker.vars <- marker.vars[!(marker.vars %in% int.vars | marker.vars %in% nl.vars)]
    } else{
      marker.vars <- marker.vars[!(marker.vars %in% nl.vars)]
    }
  }

  marker.form.full <- paste(outcome,
                            paste(c(covars[!(covars %in% marker.vars)], marker.vars),
                                  collapse = ' + '),
                            sep = ' ~ ')

  marker.form.test <- paste(outcome, paste(covars[!(covars %in% marker.vars)], collapse = ' + '),
                            sep = ' ~ ')

  marker.mod.full <- eval(parse(text = sprintf(modfit.text,
                                               gsub('marker', marker, marker.form.full))))
  marker.mod.test <- eval(parse(text = sprintf(modfit.text,
                                               gsub('marker', marker, marker.form.test))))

  if(!is.null(impobj)){
    p.marker <-
      pool.compare(marker.mod.full, marker.mod.test, method = use.method, data = impobj)$pvalue
  } else{
    p.marker <- anova(marker.mod.full, marker.mod.test)[2, 'Pr(Chi)']
  }

  ## 4b: Get p-value for overall effect of IL-6, if included
  if(has.il6){
    if(!need.nonlin){
      if(!need.int){
        il6.vars <- il6.vars[!(il6.vars %in% int.vars | il6.vars %in% nl.vars)]
      } else{
        il6.vars <- il6.vars[!(il6.vars %in% nl.vars)]
      }
    }

    il6.form.full <- paste(outcome,
                           paste(c(covars[!(covars %in% il6.vars)], il6.vars), collapse = ' + '),
                           sep = ' ~ ')

    il6.form.test <- paste(outcome, paste(covars[!(covars %in% il6.vars)], collapse = ' + '),
                           sep = ' ~ ')

    il6.mod.full <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, il6.form.full))))
    il6.mod.test <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, il6.form.test))))

    if(!is.null(impobj)){
      p.il6 <-
        pool.compare(il6.mod.full, il6.mod.test, method = use.method, data = impobj)$pvalue
    } else{
      p.il6 <- anova(il6.mod.full, il6.mod.test)[2, 'Pr(Chi)']
    }
  }

  ## 5: Get final model object
  final.form <- paste(outcome, paste(covars, collapse = ' + '), sep = ' ~ ')
  final.mod <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, final.form))))

  ## 6: Get IRR/CI for 75th vs 25th percentile for final model
  if(!is.null(impobj)){
    marker.ci <- calc.ratioci.endobbb(marker = marker,
                                      modcoefs = pool(final.mod)$qbar,
                                      modvcov = pool(final.mod)$t)
  } else{
    marker.ci <- calc.ratioci.endobbb(marker = marker,
                                      modcoefs = coef(final.mod),
                                      modvcov = vcov(final.mod))
  }
  marker.cistr <- paste0(rndformat(marker.ci['pointest']), ' (',
                         rndformat(marker.ci['lcl']), ', ',
                         rndformat(marker.ci['ucl']), ')')

  if(has.il6){
    if(!is.null(impobj)){
      il6.ci <- calc.ratioci.endobbb(irr.marker = FALSE,
                                     marker = marker,
                                     modcoefs = pool(final.mod)$qbar,
                                     modvcov = pool(final.mod)$t)
    } else{
      il6.ci <- calc.ratioci.endobbb(irr.marker = FALSE,
                                     marker = marker,
                                     modcoefs = coef(final.mod),
                                     modvcov = vcov(final.mod))
    }
    il6.cistr <- paste0(rndformat(il6.ci['pointest']), ' (',
                        rndformat(il6.ci['lcl']), ', ',
                        rndformat(il6.ci['ucl']), ')')
  }

  ## 7: Get N for model fit (nrow(data used for impobj))
  model.n <- nrow(impobj$data)

  return(list('marker' = paste0(marker, '.log10'),
              'final.mod' = final.mod,
              'final.vars' = gsub('marker', marker, covars),
              'marker.ci' = marker.ci,
              'marker.cistr' = marker.cistr,
              'il6.ci' = il6.ci,
              'il6.cistr' = il6.cistr,
              'p.nonlin' = p.nonlin,
              'p.int' = p.int,
              'p.int.age' = p.int.age,
              'p.int.il6' = p.int.il6,
              'p.marker' = p.marker,
              'p.il6' = p.il6,
              'model.n' = model.n))
}

## -- Create design matrices and data frames of results for each model -----------------------------
## -- Each model gets a list of data frames: If no interactions are present, one data frame with
## -- constant values for age (and IL-6, if applicable); if interactions are present, one data frame
## -- each for age and IL-6 (if applicable), with values at each specified value of interacting
## -- variable
nb.designmat.list <- function(nbobj, ## result of fit.nb.models()
                              marker = c('bdnf', 'esel', 'pai1', 's100b', 'uchl')){
  ## If interactions are present in final model, create one data frame for age,
  ##  one for IL-6 if applicable
  if(nbobj$p.int < pcutoff){
    age.df <- do.call(rbind,
                      lapply(ageint.list, FUN = function(a){
                        create.designmat(nbobj$final.vars, marker = marker, intvals = a)
                      }))

    if(!is.null(nbobj$p.int.il6)){
      il6.df <- do.call(rbind,
                        lapply(il6int.list, FUN = function(i){
                          create.designmat(nbobj$final.vars, marker = marker, intvals = i)
                        }))
      list('age' = age.df, 'il6' = il6.df)
    } else{
      list('age' = age.df)
    }
  ## if no interactions, create a single data frame with only marker varying
  } else{
    list('all' = create.designmat(nbobj$final.vars, marker = marker))
  }
}

## -- Function to, for each row in design matrix, calculate predicted value & SE from negbin model
calc.nbresults <- function(nbobj,          ## negbin model object (from glm.nb())
                           designmat,      ## matrix of covariate values; ncols = coefs in nbobj
                           xvar,           ## character string: name of variable to put on X axis
                           intvar = NULL){ ## character string: name of interacting variable

  is.mice <- 'mira' %in% class(nbobj)

  ## Model object must be fit using glm.nb()
  if(!('negbin' %in% class(nbobj) | (is.mice & 'negbin' %in% class(nbobj$analyses[[1]])))){
    stop('nbobj must be of class negbin from glm.nb(), or a mice object using glm.nb to fit')
  }

  ## Get coefficients and vcov matrix, depending on whether object is imputed via mice or not
  if(is.mice){
    nb.coefs <- pool(nbobj)$qbar
    nb.vcov <- pool(nbobj)$t
  } else{
    nb.coefs <- coef(nbobj)
    nb.vcov <- vcov(nbobj)
  }
  coefnames <- names(nb.coefs)

  if(ncol(designmat) != length(nb.coefs)){
    stop("Number of columns in design matrix does not match number of coefficients in nbobj")
  }

  if(xvar %nin% colnames(designmat)){
    stop("X axis variable name not in column names of design matrix")
  }

  ## Calculate linear predictors and their SEs
  lp <- apply(designmat, MARGIN = 1, FUN = function(x){ sum(nb.coefs * as.numeric(x)) })
  lp.se <- apply(designmat, MARGIN = 1, FUN = function(x){ sqrt(t(x) %*% nb.vcov %*% x) })

  ## Calculate LCL, UCLs for linear predictors
  lp.lcl <- lp - qnorm(0.975)*lp.se
  lp.ucl <- lp + qnorm(0.975)*lp.se

  ## Calculate predicted counts, CIs as exp(quantities)
  count.pe <- exp(lp)
  count.lcl <- exp(lp.lcl)
  count.ucl <- exp(lp.ucl)

  ## Bind all results into data frame for plotting
  xvalue <- designmat[,xvar]
  if(!is.null(intvar)){
    intvalue <- designmat[,intvar]
    return(as.data.frame(cbind(xvalue, intvalue, lp, lp.se, count.pe, count.lcl, count.ucl)))
  } else{
    return(as.data.frame(cbind(xvalue, lp, lp.se, count.pe, count.lcl, count.ucl)))
  }
}

## -- Function to plot NB model results given a data frame -----------------------------------------
plot.nb.results <- function(results.df,   ## data frame of results (eg from calc.nbresults())
                            xvar,         ## string; variable on X axis
                            intstring = NULL, ## string to describe interacting variable
                            xstring, ystring,
                            free.scales = c('neither', 'x', 'y', 'both')){

  free.scales <- match.arg(free.scales)

  ## Do results include an interacting term?
  has.int <- 'intvalue' %in% names(results.df)

  if(has.int){
    results.df$intvalue.f <-
      with(results.df, factor(paste(intstring, '=', rndformat(intvalue, 2))))
  }

  nb.plot <- ggplot(aes(x = xvalue, y = count.pe), data = results.df) +
    geom_ribbon(aes(ymin = count.lcl, ymax = count.ucl), alpha = 0.3, fill = 'navy') +
    geom_line(colour = 'navy') +
    xlab(sprintf('Log10(%s)', xstring)) +
    ylab(paste('Adjusted', ystring)) +
    theme_bw() +
    theme(axis.title.x = element_text(vjust = 0, size = 9), #face = 'bold', vjust = 0),
          axis.title.y = element_text(size = 9),
          axis.text = element_text(size = 7),
          strip.text = element_text(face = 'bold'))

  if(!has.int){
    return(nb.plot)
  } else{
    if(free.scales == 'neither'){
      return(nb.plot + facet_wrap(~ intvalue.f, nrow = 1))
    } else if(free.scales == 'x'){
      return(nb.plot + facet_wrap(~ intvalue.f, scales = 'free_x'))
    } else if(free.scales == 'y'){
      return(nb.plot + facet_wrap(~ intvalue.f, scales = 'free_y'))
    } else{
      return(nb.plot + facet_wrap(~ intvalue.f, scales = 'free'))
    }
  }
}

## -- Create graphics for regular NB models --------------------------------------------------------
nb.figures <- function(nbobj, marker, xstring, ystring){
  xvar <- paste0(marker, '.log10')

  ## Create data frames of results to plot
  marker.design <- nb.designmat.list(nbobj, marker)

  if(nbobj$p.int > pcutoff){
    marker.results <- calc.nbresults(nbobj$final.mod, designmat = marker.design$all, xvar = xvar)

    return(list('fig' = list(plot.nb.results(results.df = marker.results,
                                             xvar = xvar,
                                             xstring = xstring,
                                             ystring = ystring)),
                'height' =  onepanel.height,
                'layoutmat' = matrix(1, ncol = 1)))
  } else{
    if(!is.null(nbobj$p.int.age)){
      marker.results.age <- calc.nbresults(nbobj$final.mod,
                                           designmat = marker.design$age,
                                           xvar = xvar,
                                           intvar = 'age.div10')

      fig1 <- plot.nb.results(results.df = marker.results.age,
                              xvar = xvar,
                              intstring = 'Age / 10',
                              xstring = xstring,
                              ystring = ystring)
    }

    if(!is.null(nbobj$p.int.il6)){
      marker.results.il6 <- calc.nbresults(nbobj$final.mod,
                                           designmat = marker.design$il6,
                                           xvar = xvar,
                                           intvar = 'il6.log10')

      fig2 <- plot.nb.results(results.df = marker.results.il6,
                              xvar = xvar,
                              intstring = 'Log10(IL-6)',
                              xstring = xstring,
                              ystring = ystring)
    }

    if(!is.null(nbobj$p.int.age) & !is.null(nbobj$p.int.il6)){
      fig.list <- list(fig1, fig2)
      fig.height <- twopanel.height
      fig.layout <- matrix(1:2, ncol = 1)
    } else{
      fig.height <- onepanel.height
      fig.layout <- matrix(1, ncol = 1)

      if(!is.null(nbobj$p.int.age)){
        fig.list <- list(fig1)
      } else{
        fig.list <- list(fig2)
      }
    }

    return(list('fig' = fig.list,
                'height' = fig.height,
                'layoutmat' = fig.layout))
  }
}


## -- FUNCTIONS FOR LINEAR MODELS (RBANS, Trails B) ------------------------------------------------

## -- Function to fit linear regression models, using either mice or complete case -----------------
## -- Tests (in order) 1) nonlinear terms, 2) interaction terms, 3) age and IL-6 interactions, -----
## -- 4) biomarker variables -----------------------------------------------------------------------
fit.ols.models <- function(formula.right,     ## original model covariates
                           outcome,           ## string; outcome variable
                           impobj = NULL,     ## mice or aregImpute imputation object
                           dataset = NULL,    ## data set to use
                           cohort.var = NULL, ## Indicator variable in dataset for cohort
                                              ##  (eg, func.cohort.3)
                           marker = c('bdnf', 'esel', 'pai1', 's100b', 'uchl')){

  if(is.null(impobj) & is.null(dataset)){
    stop('At least one of impobj, dataset must be supplied')
  }
  if(!is.null(impobj) & !(is.mids(impobj) | class(impobj) == 'aregImpute')){
    stop('impobj must be of class mids or aregImpute')
  }

  ## -- Setup --------------------------------------------------------------------------------------
  ## Create text for fitting model, depending on whether imputation is used
  if(is.null(impobj)){
    modfit.text <- "ols(formula = %s, data = usedata)"
  } else if(is.mids(impobj)){
    modfit.text <- "with(impobj, ols(formula = %s))"
  } else{
    modfit.text <- "fit.mult.impute(formula = %s, fitter = ols, xtrans = impobj, data = usedata)"
  }

  ## Is impobj a) defined and b) of class mids?
  imp.mice <- !is.null(impobj) & is.mids(impobj)

  ## Define data set: if no imputation, complete data from initial dataset object;
  ##   otherwise, either full data set or data set with cohort indicator = TRUE
  if(is.null(cohort.var)){
    if(is.null(impobj)){
      usedata <- dataset[rowSums(is.na(dataset[,c(gsub('marker', marker, covars), outcome)])) == 0,]
    } else{
      usedata <- dataset
    }
  } else{
    usedata <- dataset[dataset[,cohort.var],]
  }

  ## Is IL-6 included in model?
  has.il6 <- length(grep('il6', formula.right)) > 0

  ## Initialize values
  need.nonlin <- p.nonlin <- need.int <- p.int <- p.int.age <- p.int.il6 <- p.il6 <- p.marker <-
    marker.ci <- marker.cistr <- il6.ci <- il6.cistr <- NULL

  ## -- Hypothesis testing -------------------------------------------------------------------------
  ## 1: Nonlinear terms
  nl.form <- paste(outcome, formula.right, sep = ' ~ ')
  nl.mod <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, nl.form))))

  if('TOTAL NONLINEAR' %in% rownames(anova(nl.mod))){
    p.nonlin <- anova(nl.mod)['TOTAL NONLINEAR', 'P']
  }

  need.nonlin <- p.nonlin < pcutoff

  ## If nonlinear terms are not meaningful, remove them from all future model fits
  if(!need.nonlin){
    formula.right <- gsub('rcs\\(', '', gsub(', *[0-9]+\\)', '', formula.right))
  }

  ## 2: Interaction terms
  int.form <- paste(outcome, formula.right, sep = ' ~ ')
  int.mod <- eval(parse(text = sprintf(modfit.text, gsub('marker', marker, int.form))))

  vars.involved.int <- strsplit(gsub('  (Factor+Higher Order Factors)', '',
                                     rownames(anova(int.mod)),
                                     fixed = TRUE),
                                ' *[*] *')
  ageint.row <- grep(TRUE,
                     unlist(lapply(vars.involved.int,
                                   FUN = function(i){
                                     length(i) > 1 & length(grep('age\\.div10', i)) > 0 })))

  if('TOTAL INTERACTION' %in% rownames(anova(int.mod))){
    p.int <- anova(int.mod)['TOTAL INTERACTION', 'P']
  } else{
    p.int <- anova(int.mod)[ageint.row, 'P']
  }

  need.int <- p.int < pcutoff

  ## 3: If interactions needed, get p-values for age and IL-6 interactions separately
  if(need.int){
    p.int.age <- anova(int.mod)[ageint.row, 'P']
    if(has.il6){
      il6int.row <- grep(TRUE,
                         unlist(lapply(vars.involved.int,
                                       FUN = function(i){
                                         length(i) > 1 & length(grep('il6\\.log10', i)) > 0 })))
      p.int.il6 <- anova(int.mod)[il6int.row, 'P']
    }
  } else{
    ## If interactions not needed, remove them from formula righthand side
    formula.right <- gsub('*', '+', formula.right, fixed = TRUE)
  }

  ## 4: Get p-value for overall effect of biomarker
  final.formula <- gsub('marker', marker, paste(outcome, formula.right, sep = ' ~ '))
  final.mod <- eval(parse(text = sprintf(modfit.text, final.formula)))

  vars.involved.final <- strsplit(gsub('  (Factor+Higher Order Factors)', '',
                                       rownames(anova(final.mod)),
                                       fixed = TRUE),
                                  ' *[*] *')
  marker.row <- grep(TRUE,
                     unlist(lapply(vars.involved.final,
                                   FUN = function(i){
                                     length(i) == 1 &
                                       length(grep(paste0('^', marker, '\\.log10'), i)) > 0 })))
  p.marker <- anova(final.mod)[marker.row, 'P']

  ## 4b: Get p-value for overall effect of IL-6, if included
  if(has.il6){
    il6.row <- grep(TRUE,
                     unlist(lapply(vars.involved.final,
                                   FUN = function(i){
                                     length(i) == 1 & length(grep('^il6\\.log10', i)) > 0 })))
    p.il6 <- anova(final.mod)[il6.row, 'P']
  }

  dd <<- datadist(endo.data); options(datadist = 'dd')

  ## 5: Get IRR/CI for 75th vs 25th percentile for final model
  marker.ci <- summary(final.mod)[paste0(marker, '.log10'), c('Effect', 'Lower 0.95', 'Upper 0.95')]
  names(marker.ci) <- c('pointest', 'lcl', 'ucl')
  marker.cistr <- paste0(rndformat(marker.ci['pointest']), ' (',
                         rndformat(marker.ci['lcl']), ', ',
                         rndformat(marker.ci['ucl']), ')')

  if(has.il6){
    il6.ci <- summary(final.mod)['il6.log10', c('Effect', 'Lower 0.95', 'Upper 0.95')]
    names(il6.ci) <- c('pointest', 'lcl', 'ucl')
    il6.cistr <- paste0(rndformat(il6.ci['pointest']), ' (',
                        rndformat(il6.ci['lcl']), ', ',
                        rndformat(il6.ci['ucl']), ')')
  }

  ## 6: Get N for model fit (nrow(data used for impobj), or aregImpute$n)
  model.n <- NULL
  if(inherits(impobj, 'mira')){
    model.n <- nrow(impobj$data)
  } else if(inherits(impobj, 'aregImpute')){
    model.n <- impobj$n
  }

  return(list('marker' = paste0(marker, '.log10'),
              'final.mod' = final.mod,
              'marker.ci' = marker.ci,
              'marker.cistr' = marker.cistr,
              'il6.ci' = il6.ci,
              'il6.cistr' = il6.cistr,
              'p.nonlin' = p.nonlin,
              'p.int' = p.int,
              'p.int.age' = p.int.age,
              'p.int.il6' = p.int.il6,
              'p.marker' = p.marker,
              'p.il6' = p.il6,
              'model.n' = model.n))
}


# ## -- Check manually -------------------------------------------------------------------------------
# ## Checked with BDNF, PAI-1
#
# pai1.form <- "rcs(charlson.score, 3) + rcs(edu, 3) + iqcode.score.e + rcs(stroke.risk, 3) + rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(age.div10, 3) * rcs(marker.log10, 3)"
#
# pai1.test <- fit.ols.models(formula.right = pai1.form, outcome = 'rbans.global.score.3',
#                             impobj = areg.cog.3, dataset = endo.data, cohort.var = 'cog.cohort.3',
#                             marker = 'pai1')
#
# pai1.nl <- fit.mult.impute(formula = rbans.global.score.3 ~ rcs(charlson.score, 3) + rcs(edu, 3) +
#                              iqcode.score.e + rcs(stroke.risk, 3) + rcs(mean.modsofa.icu, 3) +
#                              rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) +
#                              rcs(age.div10, 3) * rcs(pai1.log10, 3),
#                            fitter = ols, xtrans = areg.cog.3,
#                            data = endo.data[endo.data$cog.cohort.3,])
# anova(pai1.nl); pai1.test$p.nonlin; pai1.test$p.int
#
# pai1.noint <- fit.mult.impute(formula = rbans.global.score.3 ~ rcs(charlson.score, 3) +
#                                 rcs(edu, 3) + iqcode.score.e + rcs(stroke.risk, 3) +
#                                 rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) +
#                                 rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(age.div10, 3) +
#                                 rcs(pai1.log10, 3),
#                               fitter = ols, xtrans = areg.cog.3,
#                               data = endo.data[endo.data$cog.cohort.3,])
# anova(pai1.noint); pai1.test$p.marker
#
# summary(pai1.noint); pai1.test$marker.cistr
#
# pai1.il6.form <- "rcs(charlson.score, 3) + rcs(edu, 3) + iqcode.score.e + rcs(stroke.risk, 3) + rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(age.div10, 3) * rcs(marker.log10, 3) + rcs(il6.log10, 3) * rcs(marker.log10, 3)"
#
# pai1.il6.test <- fit.ols.models(formula.right = pai1.il6.form, outcome = 'rbans.global.score.3',
#                                 impobj = areg.cog.3, dataset = endo.data,
#                                 cohort.var = 'cog.cohort.3', marker = 'pai1')
#
# pai1.il6.nl <- fit.mult.impute(rbans.global.score.3 ~ rcs(charlson.score, 3) + rcs(edu, 3) +
#                                  iqcode.score.e + rcs(stroke.risk, 3) + rcs(mean.modsofa.icu, 3) +
#                                  rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) +
#                                  rcs(coma.s.imp, 3) + rcs(age.div10, 3) * rcs(pai1.log10, 3) +
#                                  rcs(il6.log10, 3) * rcs(pai1.log10, 3),
#                                fitter = ols, xtrans = areg.cog.3,
#                                data = endo.data[endo.data$cog.cohort.3,])
# anova(pai1.il6.nl); pai1.il6.test$p.nonlin
#
# pai1.il6.lin <- fit.mult.impute(rbans.global.score.3 ~ charlson.score + edu + iqcode.score.e +
#                                   stroke.risk + mean.modsofa.icu + icudays.sevseptic.s + del.s.imp +
#                                   coma.s.imp + age.div10 * pai1.log10 + il6.log10 * pai1.log10,
#                                fitter = ols, xtrans = areg.cog.3,
#                                data = endo.data[endo.data$cog.cohort.3,])
# anova(pai1.il6.lin); pai1.il6.test$p.int; pai1.il6.test$p.marker; pai1.il6.test$p.il6

calc.ols.results <- function(olsobj,          ## string, name of ols() result
                             xvar,            ## string, variable for X axis
                             intvars = NULL,  ## string, interacting variable
                             intvals = NULL){ ## list of numeric vectors, values of intvars
  if(!is.null(intvars) & (is.null(intvals) | length(intvars) != length(intvals))){
    stop("Interacting variable(s) specified, but length of interacting values does not match number of interacting variables")
  } else{
    if(is.null(intvars)){
      preddata <- list(eval(parse(text = sprintf('as.data.frame(Predict(%s, %s = NA))',
                                                 olsobj, xvar))))
    } else{
      preddata <- lapply(1:length(intvars), FUN = function(ivar){
        eval(parse(text = sprintf('as.data.frame(Predict(%s, %s = NA, %s = c(%s)))',
                                  olsobj, xvar, intvars[ivar],
                                  paste(intvals[ivar], collapse = ', '))))
      })
    }
    return(preddata)
  }
}

## -- Create plot using one data set of predicted values -------------------------------------------
plot.ols.results <- function(ols.preddata,     ## data frame of predicted values
                             ols.list,         ## result of fit.reg.models()
                             xvar,             ## string; variable on X axis
                             intvar = NULL,    ## string; variable to facet
                             intstring = NULL, ## string; text to describe faceting variable
                             xstring,          ## string; description of X variable (Log10(xstring))
                             ystring){         ## string; description of outcome (Adjusted ystring)

  if(!is.null(intvar)){
    ols.preddata$intvar.f <-
      factor(paste(intstring, rndformat(ols.preddata[,intvar], 2), sep = ' = '))
  }

  fig <- ggplot(aes_string(x = xvar, y = 'yhat'), data = ols.preddata) +
    geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = 'navy') +
    geom_line(colour = 'navy') +
    theme_bw() +
    theme(axis.title.x = element_text(size = 9, vjust = 0),
          axis.title.y = element_text(size = 9),
          axis.text = element_text(size = 7)) +
    xlab(paste0('Log10(', xstring, ')')) +
    ylab(paste0('Adjusted ', ystring))

  if(is.null(intvar)){
  } else{
    fig <- fig + facet_wrap(~ intvar.f, nrow = 1) +
      theme(strip.text = element_text(face = 'bold'))
  }

  fig
}

## -- Create graphics for linear models ------------------------------------------------------------
ols.figures <- function(olslist,
                        xvar,
                        xstring,
                        ystring){

  olslist.got <- get(olslist)

  if(olslist.got$p.int > 0.20){
    preddata <- calc.ols.results(olsobj = paste0(olslist, '$final.mod'), xvar = xvar)
    return(list('fig' = list(plot.ols.results(ols.preddata = preddata[[1]],
                                              ols.list = olslist.got,
                                              xvar = xvar,
                                              xstring = xstring,
                                              ystring = ystring)),
                'height' =  onepanel.height,
                'layoutmat' = matrix(1, ncol = 1)))
  } else{
    if(!is.null(olslist.got$p.int.age)){
      preddata.age <- calc.ols.results(olsobj = paste0(olslist, '$final.mod'),
                                       xvar = xvar,
                                       intvars = 'age.div10',
                                       intvals = list(intvals.age / 10))
      fig1 <- plot.ols.results(ols.preddata = preddata.age[[1]],
                               ols.list = olslist.got,
                               xvar = xvar,
                               intvar = 'age.div10',
                               intstring = 'Age / 10',
                               xstring = xstring, ystring = ystring)
    }
    if(!is.null(olslist.got$p.int.il6)){
      preddata.il6 <- calc.ols.results(olsobj = paste0(olslist, '$final.mod'),
                                       xvar = xvar,
                                       intvars = 'il6.log10',
                                       intvals = list(intvals.il6))
      fig2 <- plot.ols.results(ols.preddata = preddata.il6[[1]],
                               ols.list = olslist.got,
                               xvar = xvar,
                               intvar = 'il6.log10',
                               intstring = 'Log10(IL-6)',
                               xstring = xstring, ystring = ystring)
    }

    if(!is.null(olslist.got$p.int.age) & !is.null(olslist.got$p.int.il6)){
      fig.list <- list(fig1, fig2)
      fig.height <- twopanel.height
      fig.layout <- matrix(1:2, ncol = 1)
    } else{
      fig.height <- onepanel.height
      fig.layout <- matrix(1, ncol = 1)

      if(!is.null(olslist.got$p.int.age)){
        fig.list <- list(fig1)
      } else{
        fig.list <- list(fig2)
      }
    }

    return(list('fig' = fig.list,
                'height' = fig.height,
                'layoutmat' = fig.layout))

  }
}



## -- Function to create data frame of relevant p-values from fit.reg.models() result --------------
create.pval.table <- function(fit.reg.obj, marker.string){
  ## Determine which type of CI we're using (IRR for NB, ZINB; difference for linear)
  ci.type <- NULL
  if(is.mira(fit.reg.obj$final.mod)){
    if('negbin' %in% class(fit.reg.obj$final.mod$analyses[[1]]) |
       'zeroinfl' %in% class(fit.reg.obj$final.mod$analyses[[1]])){
      ci.type <- 'IRR'
    } else if('ols' %in% class(fit.reg.obj$final.mod$analyses[[1]])){
      ci.type <- 'Diff.'
    }
  } else{
    if('negbin' %in% class(fit.reg.obj$final.mod) | 'zeroinfl' %in% class(fit.reg.obj$final.mod)){
      ci.type <- 'IRR'
    } else if('ols' %in% class(fit.reg.obj$final.mod)){
      ci.type <- 'Diff.'
    }
  }

  ## Get numbers for biomarker and IL-6 comparisons
  marker.comp <- format(round(bio.ratiovals[[fit.reg.obj$marker]], 2), nsmall = 2)
  il6.comp <- format(round(bio.ratiovals[['il6.log10']], 2), nsmall = 2)

  p.order <- c('p.nonlin', 'p.int',
               'marker.sep', 'marker.cistr', 'p.marker', 'il6.sep', 'il6.cistr', 'p.il6',
               'p.int.age', 'p.int.il6')

  p.vec <- unlist(lapply(p.order, FUN = function(usep){
    if(!(usep %in% names(fit.reg.obj))){
      ''
    } else if(is.null(fit.reg.obj[[usep]])){
      '\\emph{Not in final model}'
    } else if(is.numeric(fit.reg.obj[[usep]])){
      formatp(fit.reg.obj[[usep]])
    } else{
      fit.reg.obj[[usep]]
    }
  }))

  ## Add N
  p.vec <- c(fit.reg.obj$model.n, p.vec)

  p.df <- data.frame(pval = p.vec)
  rownames(p.df) <- c('Patients included',
                      'Global nonlinearity',
                      'Global interactions',
                      paste0('Log10(', marker.string, ')'),
                      paste0('~~~', ci.type, ' (95\\% CI), ',
                             marker.comp[2], ' vs. ', marker.comp[1]),
                      paste0('~~~Overall P for marker'),
                      'Log10(IL-6)',
                      paste0('~~~', ci.type, ' (95\\% CI), ', il6.comp[2], ' vs. ', il6.comp[1]),
                      paste0('~~~Overall P for IL-6'),
                      'Age interaction',
                      'Log10(IL-6) interaction')
  p.df
}

latex.pval.table <- function(p.df, caption = '', use.colheads = c('P-Value')){
  latex(p.df, file = '',
        title = '',
        where = '!h',
        size = 'small',
        caption = caption,
        colheads = use.colheads,
        col.just = rep('r', ncol(p.df)),
        rgroup = c('Model fitting', 'Final model', 'Interactions'),
        n.rgroup = c(3, 6, 2))
}




## -- FUNCTIONS NO LONGER IN USE, SAVED FOR REFERENCE ----------------------------------------------
# ## -- Need to calculate predicted values for NB models by hand -------------------------------------
# ## Function to get median from endo.data$variable
# get.med <- function(varname){ median(endo.data[,varname], na.rm = TRUE) }
#
# ## Function to calculate spline term for median of a variable in endo.data
# get.med.spline <- function(varname){
#   startval <- median(endo.data[,varname], na.rm = TRUE)
#   useknots <- rcspline.eval(endo.data[,varname], nk = 3, knots.only = TRUE)
#   calc.spline(startval, k1 = useknots[1], k2 = useknots[2], k3 = useknots[3])
# }
#
# ## Function to get 2.5th, 97.5th percentiles
# get.ci <- function(x){ quantile(x, probs = c(0.025, 0.975), na.rm = TRUE) }
#
# ## -- Function to update zero-inflated formulas given a count, zero portion and a regex ------------
# create.zeroinfl.form <- function(count.form, zero.form, regex.sub){
#   paste(paste(count.form[grep(regex.sub, count.form, invert = TRUE)], collapse = ' + '),
#         paste(zero.form[grep(regex.sub, zero.form, invert = TRUE)], collapse = ' + '),
#         sep = ' | ')
# }

# ## -- Function to check diagnostics for ols() models -----------------------------------------------
# ols.diagnostics <- function(model.obj.ma, labeltext){
#   par(mfrow = c(1, 2), cex = 0.8, cex.main = 0.9)
#   plot(resid(model.obj.ma) ~ fitted(model.obj.ma),
#        xlab = 'Predicted Value',
#        ylab = paste('Model residual'),
#        main = paste('RP plot,', labeltext),
#        col = 'turquoise4')
#   abline(h = 0)
#   qqnorm(resid(model.obj.ma),
#          datax = TRUE,
#          main = paste('Q-Q of residuals,', labeltext))
# }

## -- Function to create design matrix given a mice model object, X and interacting variables ------
# catvars <- "sevsepsis.day1"
# create.designmat.mice <- function(miceobj,              ## mice model object
#                                   xvar,                 ## string; variable for x axis
#                                   intvar = NULL,        ## string; variable to interact
#                                   intvals = NULL,       ## vector; values to set int. variable to
#                                   dataset = endo.data){ ## data frame to get unique X values from
#
#   ## miceobj must be of class mice
#   if(length(grep('mira', class(miceobj))) == 0){
#     stop('miceobj must be of class mira from mice library')
#   } else if(!is.null(intvar) & length(grep(':', names(miceobj$analyses[[1]]$coefficients))) == 0){
#     stop('Interacting variable is specified, but model does not include interaction terms')
#   } else if(!is.null(intvar) & is.null(intvals)){
#     stop('Interacting variable is specified, but no interacting values are specified')
#   } else{
#
#     ## Get coefficient names. Categorical variables have a number on the end; strip that, "rcs(...)"
#     coefnames <- unlist(lapply(names(miceobj$analyses[[1]]$coefficients),
#                                FUN = function(x){
#                                  tmp1 <- gsub("rcs\\([a-z.,0-9 ]+\\)", "", x)
#                                  tmp2 <- gsub('.$', '', x)
#                                  if(tmp2 %in% catvars){ tmp2 } else{ tmp1 }
#                                }))
#
#     ## Get unique values of variable on X axis
#     xvals <- sort(unique(dataset[,xvar]))
#     xknots <- rcspline.eval(xvals, nk = 3, knots.only = TRUE)
#     xvals <- xvals[xvals >= xknots[1] & xvals <= xknots[3]]
#     if(length(grep(paste0(xvar, "'"), coefnames)) > 0){
#       xvals.spline <- unlist(lapply(xvals,
#                                     FUN = calc.spline,
#                                     k1 = xknots[1], k2 = xknots[2], k3 = xknots[3]))
#     }
#
#     ## Set values for all non-interaction columns
#     coefs.noint <- coefnames[grep(':', coefnames, invert = TRUE)]
#     coefs.int <- coefnames[grep(':', coefnames)]
#
#     predmat.noint <- do.call(cbind,
#                          lapply(coefs.noint, FUN = function(name){
#                            if(name == '(Intercept)'){
#                              rep(1, length(xvals))
#                            } else if(name == xvar){
#                              xvals
#                            } else if(name == paste0(xvar, "'")){
#                              xvals.spline
#                            } else if(name %in% c(intvar, paste0(intvar, "'"))){
#                              rep(NA, length(xvals))
#                            } else if(name %in% catvars){
#                              rep(0, length(xvals))
#                            } else if(length(grep("'", name)) == 0){
#                              get.med(name)
#                            } else{
#                              get.med.spline(gsub('.$', '', name))
#                            }
#                          }))
#     colnames(predmat.noint) <- coefs.noint
#
#     ## If there is an interacting variable, repeat predmat.noint x number of unique values, then
#     ##  fill in NA columns with unique values
#     if(!is.null(intvar)){
#       predmat.noint <- do.call(rbind,
#                                replicate(length(intvals), predmat.noint, simplify = FALSE))
#       predmat.noint[,intvar] <- unlist(lapply(intvals, FUN = function(x){ rep(x, length(xvals)) }))
#
#       ## If interacting variable is nonlinear, determine knots for spline term
#       if(length(grep(paste0(intvar, "'"), coefnames)) > 0){
#         intknots <- rcspline.eval(dataset[,intvar], nk = 3, knots.only = TRUE)
#         intspline <- unlist(lapply(intvals,
#                                    FUN = calc.spline,
#                                    k1 = intknots[1], k2 = intknots[2], k3 = intknots[3]))
#         predmat.noint[,paste0(intvar, "'")] <-
#           unlist(lapply(intspline, FUN = function(x){ rep(x, length(xvals)) }))
#       }
#     }
#
#     if(length(coefs.int) > 0){
#       predmat.int <- do.call(cbind,
#                              lapply(coefs.int, FUN = function(name){
#                                tmp <- strsplit(name, ':')[[1]]
#                                predmat.noint[,tmp[1]] * predmat.noint[,tmp[2]]
#                              }))
#       colnames(predmat.int) <- coefs.int
#       predmat <- cbind(predmat.noint, predmat.int)[,coefnames]
#     } else{
#       predmat <- predmat.noint[,coefnames]
#     }
#   }
#
#   return(predmat)
#
# }

## -- Function to fit zero-inflated, NB, or linear model; ----
## --  determine whether 1) nonlinear and 2) interaction terms are needed, and
## --  return final model object, p-values for nonlinearity and interactions,
## --  and final p for biomarker
# fit.reg.models <- function(use.marker,           ## character string; name of biomarker variable
#                            formula.full,         ## formula for full model formula
#                            modtype = c('nb', 'zeroinfl', 'ols'), ## Model type to use
#                            imp.obj = NULL,       ## aregImpute or mice object, if desired
#                            cohort.var = NULL,    ## T/F indicator pts to include, if imputing
#                            dataset = endo.data){ ## original data set to use
#
#   ## Create text for fitting model, depending on model type and whether imputation is used
#   if(is.null(imp.obj)){
#     if(modtype == 'nb'){
#       modfit.text = "glm.nb(formula = %s, data = usedata)"
#     } else if(modtype == 'zeroinfl'){
#       modfit.text = "zeroinfl(formula = %s, data = usedata, dist = 'negbin')"
#     } else if(modtype == 'ols'){
#       modfit.text = "ols(formula = %s, data = usedata)"
#     }
#   } else{
#     if(modtype == 'nb'){
#       modfit.text = "with(imp.obj, glm.nb(formula = %s))"
#     } else if(modtype == 'zeroinfl'){
#       modfit.text = "with(imp.obj, zeroinfl(formula = %s, dist = 'negbin'))"
#     } else if(modtype == 'ols'){
#       modfit.text = 'fit.mult.impute(formula = %s, fitter = ols, xtrans = imp.obj, data = usedata)'
#     }
#   }
#
#   ## Initialize all p-values
#   p.nonlin <- p.int <- p.marker <- p.il6 <- p.int.age <- p.int.il6 <- adj.int.vals <- NULL
#
#   ## Does full model have nonlinear terms?
#   has.rcs <- length(grep('rcs(', formula.full, fixed = TRUE)) > 0
#
#   ## Does full model include IL-6 terms?
#   has.il6 <- length(grep('il6', formula.full, fixed = TRUE)) > 0
#
#   ## Step 1: Define data set: if no imputation, complete data from initial dataset object;
#   ##         otherwise, either full data set or data set with cohort indicator = TRUE
#   if(is.null(cohort.var)){
#     if(is.null(imp.obj)){
#       ## Get variables in formula.full
#       modvars <- gsub('rcs\\(', '', strsplit(formula.full, ' *[~+] *')[[1]])
#       modvars <- unique(gsub(', [0-9]\\)', '', modvars[grep(':', modvars, invert = TRUE)]))
#       modvars <- gsub('markervar', use.marker, modvars)
#
#       usedata <- dataset[rowSums(is.na(dataset[,modvars])) == 0,]
#     } else{
#       usedata <- dataset
#     }
#   } else{
#     usedata <- dataset[dataset[,cohort.var],]
#   }
#
#   ## Step 2: Fit full model; save formula as "final" formula for now
#   final.formula <- marker.full.formula <- gsub('markervar', use.marker, formula.full)
#   mod.full <- eval(parse(text = sprintf(modfit.text, marker.full.formula)))
#
#   ## Step 3: Test for whether nonlinear terms are needed
#   if(has.rcs){
#     ## 3a. Fit model with all linear terms
#     marker.lin.formula <- gsub(', *[0-9]+\\)', '', gsub('rcs\\(', '', marker.full.formula))
#     mod.lin <- eval(parse(text = sprintf(modfit.text, marker.lin.formula)))
#
#     ## 3b. Calculate p-value for all nonlinear terms
#     p.nonlin <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                        lrpval(mod.full, mod.lin),
#                        lrpval(mod.full, mod.lin, mice.obj = imp.obj))
#   } else{
#     marker.lin.formula <- marker.full.formula
#     mod.lin <- mod.full
#   }
#
#   ## Step 4: Test for interactions, using model with or w/o nonlinear terms, depending on p.nonlin
#   ## 4a. Determine non-interaction model formula based on p-value for nonlinear terms
#   if(is.null(p.nonlin) || p.nonlin > pcutoff){
#     if(modtype == 'zeroinfl'){
#       ## Split twice for zero-inflated: once for count vs. zero portion, once to get each variable
#       form.split <- strsplit(marker.lin.formula, '|', fixed = TRUE)
#       form.split.count <- strsplit(form.split[[1]][1], ' *\\+ *')[[1]]
#       form.split.zero <- strsplit(form.split[[1]][2], ' *\\+ *')[[1]]
#
#       marker.noint.formula <- create.zeroinfl.form(count.form = form.split.count,
#                                                    zero.form = form.split.zero,
#                                                    regex.sub = ':')
#     } else{
#       form.split <- strsplit(marker.lin.formula, ' + ', fixed = TRUE)[[1]]
#       marker.noint.formula <-
#         paste(form.split[grep(':', form.split, invert = TRUE)], collapse = ' + ')
#     }
#
#     ## 4b. Fit model without interaction terms
#     mod.noint <- eval(parse(text = sprintf(modfit.text, marker.noint.formula)))
#
#     ## 4c. Calculate p-value for all interaction terms
#     p.int <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                     lrpval(mod.lin, mod.noint),
#                     lrpval(mod.lin, mod.noint, mice.obj = imp.obj))
#
#     ## 4d. Save final model object
#     if(p.int > pcutoff){
#       mod.final <- mod.noint
#       final.formula <- marker.noint.formula
#     } else{
#       mod.final <- mod.lin
#       final.formula <- marker.lin.formula
#
#       ## 4e. If p-value for interaction is below cutoff, test age, IL-6 interactions separately
#       if(modtype == 'zeroinfl'){
#         marker.noageint.formula <- create.zeroinfl.form(count.form = form.split.count,
#                                                         zero.form = form.split.zero,
#                                                         regex.sub = 'age\\.[enroll | div10].*:')
#         if(has.il6){
#           marker.noil6int.formula <- create.zeroinfl.form(count.form = form.split.count,
#                                                           zero.form = form.split.zero,
#                                                           regex.sub = 'il6.log10.*:')
#         }
#       } else{
#         marker.noageint.formula <- paste(form.split[grep('age\\.[enroll | div10].*:',
#                                                          form.split, invert = TRUE)],
#                                          collapse = ' + ')
#         if(has.il6){
#           marker.noil6int.formula <-
#             paste(form.split[grep('il6.log10.*:', form.split, invert = TRUE)], collapse = ' + ')
#         }
#       }
#       mod.noageint <- eval(parse(text = sprintf(modfit.text, marker.noageint.formula)))
#
#       p.int.age <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                           lrpval(mod.lin, mod.noageint),
#                           lrpval(mod.lin, mod.noageint, mice.obj = imp.obj))
#
#       if(has.il6){
#         mod.noil6int <- eval(parse(text = sprintf(modfit.text, marker.noil6int.formula)))
#
#         p.int.il6 <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                             lrpval(mod.lin, mod.noil6int),
#                             lrpval(mod.lin, mod.noil6int, mice.obj = imp.obj))
#
#       }
#     }
#   } else{
#     if(modtype == 'zeroinfl'){
#       ## Split twice: once for count vs. zero portion, once to get each variable
#       form.split <- strsplit(marker.full.formula, '|', fixed = TRUE)
#       form.split.count <- strsplit(form.split[[1]][1], ' *\\+ *')[[1]]
#       form.split.zero <- strsplit(form.split[[1]][2], ' *\\+ *')[[1]]
#
#       ## 4b. Fit model without interaction terms
#       marker.noint.formula <- create.zeroinfl.form(count.form = form.split.count,
#                                                    zero.form = form.split.zero,
#                                                    regex.sub = ':')
#     } else{
#       form.split <- strsplit(marker.full.formula, ' + ', fixed = TRUE)[[1]]
#       marker.noint.formula <-
#         paste(form.split[grep(':', form.split, invert = TRUE)], collapse = ' + ')
#     }
#     mod.noint <- eval(parse(text = sprintf(modfit.text, marker.noint.formula)))
#
#     ## 4c. Calculate p-value for all interaction terms
#     p.int <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                     lrpval(mod.full, mod.noint),
#                     lrpval(mod.full, mod.noint, mice.obj = imp.obj))
#
#     ## 4d. Save final model object
#     if(p.int > pcutoff){
#       mod.final <- mod.noint
#       final.formula <- marker.noint.formula
#     } else{
#       mod.final <- mod.full
#
#       if(modtype == 'zeroinfl'){
#         marker.noageint.formula <- create.zeroinfl.form(count.form = form.split.count,
#                                                         zero.form = form.split.zero,
#                                                         regex.sub = 'age\\.[enroll | div10].*:')
#         if(has.il6){
#           marker.noil6int.formula <- create.zeroinfl.form(count.form = form.split.count,
#                                                           zero.form = form.split.zero,
#                                                           regex.sub = 'il6.log10.*:')
#         }
#       } else{
#         marker.noageint.formula <- paste(form.split[grep('age\\.[enroll | div10].*:',
#                                                          form.split, invert = TRUE)],
#                                          collapse = ' + ')
#         if(has.il6){
#           marker.noil6int.formula <-
#             paste(form.split[grep('il6.log10.*:', form.split, invert = TRUE)], collapse = ' + ')
#         }
#       }
#
#       mod.noageint <- eval(parse(text = sprintf(modfit.text, marker.noageint.formula)))
#       p.int.age <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                           lrpval(mod.full, mod.noageint),
#                           lrpval(mod.full, mod.noageint, mice.obj = imp.obj))
#
#       if(has.il6){
#         mod.noil6int <- eval(parse(text = sprintf(modfit.text, marker.noil6int.formula)))
#         p.int.il6 <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                             lrpval(mod.full, mod.noil6int),
#                             lrpval(mod.full, mod.noil6int, mice.obj = imp.obj))
#
#       }
#     }
#   }
#
#   ## 5. Calculate overall p-value for biomarker
#   ## 5a. Fit model without any biomarker terms, using same data set
#   # final.call <- as.character(mod.final$call)[2]
#   if(modtype == 'zeroinfl'){
#     ## Split twice: once for count vs. zero portion, once to get each variable
#     final.call.split <- strsplit(final.formula, '|', fixed = TRUE)
#     final.call.count <- strsplit(final.call.split[[1]][1], ' *\\+ *')[[1]]
#     final.call.zero <- strsplit(final.call.split[[1]][2], ' *\\+ *')[[1]]
#     nomark.form <- create.zeroinfl.form(count.form = final.call.count,
#                                         zero.form = final.call.zero,
#                                         regex.sub = use.marker)
#   } else{
#     final.call.split <- strsplit(final.formula, ' + ', fixed = TRUE)[[1]]
#     nomark.form <- paste(final.call.split[grep(use.marker, final.call.split, invert = TRUE)],
#                          collapse = ' + ')
#   }
#   nomark.mod <- eval(parse(text = sprintf(modfit.text, nomark.form)))
#
#   p.marker <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                      lrpval(mod.final, nomark.mod),
#                      lrpval(mod.final, nomark.mod, mice.obj = imp.obj))
#
#   ## 6. Calculate overall p-value for IL-6, if included in model
#   if(has.il6){
#     ## Initialize object that might be needed if we use mice imputation
#     refit.il6.mod <- NULL
#
#     if(modtype == 'zeroinfl'){
#       ## Split twice: once for count vs. zero portion, once to get each variable
#       final.call.split <- strsplit(final.formula, '|', fixed = TRUE)
#       final.call.count <- strsplit(final.call.split[[1]][1], ' *\\+ *')[[1]]
#       final.call.zero <- strsplit(final.call.split[[1]][2], ' *\\+ *')[[1]]
#       noil6.form <- create.zeroinfl.form(count.form = final.call.count,
#                                          zero.form = final.call.zero,
#                                          regex.sub = 'il6\\.log10')
#     } else{
#       final.call.split <- strsplit(final.formula, ' + ', fixed = TRUE)[[1]]
#       noil6.form <- paste(final.call.split[grep('il6\\.log10', final.call.split, invert = TRUE)],
#                           collapse = ' + ')
#
#       ## If using mice object, pool.compare() requires IL-6 to be at the very end; refit final model
#       if(!is.null(imp.obj) & class(imp.obj) == 'mids'){
#         noil6.vars <- grep('il6\\.log10', final.call.split, invert = TRUE)
#         il6.var <- grep('il6\\.log10', final.call.split)
#         refit.il6.form <- paste(c(final.call.split[noil6.vars], final.call.split[il6.var]),
#                                 collapse = ' + ')
#         refit.il6.mod <- eval(parse(text = sprintf(modfit.text, refit.il6.form)))
#       }
#     }
#     noil6.mod <- eval(parse(text = sprintf(modfit.text, noil6.form)))
#
#     p.il6 <- ifelse(is.null(imp.obj) | class(imp.obj) == 'aregImpute',
#                     lrpval(mod.final, noil6.mod),
#                     lrpval(refit.il6.mod, noil6.mod, mice.obj = imp.obj))
#
#   }
#
#   ## In final models, get IRR or difference + 95% CI for biomarker, IL-6 (75th vs 25th percentiles)
#   marker.ci <- marker.cistr <- il6.ci <- il6.cistr <- NULL
#
#   ## If interactions are kept, set values to adjust age and IL-6 to when calculating IRR/CIs
#   if(p.int <= pcutoff){
#     if(has.il6){
#       adj.int.vals <- c('age.div10' = median(endo.data$age.div10, na.rm = TRUE),
#                         'il6.log10' = median(endo.data$il6.log10, na.rm = TRUE),
#                         'marker' = median(endo.data[,use.marker], na.rm = TRUE))
#     } else{
#       adj.int.vals <- c('age.div10' = median(endo.data$age.div10, na.rm = TRUE),
#                         'marker' = median(endo.data[,use.marker], na.rm = TRUE))
#     }
#     names(adj.int.vals) <- gsub('marker', use.marker, names(adj.int.vals))
#   }
#
#   if(modtype %in% c('nb', 'zeroinfl')){
#     ## Create list of knots for biomarker
#     bio.knots <- list(rcspline.eval(dataset[,use.marker], nk = 3, knots.only = TRUE))
#     names(bio.knots) <- use.marker
#
#     ## Get coefficients, vcov matrix to use
#     if(!is.null(imp.obj)){
#       use.coefs <- pool(mod.final)$qbar
#       use.vcov <- pool(mod.final)$t
#     } else{
#       use.coefs <- coef(mod.final)
#       use.vcov <- vcov(mod.final)
#     }
#
#     ## If model is regular NB, ratiovar = use.marker; if ZINB, needs "count_" as well
#     if(modtype == 'zeroinfl'){
#       use.ratiovar <- paste0('count_', use.marker)
#     } else{ use.ratiovar <- use.marker }
#
#     marker.ci <- calc.ratioci(modcoefs = use.coefs,
#                               modvcov = use.vcov,
#                               ratiovar = use.ratiovar,
#                               ratiovals = bio.ratiovals[[use.marker]],
#                               intvals = adj.int.vals,
#                               dataset = endo.data,
#                               use.knots = bio.knots)
#     marker.cistr <- print.peci(marker.ci)
#
#     if(has.il6){
#       il6.ci <- calc.ratioci(modcoefs = use.coefs,
#                              modvcov = use.vcov,
#                              ratiovar = 'il6.log10',
#                              ratiovals = bio.ratiovals[['il6.log10']],
#                              intvals = adj.int.vals[c('il6.log10', use.marker)],
#                              dataset = endo.data,
#                              use.knots = bio.knots)
#       il6.cistr <- print.peci(il6.ci)
#     }
#   }
#
#   return(list('marker' = use.marker,
#               'final.mod' = mod.final,
#               'p.nonlin' = p.nonlin,
#               'il6.ci' = il6.ci,
#               'il6.cistr' = il6.cistr,
#               'p.il6' = p.il6,
#               'p.int' = p.int,
#               'p.int.age' = p.int.age,
#               'p.int.il6' = p.int.il6,
#               'marker.ci' = marker.ci,
#               'marker.cistr' = marker.cistr,
#               'p.marker' = p.marker))
# }

# ## -- Function to create design matrices given a glm.nb object, X & interacting variables ----------
# create.designmat.nb <- function(nbobj,                ## glm.nb model object, or mice object
#                                                       ##  with glm.nb fits
#                                 xvar,                 ## string; variable for x axis
#                                 intvar = NULL,        ## string; variable to interact
#                                 intvals = NULL,       ## vector; values to set int. variable to
#                                 dataset = endo.data){ ## data frame to get unique X values from
#
#   is.mice <- 'mira' %in% class(nbobj)
#
#   ## Model object must be fit using glm.nb()
#   if(!('negbin' %in% class(nbobj) | (is.mice & 'negbin' %in% class(nbobj$analyses[[1]])))){
#     stop('nbobj must be of class negbin from glm.nb(), or a mice object using glm.nb to fit')
#   }
#
#   ## Get coefficients, depending on whether object is imputed via mice or not
#   if(is.mice){
#     use.coefs <- pool(nbobj)$qbar
#   } else{
#     use.coefs <- coef(nbobj)
#   }
#   coefnames <- names(use.coefs)
#
#   if(!is.null(intvar) & length(grep(':', names(use.coefs))) == 0){
#     stop('Interacting variable is specified, but model does not include interaction terms')
#   }
#
#   if(!is.null(intvar) & is.null(intvals)){
#     stop('Interacting variable is specified, but no interacting values are specified')
#   }
#
#   ## Strip out "rcs(...)"
#   coefnames2 <- unlist(lapply(coefnames, FUN = function(x){
#     tmp1 <- gsub("rcs\\([a-z.,0-9 ]+\\)", "", x)
#     ## try pmatch(): res <- catvars[which(!is.na(pmatch(catvars, x)))]
#     if(sum(!is.na(pmatch(catvars, tmp1))) > 0){
#       tmp2 <- catvars[which(!is.na(pmatch(catvars, tmp1)))]
#     } else{ tmp2 <- tmp1 }
#     tmp2
#   }))
#
#   ## -- Set values for all non-interaction columns -------------------------------------------------
#   ## Get vector of all unique pieces of use.coefs
#   ##  (eg, age.enroll, age.enroll', charlson.score, charlson.score')
#   all.term.names <- unique(unlist(lapply(coefnames2, FUN = function(x){
#     strsplit(x, ' *[:*] *')[[1]]
#   })))
#
#   ## Get vector of all unique variable names (stripping 's from all.term.names)
#   all.var.names <- unique(gsub("'+$", "", all.term.names))
#
#   ## Get vector of information for each covariate:
#   ## - nonlinear?
#   ## - if so, how many and where are knots?
#   ## - all values to adjust variable to: 1 if Intercept; 0 if categorical; median if linear;
#   ##   median + spline values for median if nonlinear
#   covariate.info <- lapply(all.var.names, FUN = function(v){
#     is.nonlin <- length(grep(paste0('^', v, "'"), all.term.names)) > 0
#
#     adj.main <- NULL
#     if(v == '(Intercept)'){
#       adj.main <- 1
#     } else if(v %in% catvars){
#       adj.main <- 0
#     } else{
#       adj.main <- median(dataset[,v], na.rm = TRUE)
#     }
#
#     ## If variable is nonlinear (using rcs), get knot locations and spline values for adj.main
#     if(is.nonlin){
#       v.nknots <- length(gregexpr("'",
#                                   tail(sort(grep(paste0("^", gsub('.', '\\.', v, fixed = TRUE)),
#                                                  all.term.names, value = TRUE)), n = 1))[[1]]) + 2
#       knot.loc <- rcspline.eval(dataset[,v], nk = v.nknots, knots.only = TRUE)
#       adj.values <- as.numeric(rcspline.eval(adj.main, knots = knot.loc, inclx = TRUE))
#     } else{
#       v.nknots <- knot.loc <- NULL
#       adj.values <- adj.main
#     }
#     return(list('nl' = is.nonlin,
#                 'knot.n' = v.nknots,
#                 'knot.loc' = knot.loc,
#                 'adj.to' = adj.values))
#   })
#   names(covariate.info) <- all.var.names
#
#   adjust.values <- unlist(lapply(covariate.info, FUN = function(c){ c$adj.to }))
#   names(adjust.values) <- all.term.names
#
#   ## Get matrix of X values, including spline terms if needed
#   xvals <- sort(unique(dataset[,xvar]))
#   xlims <- quantile(xvals, probs = c(0.1, 0.9), na.rm = TRUE)
#   xvals <- xvals[xvals >= xlims[1] & xvals <= xlims[2]]
#   if(covariate.info[[xvar]]$nl){
#     xvals.mat <- rcspline.eval(xvals, knots = covariate.info[[xvar]]$knot.loc, inclx = TRUE)
#     colnames(xvals.mat) <- unlist(lapply(1:ncol(xvals.mat), FUN = function(k){
#       paste0(xvar, paste(rep("'", times = k - 1), collapse = '')) }))
#   } else{
#     xvals.mat <- as.matrix(xvals, ncol = 1)
#     colnames(xvals.mat) <- xvar
#   }
#
#   ## Create matrix with adjusting values to use
#   ## - For non-xvar/intvar-related columns, this is adjust.values * length(xvals)
#   ## - For xvar-related columns, this is xvals.mat columns
#   pred.matrix <- do.call(cbind,
#                          lapply(coefnames2, FUN = function(v){
#                            v.vars <- strsplit(v, ' *[:*] *')[[1]]
#
#                            tmp <- do.call(cbind,
#                                           lapply(v.vars, FUN = function(i){
#                                             if(i %in% colnames(xvals.mat)){
#                                               xvals.mat[,i]
#                                             } else{
#                                               rep(adjust.values[i], nrow(xvals.mat))
#                                             }
#                                           }))
#
#                            ## If interaction term, need product of all components;
#                            ## otherwise, need original column
#                            if(length(v.vars) > 1){
#                              apply(tmp, MARGIN = 1, FUN = prod)
#                            } else{
#                              tmp
#                            }
#                          }))
#   colnames(pred.matrix) <- coefnames2
#
#   ## If intvars are specified, repeat pred.matrix for each value in intvals and change interaction
#   ## columns accordingly
#   if(!is.null(intvar)){
#     ## If interacting variable is nonlinear, get spline terms for each value in intvals
#     if(covariate.info[[intvar]]$nl){
#       intvals.mat <- rcspline.eval(intvals, knots = covariate.info[[intvar]]$knot.loc, inclx = TRUE)
#       colnames(intvals.mat) <- unlist(lapply(1:ncol(intvals.mat), FUN = function(k){
#         paste0(intvar, paste(rep("'", times = k - 1), collapse = '')) }))
#     } else{
#       intvals.mat <- matrix(intvals, ncol = 1)
#       colnames(intvals.mat) <- intvar
#     }
#
#     pred.matrix <- do.call(rbind,
#                            lapply(1:nrow(intvals.mat), FUN = function(i){
#                              tmp <- matrix(rep(intvals.mat[i,], nrow(pred.matrix)),
#                                            ncol = ncol(intvals.mat), byrow = TRUE)
#                              tmp2 <- pred.matrix
#                              for(j in 1:ncol(tmp)){
#                                tmp2[,colnames(intvals.mat)[j]] <- tmp[,j]
#                              }
#                              tmp2
#                            }))
#   }
#
#   return('predmat' = pred.matrix)
#
# }

## -- Function to plot results of negative binomial models -----------------------------------------
# plot.nb.results <- function(nbobj,            ## list, result of fit.nb.models()
#                             xvar,             ## string, name of X axis variable
#                             intvar = NULL,    ## string, name of interacting variable
#                             intvals = NULL,   ## vector, levels to set interacting variable to
#                             intstring = NULL, ## string, text for panel titles and X axis label
#                             xstring,          ## string, label of X axis variable
#                             ystring,          ## string, label of outcome
#                             free.scales = c('neither', 'x', 'y', 'both')){ ## whether/which facet
#                                                                            ##  scales should be free
#
#   free.scales <- match.arg(free.scales)
#
#   if(length(grep('final\\.mod', names(nbobj))) == 0){
#     stop("Argument nbobj should be a result of fit.nb.models()")
#   }
#
#   is.mice <- 'mira' %in% class(nbobj$final.mod)
#   if(is.mice){
#     coef.names <- names(pool(nbobj$final.mod)$qbar)
#   } else{
#     coef.names <- names(coef(nbobj$final.mod))
#   }
#
#   if(!is.null(intvar) & length(grep(':', coef.names)) == 0){
#     stop('Interacting variable is specified, but model does not include interaction terms')
#   }
#
#   if(!is.null(intvar) & is.null(intvals)){
#     stop('Interacting variable is specified, but no interacting values are specified')
#   }
#
#   if(is.null(intvar)){
#     nb.designmat <- create.designmat.nb(nbobj = nbobj$final.mod, xvar = xvar)
#     nb.results <- calc.nbresults(nbobj = nbobj$final.mod, designmat = nb.designmat, xvar = xvar)
#   } else{
#     nb.designmat <- create.designmat.nb(nbobj = nbobj$final.mod, xvar = xvar,
#                                         intvar = intvar, intvals = intvals)
#
#     nb.results <- calc.nbresults(nbobj = nbobj$final.mod, designmat = nb.designmat,
#                                  xvar = xvar, intvar = intvar)
#
#     nb.results$intvalue.f <-
#       with(nb.results, factor(paste(intstring, '=', rndformat(intvalue, 2))))
#   }
#
#   nb.plot <- ggplot(aes(x = xvalue, y = count.pe), data = nb.results) +
#     geom_ribbon(aes(ymin = count.lcl, ymax = count.ucl), alpha = 0.3, fill = 'navy') +
#     geom_line(colour = 'navy') +
#     xlab(sprintf('Log10(%s)', xstring)) +
#     ylab(paste('Adjusted', ystring)) +
#     theme_bw() +
#     theme(axis.title.x = element_text(vjust = 0, size = 9), #face = 'bold', vjust = 0),
#           axis.title.y = element_text(size = 9),
#           axis.text = element_text(size = 7),
#           strip.text = element_text(face = 'bold'))
#
#   if(is.null(intvar)){
#     return(nb.plot)
#   } else{
#     if(free.scales == 'neither'){
#       return(nb.plot + facet_wrap(~ intvalue.f, nrow = 1))
#     } else if(free.scales == 'x'){
#       return(nb.plot + facet_wrap(~ intvalue.f, scales = 'free_x'))
#     } else if(free.scales == 'y'){
#       return(nb.plot + facet_wrap(~ intvalue.f, scales = 'free_y'))
#     } else{
#       return(nb.plot + facet_wrap(~ intvalue.f, scales = 'free'))
#     }
#   }
# }

# ## -- Function to create design matrices for count, zero portions given a zeroinfl object, ---------
# ## --  X & interacting variables -------------------------------------------------------------------
# create.designmat.zinf <- function(modobj,               ## zeroinfl model object
#                                   xvar,                 ## string; variable for x axis
#                                   intvar = NULL,        ## string; variable to interact
#                                   intvals = NULL,       ## vector; values to set int. variable to
#                                   dataset = endo.data){ ## data frame to get unique X values from
#
#   ## miceobj must be of class zeroinfl
#   if(length(grep('zeroinfl', class(modobj))) == 0){
#     stop('modobj must be of class zeroinfl from pscl library')
#   } else if(!is.null(intvar) & length(grep(':', names(coef(modobj)))) == 0){
#     stop('Interacting variable is specified, but model does not include interaction terms')
#   } else if(!is.null(intvar) & is.null(intvals)){
#     stop('Interacting variable is specified, but no interacting values are specified')
#   } else{
#
#     ## Get coefficient names for count and zero portions
#     coefnames <- names(coef(modobj))
#     coefs.c <- coefnames[grep('^count', coefnames)]
#     coefs.z <- coefnames[grep('^zero', coefnames)]
#
#     ## Strip out "rcs(...)" and "count_/zero_"
#     coefs.c <- unlist(lapply(coefs.c, FUN = function(x){
#       tmp1 <- gsub("rcs\\([a-z.,0-9 ]+\\)", "", x)
#       tmp2 <- gsub('.$', '', x)
#       if(tmp2 %in% catvars){ gsub('^count_', '', tmp2) } else{ gsub('^count_', '', tmp1) }
#     }))
#     coefs.z <- unlist(lapply(coefs.z, FUN = function(x){
#       tmp1 <- gsub("rcs\\([a-z.,0-9 ]+\\)", "", x)
#       tmp2 <- gsub('.$', '', x)
#       if(tmp2 %in% catvars){ gsub('^zero_', '', tmp2) } else{ gsub('^zero_', '', tmp1) }
#     }))
#
#     ## Get unique values of variable on X axis
#     xvals <- sort(unique(dataset[,xvar]))
#     xknots <- rcspline.eval(xvals, nk = 3, knots.only = TRUE)
#     xvals <- xvals[xvals >= xknots[1] & xvals <= xknots[3]]
#     if(length(grep(paste0(xvar, "'"), coefnames)) > 0){
#       xvals.spline <- unlist(lapply(xvals,
#                                     FUN = calc.spline,
#                                     k1 = xknots[1], k2 = xknots[2], k3 = xknots[3]))
#     }
#
#     ## Set values for all non-interaction columns
#     coefs.noint.c <- coefs.c[grep(':', coefs.c, invert = TRUE)]
#     coefs.int.c <- coefs.c[grep(':', coefs.c)]
#     coefs.noint.z <- coefs.z[grep(':', coefs.z, invert = TRUE)]
#     coefs.int.z <- coefs.z[grep(':', coefs.z)]
#
#     ## Function to fill in non-interaction columns
#     fill.predvals.noint <- function(name){
#       if(name == '(Intercept)'){
#         rep(1, length(xvals))
#       } else if(name == xvar){
#         xvals
#       } else if(name == paste0(xvar, "'")){
#         xvals.spline
#       } else if(!is.null(intvar) & name %in% c(intvar, paste0(intvar, "'"))){
#         rep(NA, length(xvals))
#       } else if(name %in% catvars){
#         rep(0, length(xvals))
#       } else if(length(grep("'", name)) == 0){
#         get.med(name)
#       } else{
#         get.med.spline(gsub('.$', '', name))
#       }
#     }
#
#     predmat.noint.c <- do.call(cbind, lapply(coefs.noint.c, FUN = fill.predvals.noint))
#     colnames(predmat.noint.c) <- coefs.noint.c
#
#     predmat.noint.z <- do.call(cbind, lapply(coefs.noint.z, FUN = fill.predvals.noint))
#     colnames(predmat.noint.z) <- coefs.noint.z
#
#     ## If there is an interacting variable, repeat predmat.noint x number of unique values, then
#     ##  fill in NA columns with unique values
#     if(!is.null(intvar)){
#       predmat.noint.c <-
#         do.call(rbind, replicate(length(intvals), predmat.noint.c, simplify = FALSE))
#       if(intvar %in% colnames(predmat.noint.c)){
#         predmat.noint.c[,intvar] <-
#           unlist(lapply(intvals, FUN = function(x){ rep(x, length(xvals)) }))
#       }
#
#       predmat.noint.z <-
#         do.call(rbind, replicate(length(intvals), predmat.noint.z, simplify = FALSE))
#       if(intvar %in% colnames(predmat.noint.z)){
#         predmat.noint.z[,intvar] <-
#           unlist(lapply(intvals, FUN = function(x){ rep(x, length(xvals)) }))
#       }
#
#       ## If interacting variable is nonlinear, determine knots for spline term
#       if(length(grep(paste0(intvar, "'"), coefnames)) > 0){
#         intknots <- rcspline.eval(dataset[,intvar], nk = 3, knots.only = TRUE)
#         intspline <- unlist(lapply(intvals,
#                                    FUN = calc.spline,
#                                    k1 = intknots[1], k2 = intknots[2], k3 = intknots[3]))
#         if(length(grep(paste0(intvar, "'"), coefs.c)) > 0){
#           predmat.noint.c[,paste0(intvar, "'")] <-
#             unlist(lapply(intspline, FUN = function(x){ rep(x, length(xvals)) }))
#         }
#
#         if(length(grep(paste0(intvar, "'"), coefs.z)) > 0){
#           predmat.noint.z[,paste0(intvar, "'")] <-
#             unlist(lapply(intspline, FUN = function(x){ rep(x, length(xvals)) }))
#         }
#       }
#     }
#
#     if(length(coefs.int.c) > 0){
#       predmat.int.c <- do.call(cbind,
#                                lapply(coefs.int.c, FUN = function(name){
#                                  tmp <- strsplit(name, ':')[[1]]
#                                  predmat.noint.c[,tmp[1]] * predmat.noint.c[,tmp[2]]
#                                }))
#       colnames(predmat.int.c) <- coefs.int.c
#       predmat.c <- cbind(predmat.noint.c, predmat.int.c)[,coefs.c]
#     } else{
#       predmat.c <- predmat.noint.c[,coefs.c]
#     }
#
#     if(length(coefs.int.z) > 0){
#       predmat.int.z <- do.call(cbind,
#                                lapply(coefs.int.z, FUN = function(name){
#                                  tmp <- strsplit(name, ':')[[1]]
#                                  predmat.noint.z[,tmp[1]] * predmat.noint.z[,tmp[2]]
#                                }))
#       colnames(predmat.int.z) <- coefs.int.z
#       predmat.c <- cbind(predmat.noint.z, predmat.int.z)[,coefs.z]
#     } else{
#       predmat.z <- predmat.noint.z[,coefs.z]
#     }
#
#   }
#
#   return(list('predmat.c' = predmat.c, 'predmat.z' = predmat.z))
#
# }
#
# ## -- Function to get predicted response values from a zero-inflated NB model ----------------------
# zinf.response <- function(modobj,       ## Original model object
#                           design.zinf){ ## List of design matrices
#   ## Get coefficient estimates from modobj, split into count and zero portions
#   mod.coefs <- coef(modobj)
#   coefs.c <- mod.coefs[grep('^count_', names(mod.coefs))]
#   coefs.z <- mod.coefs[grep('^zero_', names(mod.coefs))]
#
#   ## Get linear predictors for count, zero portions
#   lp.c <- apply(design.zinf$predmat.c,
#                 MARGIN = 1,
#                 FUN = function(x){ sum(x * coefs.c) })
#   lp.z <- apply(design.zinf$predmat.z,
#                 MARGIN = 1,
#                 FUN = function(x){ sum(x * coefs.z) })
#
#   ## Get point estimates for each unique value of marker
#   ## exp(LPc) * (1 - (exp(LPz) / (1 + exp(LPz))))
#   pred.response <- exp(lp.c) * (1 - (exp(lp.z) / (1 + exp(lp.z))))
#
#   pred.response
# }
#
#
# try.zeroinfl <- function(...){
#   op <- options(warn = 2)
#   on.exit(options(op))
#   try(zeroinfl(...), silent = TRUE)
# }
#
#
# ## -- Function to get data sets of predicted values for plotting zero-inflated NB models -----------
# zinf.plotdata <- function(modobj,               ## Original model object to base bootstraps on
#                           xvar,                 ## Main exposure variable
#                           bootdata,             ## List of bootstrapped data sets to use
#                           n.boot = n.bootsets){ ## Number of successful model fits required
#   ## Does model include age/IL-6 interactions?
#   intmod <- (length(grep(':', modobj$call)) > 0)
#
#   ## Step 1: Create design matrices
#   if(intmod){
#     intvars <- c('age.div10', 'il6.log10')
#     design.age <-
#       create.designmat.zinf(modobj, xvar, intvar = 'age.div10', intvals = intvals.age / 10)
#     design.il6 <-
#       create.designmat.zinf(modobj, xvar, intvar = 'il6.log10', intvals = intvals.il6)
#     design.all <- list(design.age, design.il6)
#   } else{
#     design.all <- list(create.designmat.zinf(modobj, xvar))
#   }
#
#   ## Step 2: Get point estimates from main model for each design matrix
#   pointests <- lapply(design.all, FUN = function(dmat){
#     zinf.response(modobj, dmat)
#   })
#
#   ## Step 3: Get predicted values for each bootstrapped data set, using model call in modobj
#   formula.final <- as.character(modobj$call)[2]
#
#   mod.list <- vector('list', n.boot)
#   n.succ <- n.fail <- 0
#
#   iter <- 1
#   while(n.succ < n.boot){
#     cur.model <- do.call(try.zeroinfl,
#                          list(formula = as.formula(formula.final),
#                               dist = 'negbin',
#                               data = bootdata[[iter]]))
#
#     ## Did model have an error/warning? Or does it have more/fewer coefs than original?
#     curmod.failed <- inherits(cur.model, 'try-error')
#
#     if(curmod.failed){
#       n.fail <- n.fail + 1
#       ## With first failure, begin a text file to store error messages; with following failues,
#       ##  add subsequent errors to it
#       if(n.fail == 1){ append.txt <- TRUE } else{ append.txt <- FALSE }
#
#       sink(file = paste('zeroinfl_errors_', xvar, '.txt', sep = ''), append = append.txt)
#       cat('Errors and warnings for ', xvar, '\n\nFailure ', n.fail, ': ', cur.model[1], '\n',
#           sep = '')
#       sink()
#     ## Otherwise, increment # successes, save model fit, coefficients, SEs, LR test if needed
#     } else{
#       n.succ <- n.succ + 1
#       mod.list[[n.succ]] <- cur.model
#     }
#
#     print(paste("Finished bootstrap iteration", iter, "for", xvar))
#     iter <- iter + 1
#   }
#
#   pred.all <- lapply(design.all, FUN = function(dmat){
#     do.call(cbind,
#             lapply(1:length(mod.list), FUN = function(mod){
#               cat('Starting model predictions for model', mod, 'of', length(mod.list), '\n')
#               zinf.response(mod.list[[mod]], dmat)
#             }))
#   })
#
#   ## Step 4: Get CIs for each row of the design matrix
#   pred.cis <- lapply(pred.all, FUN = function(pmat){
#     t(apply(pmat, MARGIN = 1, FUN = get.ci))
#   })
#
#   ## Step 5: combine with original xvar, interacting value and point estimate
#   if(intmod){
#     pred.final <- lapply(1:length(design.all), FUN = function(dmat){
#       tmp <- as.data.frame(cbind(design.all[[dmat]]$predmat.c[,c(xvar, intvars[dmat])],
#                                  pointests[[dmat]],
#                                  pred.cis[[dmat]]))
#       names(tmp) <- c(xvar, intvars[dmat], 'pe', 'lcl', 'ucl')
#       tmp
#     })
#   } else{
#     pred.final <- lapply(1:length(design.all), FUN = function(dmat){
#       tmp <- as.data.frame(cbind(design.all[[dmat]]$predmat.c[,xvar],
#                                  pointests[[dmat]],
#                                  pred.cis[[dmat]]))
#       names(tmp) <- c(xvar, 'pe', 'lcl', 'ucl')
#       tmp
#     })
#   }
#
#   return(list('pred.data' = pred.final, 'n.fail' = n.fail))
#
# }
#
# ## -- Function to plot zero-inflated results -------------------------------------------------------
# plot.zinf.results <- function(zinfobj,
#                               preddata,
#                               xvar,
#                               xstring,
#                               ystring,
#                               intvar = NULL,
#                               intvar.str = NULL,
#                               intvar.p){
#
#   ## Create factor version of interacting variable
#   if(!is.null(intvar)){
#     preddata$intvar.f <-
#       factor(paste(intvar.str, rndformat(preddata[,intvar], digits = 2), sep = ' = '))
#   }
#
#   ## Substitute "xvar" for actual name of xvar for ggplot purposes
#   names(preddata) <- gsub(xvar, 'xvar', names(preddata))
#
#   zinf.plot <- ggplot(aes(x = xvar, y = pe), data = preddata) +
#     geom_ribbon(aes(ymin = lcl, ymax = ucl), alpha = 0.3, fill = 'navy') +
#     geom_line(colour = 'navy') +
#     ylab(ystring) +
#     theme_bw()
#
#   if(!is.null(intvar)){
#     zinf.plot <- zinf.plot +
#       facet_wrap(~ intvar.f, nrow = 1) +
#       xlab(paste0(xstring, '\n\nP for biomarker, final model: ',
#                   formatp(val = zinfobj$p.marker),
#                   '\nP for all interactions: ',
#                   formatp(val = zinfobj$p.int),
#                   '\nP for ', intvar.str, ' interaction: ',
#                   formatp(val = unlist(zinfobj[intvar.p])))) +
#       theme(strip.text = element_text(face = 'bold'))
#   } else{
#     zinf.plot <- zinf.plot +
#       xlab(paste0(xstring, '\n\nP for biomarker, final model: ',
#                   formatp(val = zinfobj$p.marker),
#                   '\nP for all interactions: ',
#                   formatp(val = zinfobj$p.int)))
#   }
#
#   zinf.plot
# }
#
# ## -- Function to create either one or two plots depending on interaction p-value ------------------
# zinf.figures <- function(zinfobj, zinf.preddata, xvar, xstring, ystring){
#   if(zinfobj$p.int > 0.20){
#     return(list('fig' = list('fig' = plot.zinf.results(zinfobj = zinfobj,
#                                                        preddata = zinf.preddata[[1]][[1]],
#                                                        xvar = xvar,
#                                                        xstring = xstring,
#                                                        ystring = ystring)),
#                 'height' =  4,
#                 'layoutmat' = matrix(1, ncol = 1)))
#   } else{
#     fig1 <- plot.zinf.results(zinfobj = zinfobj,
#                               preddata = zinf.preddata[[1]][[1]],
#                               xvar = xvar, xstring = xstring, ystring = ystring,
#                               intvar = 'age.div10',
#                               intvar.str = 'Age / 10',
#                               intvar.p = 'p.int.age')
#     fig2 <- plot.zinf.results(zinfobj = zinfobj,
#                               preddata = zinf.preddata[[1]][[2]],
#                               xvar = xvar, xstring = xstring, ystring = ystring,
#                               intvar = 'il6.log10',
#                               intvar.str = 'Log10(IL-6)',
#                               intvar.p = 'p.int.il6')
#
#     return(list('fig' = list(fig1, fig2),
#                 'height' = 8,
#                 'layoutmat' = matrix(1:2, ncol = 1)))
#   }
# }

## -- end of outdated code ----


@

\section{Endothelial/BBB Injury Markers vs. Delirium Duration}

To examine the association between endothelial/BBB injury at study enrollment and delirium duration
in the 30 days following, we used negative binomial regression, adjusting for the following
covariates:
\begin{itemize}
\item Charlson score
\item IQCODE score
\item Framingham stroke risk score
\item APACHE acute physiology component
\item Cardiovascular SOFA, study day 1
\item Severe sepsis, study day 1
\end{itemize}

(We considered both linear and proportional odds logistic regression, but assumptions for neither
model type were met adequately.)

We allowed endothelial biomarkers and IL-6 to have nonlinear associations with delirium duration
using restricted cubic splines; all other continuous were forced to be linear to improve model
stability and reproducibility.

In the original models, we allowed for potential interactions between endothelial/BBB markers and
both systemic inflammation (log10(IL-6)) on study day 1 and age at study enrollment. If either the global p-value for nonlinearity and/or the global p-value for interactions were clearly
nonsignificant (p $>$ \Sexpr{format(pcutoff, nsmall = 2)}), those terms are removed from the final model for parsimony. In sensitivity analyses, we excluded all systemic inflammation terms from the
model in order to see if adjusting for systemic inflammation is the reason behind any differences
from pilot analyses.

All biomarkers are transformed using the log10 transformation in order to improve model fit and
reduce the influence of extremely high values.

We used multiple imputation to reduce bias from missing covariates. All p-values are calculated
using the \Sexpr{use.method} method. Incidence rate ratios and 95\% confidence intervals are shown
for each endothelial marker, comparing the 75th percentile of each log10(biomarker) in our entire
cohort to the 25th percentile. In models where interactions are left in, these IRRs and CIs are
adjusted to median age and IL-6.

For models where interaction terms are kept in the final model, the association of the biomarker is
shown for the 25th, 50th, 75th, and 90th percentiles of the interacting variable.

% #' <<trymodeltypes>>=
% #' ## -- Functions to print PO model diagnostics ------------------------------------------------------
% #' po.assume <- function(model.obj, cuts, model.data){
% #'   ## Create data set for each coefficient in main model
% #'   cof.names <- names(coef(model.obj))
% #'   all.rows <- 1:length(cof.names)
% #'   int.rows <- grep('y>=', cof.names, fixed = TRUE)
% #'   take.rows <- all.rows[all.rows %nin% int.rows]
% #'   cof <- data.frame(var = cof.names[take.rows])
% #'
% #'   ## Extract formula from model call
% #'   comp.call <- as.character(formula(model.obj))
% #'   model.outcome <- comp.call[2]
% #'   model.formula <- comp.call[3]
% #'
% #'   for(k in 1:length(cuts)){
% #'     cut.mod <- lrm(as.formula(paste('as.numeric(', model.outcome, ' >= ', cuts[k], ') ~ ', model.formula, sep = '')),
% #'                    data = model.data)
% #'
% #'     cof.temp <- data.frame(var = names(coef(cut.mod)),
% #'                            hold.place = coef(cut.mod))
% #'
% #'     cof <- merge(cof, cof.temp, all.x = TRUE, all.y = FALSE)
% #'     names(cof) <- gsub('hold.place', paste('coef.cut', cuts[k], sep = '.'), names(cof))
% #'   }
% #'
% #'   ## Subset in case some splines didn't make requested number of knots
% #'   cof <- cof[rowSums(is.na(cof[,2:ncol(cof)])) == 0,]
% #'   ## Get number of rows/columns for plot (plot as close to square as possible)
% #'   plot.rows <- ceil(sqrt(nrow(cof)))
% #'
% #'   par(mfrow = c(plot.rows, plot.rows), mar = c(2, 4, 1, 1))
% #'   for(k in 1:nrow(cof)){
% #'     plot(cuts, cof[k, 2:ncol(cof)], type = 'l', ylab = '')
% #'     title(ylab = cof[k, 'var'], line = 2.5)
% #'     abline(h = 0, lty = 2)
% #'   }
% #' }
% #'
% #' ## -- Test linear, POLR regression first to make sure negative binomial is best choice -------------
% #' del.lin.bdnf <- ols(del.s.imp ~ rcs(charlson.score, 3) + rcs(iqcode.score.e, 3) +
% #'                       rcs(stroke.risk, 3) + rcs(apache.aps, 3) + rcs(cvsofa.day1, 3) +
% #'                       sevsepsis.day1 + rcs(age.enroll, 3) * rcs(bdnf.log10, 3) +
% #'                       rcs(il6.log10, 3) * rcs(bdnf.log10, 3),
% #'                     data = endo.data)
% #'
% #' del.polr.bdnf <- lrm(del.s.imp ~ rcs(charlson.score, 3) + rcs(iqcode.score.e, 3) +
% #'                       rcs(stroke.risk, 3) + rcs(apache.aps, 3) + rcs(cvsofa.day1, 3) +
% #'                       sevsepsis.day1 + rcs(age.enroll, 3) * rcs(bdnf.log10, 3) +
% #'                       rcs(il6.log10, 3) * rcs(bdnf.log10, 3),
% #'                     data = endo.data)
% #'
% #' ols.diagnostics(del.lin.bdnf, 'BDNF vs Delirium Duration')
% #' po.assume(del.polr.bdnf, cuts = seq(1, 10, 1), endo.data)
% #'
% #' ## Is zero-inflation needed? (ignore missing data for this test)
% #' pai1.del.glmnb <- glm.nb(del.s.imp ~ charlson.score + iqcode.score.e + stroke.risk + apache.aps +
% #'                            cvsofa.day1 + sevsepsis.day1 + age.div10 + rcs(il6.log10, 3) +
% #'                            rcs(pai1.log10, 3) + age.div10:rcs(pai1.log10, 3) +
% #'                            rcs(il6.log10, 3):rcs(pai1.log10, 3),
% #'                          data = endo.data)
% #'
% #' pai1.del.zeroinfl <- zeroinfl(del.s.imp ~ charlson.score + iqcode.score.e + stroke.risk +
% #'                                 apache.aps + cvsofa.day1 + sevsepsis.day1 + age.div10 +
% #'                                 rcs(il6.log10, 3) + rcs(pai1.log10, 3) +
% #'                                 age.div10:rcs(pai1.log10, 3) +
% #'                                 rcs(il6.log10, 3):rcs(pai1.log10, 3) | age.div10 + apache.aps,
% #'                               dist = 'negbin',
% #'                               data = endo.data)
% #'
% #' vuong(pai1.del.glmnb, pai1.del.zeroinfl)
% #'
% #' @

<<delmodels>>=
## -- Negative binomial models for outcome = duration of delirium ----------------------------------
## Setup: create vectors with all covariates for models with and without IL-6
del.covars <- c('charlson.score', 'iqcode.score.e', 'stroke.risk', 'apache.aps', 'cvsofa.day1',
                'sevsepsis.day1', 'age.div10', 'marker.log10', 'marker.prime', 'marker.age',
                'markerp.age')

del.il6.covars <- c('charlson.score', 'iqcode.score.e', 'stroke.risk', 'apache.aps', 'cvsofa.day1',
                    'sevsepsis.day1', 'age.div10', 'il6.log10', 'il6.prime', 'marker.log10',
                    'marker.prime', 'marker.age', 'markerp.age', 'marker.il6', 'markerp.il6',
                    'marker.il6p', 'markerp.il6p')

## -- Fit models for each biomarker ----------------------------------------------------------------
bdnf.del <-
  fit.nb.models(covars = del.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'bdnf')
bdnf.del.il6 <-
  fit.nb.models(covars = del.il6.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'bdnf')

esel.del <-
  fit.nb.models(covars = del.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'esel')
esel.del.il6 <-
  fit.nb.models(covars = del.il6.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'esel')

pai1.del <-
  fit.nb.models(covars = del.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'pai1')
pai1.del.il6 <-
  fit.nb.models(covars = del.il6.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'pai1')

s100b.del <-
  fit.nb.models(covars = del.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 's100b')
s100b.del.il6 <-
  fit.nb.models(covars = del.il6.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 's100b')

uchl.del <-
  fit.nb.models(covars = del.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'uchl')
uchl.del.il6 <-
  fit.nb.models(covars = del.il6.covars, outcome = 'del.s.imp', impobj = mice.del, marker = 'uchl')

## -- Create figures for delirium duration ---------------------------------------------------------
nb.figures.del <- function(nbobj, marker, xstring){
  nb.figures(nbobj = nbobj, marker = marker, xstring = xstring, ystring = 'Days of Delirium')
}

bdnf.del.fig <- nb.figures.del(nbobj = bdnf.del, marker = 'bdnf', xstring = 'BDNF')
esel.del.fig <- nb.figures.del(nbobj = esel.del, marker = 'esel', xstring = 'E-Selectin')
pai1.del.fig <- nb.figures.del(nbobj = pai1.del, marker = 'pai1', xstring = 'PAI-1')
s100b.del.fig <- nb.figures.del(nbobj = s100b.del, marker = 's100b', xstring = 'S100B')
uchl.del.fig <- nb.figures.del(nbobj = uchl.del, marker = 'uchl', xstring = 'UCHL')

bdnf.del.il6.fig <- nb.figures.del(nbobj = bdnf.del.il6, marker = 'bdnf', xstring = 'BDNF')
esel.del.il6.fig <- nb.figures.del(nbobj = esel.del.il6, marker = 'esel', xstring = 'E-Selectin')
pai1.del.il6.fig <- nb.figures.del(nbobj = pai1.del.il6, marker = 'pai1', xstring = 'PAI-1')
s100b.del.il6.fig <- nb.figures.del(nbobj = s100b.del.il6, marker = 's100b', xstring = 'S100B')
uchl.del.il6.fig <- nb.figures.del(nbobj = uchl.del.il6, marker = 'uchl', xstring = 'UCHL')

pdf(file = 'bdnf_del_results.pdf', width = 8, height = bdnf.del.il6.fig$height)
multiplot(plotlist = bdnf.del.il6.fig$fig, layout = bdnf.del.il6.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_delnoil6_results.pdf', width = 8, height = bdnf.del.fig$height)
multiplot(plotlist = bdnf.del.fig$fig, layout = bdnf.del.fig$layoutmat)
dev.off()

pdf(file = 'esel_del_results.pdf', width = 8, height = esel.del.il6.fig$height)
multiplot(plotlist = esel.del.il6.fig$fig, layout = esel.del.il6.fig$layoutmat)
dev.off()

pdf(file = 'esel_delnoil6_results.pdf', width = 8, height = esel.del.fig$height)
multiplot(plotlist = esel.del.fig$fig, layout = esel.del.fig$layoutmat)
dev.off()

pdf(file = 'pai1_del_results.pdf', width = 8, height = pai1.del.il6.fig$height)
multiplot(plotlist = pai1.del.il6.fig$fig, layout = pai1.del.il6.fig$layoutmat)
dev.off()

pdf(file = 'pai1_delnoil6_results.pdf', width = 8, height = pai1.del.fig$height)
multiplot(plotlist = pai1.del.fig$fig, layout = pai1.del.fig$layoutmat)
dev.off()

pdf(file = 's100b_del_results.pdf', width = 8, height = s100b.del.il6.fig$height)
multiplot(plotlist = s100b.del.il6.fig$fig, layout = s100b.del.il6.fig$layoutmat)
dev.off()

pdf(file = 's100b_delnoil6_results.pdf', width = 8, height = s100b.del.fig$height)
multiplot(plotlist = s100b.del.fig$fig, layout = s100b.del.fig$layoutmat)
dev.off()

pdf(file = 'uchl_del_results.pdf', width = 8, height = uchl.del.il6.fig$height)
multiplot(plotlist = uchl.del.il6.fig$fig, layout = uchl.del.il6.fig$layoutmat)
dev.off()

pdf(file = 'uchl_delnoil6_results.pdf', width = 8, height = uchl.del.fig$height)
multiplot(plotlist = uchl.del.fig$fig, layout = uchl.del.fig$layoutmat)
dev.off()

## -- Publication versions for BDNF, UCHL: tweak X axis, add p-value -------------------------------
pdf(file = 'bdnf_del_il6_results_pub.pdf', width = 6, height = 4)
bdnf.del.il6.fig$fig[[1]] +
  scale_x_continuous(name = 'Log10(BDNF) Plasma Concentration') +
  annotate(geom = 'text', x = 5.5, y = 4.05, hjust = 1, vjust = 0, size = 3,
           label = paste('P, overall association:',
                         format(round(bdnf.del.il6$p.marker, 2), nsmall = 2)))
dev.off()

pdf(file = 'bdnf_del_noil6_results_pub.pdf', width = 6, height = 4)
bdnf.del.fig$fig[[1]] +
  scale_x_continuous(name = 'Log10(BDNF) Plasma Concentration') +
  annotate(geom = 'text', x = 5.495, y = 3.76, hjust = 1, vjust = 0, size = 3,
           label = paste('P, overall association:',
                         format(round(bdnf.del$p.marker, 2), nsmall = 2)))
dev.off()

pdf(file = 'uchl_del_il6_results_pub.pdf', width = 6, height = 4)
uchl.del.il6.fig$fig[[1]] +
  scale_x_continuous(name = 'Log10(UCHL) Plasma Concentration') +
  annotate(geom = 'text', x = 4.2, y = 4.25, hjust = 1, vjust = 0, size = 3,
           label = paste('P, overall association:',
                         format(round(uchl.del.il6$p.marker, 2), nsmall = 2)))
dev.off()

pdf(file = 'uchl_del_noil6_results_pub.pdf', width = 6, height = 4)
uchl.del.fig$fig[[1]] +
  scale_x_continuous(name = 'Log10(UCHL) Plasma Concentration') +
  annotate(geom = 'text', x = 4.2, y = 4.05, hjust = 1, vjust = 0, size = 3,
           label = paste('P, overall association:',
                         format(round(uchl.del$p.marker, 2), nsmall = 2)))
dev.off()

@

\clearpage
\subsection{BDNF vs. Days of Delirium}
We see no association between log10(BDNF) at baseline and with delirium duration while in the
hospital, whether adjusting for systemic inflammation or not.

<<printbdnfdel, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.del.il6, 'BDNF'),
                       create.pval.table(bdnf.del, 'BDNF')),
                 caption = 'BDNF vs Days of Delirium',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

\clearpage
\subsubsection{BDNF vs. Delirium, Adjusting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_del_results.pdf}}
\caption{Log10(BDNF) vs. Delirium Duration, Adjusting for Log10(IL-6)}\label{fig:bdnfdel}
\end{figure}

\subsubsection{BDNF vs. Delirium, Not Accounting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_delnoil6_results.pdf}}
\caption{Log10(BDNF) vs. Delirium Duration, Not Accounting for Log10(IL-6)}\label{fig:bdnfdelnoil6}
\end{figure}

\clearpage
\subsection{E-Selectin vs. Days of Delirium}
We see no association between log(E-selectin) at baseline and with delirium duration while in the
hospital, whether adjusting for systemic inflammation or not.

<<printeseldel, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.del.il6, 'E-selectin'),
                       create.pval.table(esel.del, 'E-selectin')),
                 caption = 'E-selectin vs Days of Delirium',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

\clearpage
\subsubsection{E-Selectin vs. Delirium, Adjusting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{esel_del_results.pdf}}
\caption{Log10(E-selectin) vs. Delirium Duration, Adjusting for Log10(IL-6)}\label{fig:eseldel}
\end{figure}

\subsubsection{E-Selectin vs. Delirium, Not Accounting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{esel_delnoil6_results.pdf}}
\caption{Log10(E-selectin) vs. Delirium Duration, Not Accounting for Log10(IL-6)}\label{fig:eseldelnoil6}
\end{figure}

\clearpage
\subsection{PAI-1 vs. Days of Delirium}
We see no significant association between log(PAI-1) at baseline and delirium duration while
in the hospital, regardless of adjustment for systemic inflammation.

<<printpai1del, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.del.il6, 'PAI-1'),
                       create.pval.table(pai1.del, 'PAI-1')),
                 caption = 'PAI-1 vs Days of Delirium',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

\clearpage
\subsubsection{PAI-1 vs. Delirium, Adjusting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{pai1_del_results.pdf}}
\caption{Log10(PAI-1) vs. Delirium Duration, Adjusting for Log10(IL-6)}\label{fig:pai1del}
\end{figure}

\subsubsection{PAI-1 vs. Delirium, Not Accounting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{pai1_delnoil6_results.pdf}}
\caption{Log10(PAI-1) vs. Delirium Duration, Not Accounting for Log10(IL-6)}\label{fig:pai1delnoil6}
\end{figure}

\clearpage
\subsection{S100B vs. Days of Delirium}
When not accounting for systemic inflammation, we see a nearly significant association between
log10(S100B) and delirium duration; however, once we adjust for systemic inflammation, this
association is no longer present.

<<prints100bdel, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.del.il6, 'S100B'),
                       create.pval.table(s100b.del, 'S100B')),
                 caption = 'S100B vs Days of Delirium',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

\clearpage
\subsubsection{S100B vs. Delirium, Adjusting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{s100b_del_results.pdf}}
\caption{Log10(S100B) vs. Delirium Duration, Adjusting for Log10(IL-6)}\label{fig:s100bdel}
\end{figure}

\subsubsection{S100B vs. Delirium, Not Accounting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{s100b_delnoil6_results.pdf}}
\caption{Log10(S100B) vs. Delirium Duration, Not Accounting for Log10(IL-6)}\label{fig:s100bdelnoil6}
\end{figure}

\clearpage
\subsection{UCHL vs. Days of Delirium}
Higher UCHL at baseline does show an association with fewer days of delirium after accounting for
systemic inflammation; this association is weaker if systemic inflammation is ignored.

<<printuchldel, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.del.il6, 'UCHL'),
                       create.pval.table(uchl.del, 'UCHL')),
                 caption = 'UCHL vs Days of Delirium',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

\clearpage
\subsubsection{UCHL vs. Delirium, Adjusting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{uchl_del_results.pdf}}
\caption{Log10(UCHL) vs. Delirium Duration, Adjusting for Log10(IL-6)}\label{fig:uchldel}
\end{figure}

\subsubsection{UCHL vs. Delirium, Not Accounting for Log10(IL-6)}
\begin{figure}[!h]
{\centering\includegraphics{uchl_delnoil6_results.pdf}}
\caption{Log10(UCHL) vs. Delirium Duration, Not Accounting for Log10(IL-6)}\label{fig:uchldelnoil6}
\end{figure}




\clearpage
\section{Endothelial/BBB Injury Markers vs. Katz ADL}

To examine the association between endothelial/BBB injury at study enrollment and Katz ADL scores
at 3- and 12-month followup, we used negative binomial regression, adjusting for the following
covariates:
\begin{itemize}
\item Charlson score
\item IQCODE score
\item Years of education
\item Functional disability at enrollment \emph{(defined as having a score \textgreater 0 on either the ADL and/or FAQ at baseline)}
% \item Katz ADL at enrollment
% \item FAQ at enrollment
\item Framingham stroke risk score
\item Mean daily modified SOFA (no GCS) during ICU stay
% \item Duration of severe sepsis
\item Duration of delirium
\item Duration of coma
\end{itemize}

(Based on previous analyses, we do not believe assumptions for either linear or proportional odds
logistic regression would be met adequately.)

We allowed for potential interactions between endothelial/BBB markers and both systemic inflammation
(log10(IL-6)) on study day 1 and age at study enrollment. All biomarkers are allowed to have a
nonlinear relationship with the outcome, after being transformed using the log10 transformation in
order to improve model fit and reduce the influence of extremely high values. If the global p-value
for interactions and/or nonlinearity were clearly nonsignificant (p $>$ \Sexpr{format(pcutoff, nsmall = 2)}), those terms are removed from the final model for parsimony. All p-values are
calculated using the \Sexpr{use.method} method. We used multiple imputation to reduce bias from
missing covariates and outcomes.

Age and years of education were both divided by ten in order to make the coefficient easier to
distinguish from zero; this was proving to be a computational issue in models using the original
scale.

For models where interaction terms are kept in the final model, the association of the biomarker is
shown for the 25th, 50th, 75th, and 90th percentiles of the interacting variable.

%' <<needzero>>=
%' ## Is zero-inflation needed? (ignore missing data for this test)
%'
%' pai1.adl.glmnb <- with(mice.func.3, glm.nb(adl.totscore.3 ~ charlson.score + stroke.risk + iqcode.score.e +
%'                            mean.modsofa.icu + icudays.sevseptic.s + del.s.imp + coma.s.imp +
%'                            age.div10 + il6.log10 + rcs(pai1.log10, 3) +
%'                            age.div10:rcs(pai1.log10, 3) + il6.log10:rcs(pai1.log10, 3)))
%'
%' pai1.adl.zeroinfl <- zeroinfl(adl.totscore.3 ~ charlson.score + edu + iqcode.score.e + stroke.risk +
%'                                 mean.modsofa.icu + icudays.sevseptic.s + del.s.imp + coma.s.imp +
%'                                 age.div10 + rcs(il6.log10, 3) + rcs(pai1.log10, 3) +
%'                                 age.div10:rcs(pai1.log10, 3) + rcs(il6.log10, 3):rcs(pai1.log10, 3)                                 | age.div10 + charlson.score + adl.e + mean.modsofa.icu,
%'                               dist = 'negbin',
%'                               data = endo.data[endo.data$func.cohort.3,])
%'
%' vuong(pai1.adl.glmnb, pai1.adl.zeroinfl)
%' @

<<adlmodels>>=
## -- Negative binomial models for outcome = ADL score ---------------------------------------------
## Setup: create vectors with all covariates for models with and without IL-6
func.covars <- c('charlson.score', 'iqcode.score.e', 'edu.div10', 'disabled.e', 'stroke.risk',
                 'mean.modsofa.icu', #'icudays.sevseptic.s',
                 'del.s.imp', 'coma.s.imp',
                 'age.div10', 'marker.log10', 'marker.prime', 'marker.age', 'markerp.age')

func.il6.covars <- c('charlson.score', 'iqcode.score.e', 'edu.div10', 'disabled.e', 'stroke.risk',
                     'mean.modsofa.icu', #'icudays.sevseptic.s',
                     'del.s.imp', 'coma.s.imp',
                     'age.div10', 'il6.log10', 'il6.prime', 'marker.log10', 'marker.prime',
                     'marker.age', 'markerp.age',
                     'marker.il6', 'markerp.il6', 'marker.il6p', 'markerp.il6p')

## -- Fit models for each biomarker ----------------------------------------------------------------
func.iter <- 5000
fit.nb.adl.3 <- function(marker){
  fit.nb.models(covars = func.covars, outcome = 'adl.totscore.3', impobj = mice.3,
                maxiter = func.iter, marker = marker)
}

fit.nb.adl.il6.3 <- function(marker){
  fit.nb.models(covars = func.il6.covars, outcome = 'adl.totscore.3', impobj = mice.3,
                maxiter = func.iter, marker = marker)
}

fit.nb.adl.12 <- function(marker){
  fit.nb.models(covars = func.covars, outcome = 'adl.totscore.12', impobj = mice.12,
                maxiter = func.iter, marker = marker)
}

fit.nb.adl.il6.12 <- function(marker){
  fit.nb.models(covars = func.il6.covars, outcome = 'adl.totscore.12', impobj = mice.12,
                maxiter = func.iter, marker = marker)
}

bdnf.adl.3 <- fit.nb.adl.3('bdnf')
bdnf.adl.il6.3 <- fit.nb.adl.il6.3('bdnf')
bdnf.adl.12 <- fit.nb.adl.12('bdnf')
bdnf.adl.il6.12 <- fit.nb.adl.il6.12('bdnf')

esel.adl.3 <- fit.nb.adl.3('esel')
esel.adl.il6.3 <- fit.nb.adl.il6.3('esel')
esel.adl.12 <- fit.nb.adl.12('esel')
esel.adl.il6.12 <- fit.nb.adl.il6.12('esel')

pai1.adl.3 <- fit.nb.adl.3('pai1')
pai1.adl.il6.3 <- fit.nb.adl.il6.3('pai1')
pai1.adl.12 <- fit.nb.adl.12('pai1')
pai1.adl.il6.12 <- fit.nb.adl.il6.12('pai1')

s100b.adl.3 <- fit.nb.adl.3('s100b')
s100b.adl.il6.3 <- fit.nb.adl.il6.3('s100b')
s100b.adl.12 <- fit.nb.adl.12('s100b')
s100b.adl.il6.12 <- fit.nb.adl.il6.12('s100b')

uchl.adl.3 <- fit.nb.adl.3('uchl')
uchl.adl.il6.3 <- fit.nb.adl.il6.3('uchl')
uchl.adl.12 <- fit.nb.adl.12('uchl')
uchl.adl.il6.12 <- fit.nb.adl.il6.12('uchl')

## -- Create figures for ADL -----------------------------------------------------------------------
nb.figures.adl <- function(nbobj, marker, xstring, time = c(3, 12)){
  nb.figures(nbobj = nbobj, marker = marker, xstring = xstring,
             ystring = paste('Katz ADL Score,', time, 'Months'))
}

bdnf.adl.3.fig <-
  nb.figures.adl(nbobj = bdnf.adl.3, marker = 'bdnf', xstring = 'BDNF', time = 3)
esel.adl.3.fig <-
  nb.figures.adl(nbobj = esel.adl.3, marker = 'esel', xstring = 'E-selectin', time = 3)
pai1.adl.3.fig <-
  nb.figures.adl(nbobj = pai1.adl.3, marker = 'pai1', xstring = 'PAI-1', time = 3)
s100b.adl.3.fig <-
  nb.figures.adl(nbobj = s100b.adl.3, marker = 's100b', xstring = 'S100B', time = 3)
uchl.adl.3.fig <-
  nb.figures.adl(nbobj = uchl.adl.3, marker = 'uchl', xstring = 'UCHL', time = 3)

bdnf.adl.12.fig <-
  nb.figures.adl(nbobj = bdnf.adl.12, marker = 'bdnf', xstring = 'BDNF', time = 12)
esel.adl.12.fig <-
  nb.figures.adl(nbobj = esel.adl.12, marker = 'esel', xstring = 'E-selectin', time = 12)
pai1.adl.12.fig <-
  nb.figures.adl(nbobj = pai1.adl.12, marker = 'pai1', xstring = 'PAI-1', time = 12)
s100b.adl.12.fig <-
  nb.figures.adl(nbobj = s100b.adl.12, marker = 's100b', xstring = 'S100B', time = 12)
uchl.adl.12.fig <-
  nb.figures.adl(nbobj = uchl.adl.12, marker = 'uchl', xstring = 'UCHL', time = 12)

bdnf.adl.il6.3.fig <-
  nb.figures.adl(nbobj = bdnf.adl.il6.3, marker = 'bdnf', xstring = 'BDNF', time = 3)
esel.adl.il6.3.fig <-
  nb.figures.adl(nbobj = esel.adl.il6.3, marker = 'esel', xstring = 'E-selectin', time = 3)
pai1.adl.il6.3.fig <-
  nb.figures.adl(nbobj = pai1.adl.il6.3, marker = 'pai1', xstring = 'PAI-1', time = 3)
s100b.adl.il6.3.fig <-
  nb.figures.adl(nbobj = s100b.adl.il6.3, marker = 's100b', xstring = 'S100B', time = 3)
uchl.adl.il6.3.fig <-
  nb.figures.adl(nbobj = uchl.adl.il6.3, marker = 'uchl', xstring = 'UCHL', time = 3)

bdnf.adl.il6.12.fig <-
  nb.figures.adl(nbobj = bdnf.adl.il6.12, marker = 'bdnf', xstring = 'BDNF', time = 12)
esel.adl.il6.12.fig <-
  nb.figures.adl(nbobj = esel.adl.il6.12, marker = 'esel', xstring = 'E-selectin', time = 12)
pai1.adl.il6.12.fig <-
  nb.figures.adl(nbobj = pai1.adl.il6.12, marker = 'pai1', xstring = 'PAI-1', time = 12)
s100b.adl.il6.12.fig <-
  nb.figures.adl(nbobj = s100b.adl.il6.12, marker = 's100b', xstring = 'S100B', time = 12)
uchl.adl.il6.12.fig <-
  nb.figures.adl(nbobj = uchl.adl.il6.12, marker = 'uchl', xstring = 'UCHL', time = 12)

pdf(file = 'bdnf_adl_results_3.pdf', width = 8, height = bdnf.adl.il6.3.fig$height)
multiplot(plotlist = bdnf.adl.il6.3.fig$fig, layout = bdnf.adl.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_adlnoil6_results_3.pdf', width = 8, height = bdnf.adl.3.fig$height)
multiplot(plotlist = bdnf.adl.3.fig$fig, layout = bdnf.adl.3.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_adl_results_12.pdf', width = 8, height = bdnf.adl.il6.12.fig$height)
multiplot(plotlist = bdnf.adl.il6.12.fig$fig, layout = bdnf.adl.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_adlnoil6_results_12.pdf', width = 8, height = bdnf.adl.12.fig$height)
multiplot(plotlist = bdnf.adl.12.fig$fig, layout = bdnf.adl.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_adl_results_3.pdf', width = 8, height = esel.adl.il6.3.fig$height)
multiplot(plotlist = esel.adl.il6.3.fig$fig, layout = esel.adl.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_adlnoil6_results_3.pdf', width = 8, height = esel.adl.3.fig$height)
multiplot(plotlist = esel.adl.3.fig$fig, layout = esel.adl.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_adl_results_12.pdf', width = 8, height = esel.adl.il6.12.fig$height)
multiplot(plotlist = esel.adl.il6.12.fig$fig, layout = esel.adl.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_adlnoil6_results_12.pdf', width = 8, height = esel.adl.12.fig$height)
multiplot(plotlist = esel.adl.12.fig$fig, layout = esel.adl.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_adl_results_3.pdf', width = 8, height = pai1.adl.il6.3.fig$height)
multiplot(plotlist = pai1.adl.il6.3.fig$fig, layout = pai1.adl.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_adlnoil6_results_3.pdf', width = 8, height = pai1.adl.3.fig$height)
multiplot(plotlist = pai1.adl.3.fig$fig, layout = pai1.adl.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_adl_results_12.pdf', width = 8, height = pai1.adl.il6.12.fig$height)
multiplot(plotlist = pai1.adl.il6.12.fig$fig, layout = pai1.adl.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_adlnoil6_results_12.pdf', width = 8, height = pai1.adl.12.fig$height)
multiplot(plotlist = pai1.adl.12.fig$fig, layout = pai1.adl.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_adl_results_3.pdf', width = 8, height = s100b.adl.il6.3.fig$height)
multiplot(plotlist = s100b.adl.il6.3.fig$fig, layout = s100b.adl.il6.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_adlnoil6_results_3.pdf', width = 8, height = s100b.adl.3.fig$height)
multiplot(plotlist = s100b.adl.3.fig$fig, layout = s100b.adl.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_adl_results_12.pdf', width = 8, height = s100b.adl.il6.12.fig$height)
multiplot(plotlist = s100b.adl.il6.12.fig$fig, layout = s100b.adl.il6.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_adlnoil6_results_12.pdf', width = 8, height = s100b.adl.12.fig$height)
multiplot(plotlist = s100b.adl.12.fig$fig, layout = s100b.adl.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_adl_results_3.pdf', width = 8, height = uchl.adl.il6.3.fig$height)
multiplot(plotlist = uchl.adl.il6.3.fig$fig, layout = uchl.adl.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_adlnoil6_results_3.pdf', width = 8, height = uchl.adl.3.fig$height)
multiplot(plotlist = uchl.adl.3.fig$fig, layout = uchl.adl.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_adl_results_12.pdf', width = 8, height = uchl.adl.il6.12.fig$height)
multiplot(plotlist = uchl.adl.il6.12.fig$fig, layout = uchl.adl.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_adlnoil6_results_12.pdf', width = 8, height = uchl.adl.12.fig$height)
multiplot(plotlist = uchl.adl.12.fig$fig, layout = uchl.adl.12.fig$layoutmat)
dev.off()

@

\clearpage
\subsection{BDNF vs. Katz ADL}
We see a nearly significant overall association between log10(BDNF) at baseline and Katz ADL scores
at both 3 and 12 months after discharge. This association is modified by age and IL-6 at 3 months;
at 12 months, the association between log10(BDNF) and ADL scores is modified by age when accounting
for IL-6, but not without accounting for IL-6.

<<printbdnfadl, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.adl.il6.3, 'BDNF'),
                       create.pval.table(bdnf.adl.3, 'BDNF')),
                 caption = 'BDNF vs 3-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(bdnf.adl.il6.12, 'BDNF'),
                       create.pval.table(bdnf.adl.12, 'BDNF')),
                 caption = 'BDNF vs 12-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{bdnf_adl_results_3.pdf}}
\caption{Log10(BDNF) vs. Katz ADL at 3 Months, Adjusting for Log10(IL-6)}\label{fig:bdnfadl3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_adlnoil6_results_3.pdf}}
\caption{Log10(BDNF) vs. Katz ADL at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnfadl3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{bdnf_adl_results_12.pdf}}
\caption{Log10(BDNF) vs. Katz ADL at 12 Months, Adjusting for Log10(IL-6)}\label{fig:bdnfadl12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_adlnoil6_results_12.pdf}}
\caption{Log10(BDNF) vs. Katz ADL at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnfadl12}
\end{figure}

\clearpage
\subsection{E-selectin vs. Katz ADL}
We see a significant overall association, modified by age, between log10(E-selectin) at baseline and
Katz ADL scores 3 months after discharge. This association is no longer present by 12-month
followup.

<<printeseladl, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.adl.il6.3, 'E-selectin'),
                       create.pval.table(esel.adl.3, 'E-selectin')),
                 caption = 'E-selectin vs 3-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(esel.adl.il6.12, 'E-selectin'),
                       create.pval.table(esel.adl.12, 'E-selectin')),
                 caption = 'E-selectin vs 12-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{esel_adl_results_3.pdf}}
\caption{Log10(E-selectin) vs. Katz ADL at 3 Months, Adjusting for Log10(IL-6)}\label{fig:eseladl3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{esel_adlnoil6_results_3.pdf}}
\caption{Log10(E-selectin) vs. Katz ADL at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:eseladl3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{esel_adl_results_12.pdf}}
\caption{Log10(E-selectin) vs. Katz ADL at 12 Months, Adjusting for Log10(IL-6)}\label{fig:eseladl12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{esel_adlnoil6_results_12.pdf}}
\caption{Log10(E-selectin) vs. Katz ADL at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:eseladl12}
\end{figure}

\clearpage
\subsection{PAI-1 vs. Katz ADL}
We see no significant association between PAI-1 and ADL scores at either time point.

<<printpai1adl, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.adl.il6.3, 'PAI-1'),
                       create.pval.table(pai1.adl.3, 'PAI-1')),
                 caption = 'PAI-1 vs 3-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(pai1.adl.il6.12, 'BDNF'),
                       create.pval.table(pai1.adl.12, 'BDNF')),
                 caption = 'PAI-1 vs 12-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{pai1_adl_results_3.pdf}}
\caption{Log10(PAI-1) vs. Katz ADL at 3 Months, Adjusting for Log10(IL-6)}\label{fig:pai1adl3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{pai1_adlnoil6_results_3.pdf}}
\caption{Log10(PAI-1) vs. Katz ADL at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1adl3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{pai1_adl_results_12.pdf}}
\caption{Log10(PAI-1) vs. Katz ADL at 12 Months, Adjusting for Log10(IL-6)}\label{fig:pai1adl12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{pai1_adlnoil6_results_12.pdf}}
\caption{Log10(PAI-1) vs. Katz ADL at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1adl12}
\end{figure}

\clearpage
\subsection{S100B vs. Katz ADL}
We see a marginal association between log10(S100B) at baseline and Katz ADL scores 3 months after
discharge; this association is no longer present at 12-month followup.

<<prints100badl, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.adl.il6.3, 'S100B'),
                       create.pval.table(s100b.adl.3, 'S100B')),
                 caption = 'S100B vs 3-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(s100b.adl.il6.12, 'S100B'),
                       create.pval.table(s100b.adl.12, 'S100B')),
                 caption = 'S100B vs 12-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{s100b_adl_results_3.pdf}}
\caption{Log10(S100B) vs. Katz ADL at 3 Months, Adjusting for Log10(IL-6)}\label{fig:s100badl3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{s100b_adlnoil6_results_3.pdf}}
\caption{Log10(S100B) vs. Katz ADL at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:s100badl3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{s100b_adl_results_12.pdf}}
\caption{Log10(S100B) vs. Katz ADL at 12 Months, Adjusting for Log10(IL-6)}\label{fig:s100badl12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{s100b_adlnoil6_results_12.pdf}}
\caption{Log10(S100B) vs. Katz ADL at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:s100badl12}
\end{figure}

\clearpage
\subsection{UCHL vs. Katz ADL}
We see no association between log10(UCHL) at baseline and Katz ADL scores at 3-month followup, but
there is a marginal or significant association at 12 months, depending on whether inflammation is
adjusted for.

<<printuchladl, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.adl.il6.3, 'UCHL'),
                       create.pval.table(uchl.adl.3, 'UCHL')),
                 caption = 'UCHL vs 3-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(uchl.adl.il6.12, 'UCHL'),
                       create.pval.table(uchl.adl.12, 'UCHL')),
                 caption = 'UCHL vs 12-Month ADL',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{uchl_adl_results_3.pdf}}
\caption{Log10(UCHL) vs. Katz ADL at 3 Months, Adjusting for Log10(IL-6)}\label{fig:uchladl3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{uchl_adlnoil6_results_3.pdf}}
\caption{Log10(UCHL) vs. Katz ADL at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:uchladl3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{uchl_adl_results_12.pdf}}
\caption{Log10(UCHL) vs. Katz ADL at 12 Months, Adjusting for Log10(IL-6)}\label{fig:uchladl12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_adlnoil6_results_12.pdf}}
\caption{Log10(UCHL) vs. Katz ADL at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:uchladl12}
\end{figure}


\clearpage
\section{Endothelial/BBB Injury Markers vs. Functional Activities Questionnaire}

To examine the association between endothelial/BBB injury at study enrollment and FAQ scores
at 3- and 12-month followup, we used negative binomial regression, adjusting for the following
covariates:
\begin{itemize}
\item Charlson score
\item IQCODE score
\item Years of education
\item Functional disability at enrollment \emph{(defined as having a score \textgreater 0 on either the ADL and/or FAQ at baseline)}
% \item Katz ADL at enrollment
% \item FAQ at enrollment
\item Framingham stroke risk score
\item Mean daily modified SOFA (no GCS) during ICU stay
% \item Duration of severe sepsis
\item Duration of delirium
\item Duration of coma
\end{itemize}

(Based on previous analyses, we do not believe assumptions for either linear or proportional odds
logistic regression would be met adequately.)

We allowed for potential interactions between endothelial/BBB markers and both systemic inflammation
(log10(IL-6)) on study day 1 and age at study enrollment. All biomarkers are allowed to have a
nonlinear relationship with the outcome, after being transformed using the log10 transformation in
order to improve model fit and reduce the influence of extremely high values. If the global p-value
for interactions and/or nonlinearity were clearly nonsignificant (p $>$ \Sexpr{format(pcutoff, nsmall = 2)}), those terms are removed from the final model for parsimony. All p-values are
calculated using the \Sexpr{use.method} method. We used multiple imputation to reduce bias from
missing covariates and outcomes.

Age and years of education were both divided by ten in order to make the coefficient easier to
distinguish from zero; this was proving to be a computational issue in models using the original
scale.

For models where interaction terms are kept in the final model, the association of the biomarker is
shown for the 25th, 50th, 75th, and 90th percentiles of the interacting variable.

<<faqmodels>>=
fit.nb.faq.3 <- function(marker){
  fit.nb.models(covars = func.covars, outcome = 'faq.rdscore.3', impobj = mice.3,
                maxiter = func.iter, marker = marker)
}

fit.nb.faq.il6.3 <- function(marker){
  fit.nb.models(covars = func.il6.covars, outcome = 'faq.rdscore.3', impobj = mice.3,
                maxiter = func.iter, marker = marker)
}

fit.nb.faq.12 <- function(marker){
  fit.nb.models(covars = func.covars, outcome = 'faq.rdscore.12', impobj = mice.12,
                maxiter = func.iter, marker = marker)
}

fit.nb.faq.il6.12 <- function(marker){
  fit.nb.models(covars = func.il6.covars, outcome = 'faq.rdscore.12', impobj = mice.12,
                maxiter = func.iter, marker = marker)
}

bdnf.faq.3 <- fit.nb.faq.3('bdnf')
bdnf.faq.il6.3 <- fit.nb.faq.il6.3('bdnf')
bdnf.faq.12 <- fit.nb.faq.12('bdnf')
bdnf.faq.il6.12 <- fit.nb.faq.il6.12('bdnf')

esel.faq.3 <- fit.nb.faq.3('esel')
esel.faq.il6.3 <- fit.nb.faq.il6.3('esel')
esel.faq.12 <- fit.nb.faq.12('esel')
esel.faq.il6.12 <- fit.nb.faq.il6.12('esel')

pai1.faq.3 <- fit.nb.faq.3('pai1')
pai1.faq.il6.3 <- fit.nb.faq.il6.3('pai1')
pai1.faq.12 <- fit.nb.faq.12('pai1')
pai1.faq.il6.12 <- fit.nb.faq.il6.12('pai1')

s100b.faq.3 <- fit.nb.faq.3('s100b')
s100b.faq.il6.3 <- fit.nb.faq.il6.3('s100b')
s100b.faq.12 <- fit.nb.faq.12('s100b')
s100b.faq.il6.12 <- fit.nb.faq.il6.12('s100b')

uchl.faq.3 <- fit.nb.faq.3('uchl')
uchl.faq.il6.3 <- fit.nb.faq.il6.3('uchl')
uchl.faq.12 <- fit.nb.faq.12('uchl')
uchl.faq.il6.12 <- fit.nb.faq.il6.12('uchl')

## -- Create figures for FAQ -----------------------------------------------------------------------
nb.figures.faq <- function(nbobj, marker, xstring, time = c(3, 12)){
  nb.figures(nbobj = nbobj, marker = marker, xstring = xstring,
             ystring = paste('FAQ Score,', time, 'Months'))
}

bdnf.faq.3.fig <-
  nb.figures.faq(nbobj = bdnf.faq.3, marker = 'bdnf', xstring = 'BDNF', time = 3)
esel.faq.3.fig <-
  nb.figures.faq(nbobj = esel.faq.3, marker = 'esel', xstring = 'E-selectin', time = 3)
pai1.faq.3.fig <-
  nb.figures.faq(nbobj = pai1.faq.3, marker = 'pai1', xstring = 'PAI-1', time = 3)
s100b.faq.3.fig <-
  nb.figures.faq(nbobj = s100b.faq.3, marker = 's100b', xstring = 'S100B', time = 3)
uchl.faq.3.fig <-
  nb.figures.faq(nbobj = uchl.faq.3, marker = 'uchl', xstring = 'UCHL', time = 3)

bdnf.faq.12.fig <-
  nb.figures.faq(nbobj = bdnf.faq.12, marker = 'bdnf', xstring = 'BDNF', time = 12)
esel.faq.12.fig <-
  nb.figures.faq(nbobj = esel.faq.12, marker = 'esel', xstring = 'E-selectin', time = 12)
pai1.faq.12.fig <-
  nb.figures.faq(nbobj = pai1.faq.12, marker = 'pai1', xstring = 'PAI-1', time = 12)
s100b.faq.12.fig <-
  nb.figures.faq(nbobj = s100b.faq.12, marker = 's100b', xstring = 'S100B', time = 12)
uchl.faq.12.fig <-
  nb.figures.faq(nbobj = uchl.faq.12, marker = 'uchl', xstring = 'UCHL', time = 12)

bdnf.faq.il6.3.fig <-
  nb.figures.faq(nbobj = bdnf.faq.il6.3, marker = 'bdnf', xstring = 'BDNF', time = 3)
esel.faq.il6.3.fig <-
  nb.figures.faq(nbobj = esel.faq.il6.3, marker = 'esel', xstring = 'E-selectin', time = 3)
pai1.faq.il6.3.fig <-
  nb.figures.faq(nbobj = pai1.faq.il6.3, marker = 'pai1', xstring = 'PAI-1', time = 3)
s100b.faq.il6.3.fig <-
  nb.figures.faq(nbobj = s100b.faq.il6.3, marker = 's100b', xstring = 'S100B', time = 3)
uchl.faq.il6.3.fig <-
  nb.figures.faq(nbobj = uchl.faq.il6.3, marker = 'uchl', xstring = 'UCHL', time = 3)

bdnf.faq.il6.12.fig <-
  nb.figures.faq(nbobj = bdnf.faq.il6.12, marker = 'bdnf', xstring = 'BDNF', time = 12)
esel.faq.il6.12.fig <-
  nb.figures.faq(nbobj = esel.faq.il6.12, marker = 'esel', xstring = 'E-selectin', time = 12)
pai1.faq.il6.12.fig <-
  nb.figures.faq(nbobj = pai1.faq.il6.12, marker = 'pai1', xstring = 'PAI-1', time = 12)
s100b.faq.il6.12.fig <-
  nb.figures.faq(nbobj = s100b.faq.il6.12, marker = 's100b', xstring = 'S100B', time = 12)
uchl.faq.il6.12.fig <-
  nb.figures.faq(nbobj = uchl.faq.il6.12, marker = 'uchl', xstring = 'UCHL', time = 12)

pdf(file = 'bdnf_faq_results_3.pdf', width = 8, height = bdnf.faq.il6.3.fig$height)
multiplot(plotlist = bdnf.faq.il6.3.fig$fig, layout = bdnf.faq.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_faqnoil6_results_3.pdf', width = 8, height = bdnf.faq.3.fig$height)
multiplot(plotlist = bdnf.faq.3.fig$fig, layout = bdnf.faq.3.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_faq_results_12.pdf', width = 8, height = bdnf.faq.il6.12.fig$height)
multiplot(plotlist = bdnf.faq.il6.12.fig$fig, layout = bdnf.faq.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'bdnf_faqnoil6_results_12.pdf', width = 8, height = bdnf.faq.12.fig$height)
multiplot(plotlist = bdnf.faq.12.fig$fig, layout = bdnf.faq.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_faq_results_3.pdf', width = 8, height = esel.faq.il6.3.fig$height)
multiplot(plotlist = esel.faq.il6.3.fig$fig, layout = esel.faq.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_faqnoil6_results_3.pdf', width = 8, height = esel.faq.3.fig$height)
multiplot(plotlist = esel.faq.3.fig$fig, layout = esel.faq.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_faq_results_12.pdf', width = 8, height = esel.faq.il6.12.fig$height)
multiplot(plotlist = esel.faq.il6.12.fig$fig, layout = esel.faq.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_faqnoil6_results_12.pdf', width = 8, height = esel.faq.12.fig$height)
multiplot(plotlist = esel.faq.12.fig$fig, layout = esel.faq.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_faq_results_3.pdf', width = 8, height = pai1.faq.il6.3.fig$height)
multiplot(plotlist = pai1.faq.il6.3.fig$fig, layout = pai1.faq.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_faqnoil6_results_3.pdf', width = 8, height = pai1.faq.3.fig$height)
multiplot(plotlist = pai1.faq.3.fig$fig, layout = pai1.faq.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_faq_results_12.pdf', width = 8, height = pai1.faq.il6.12.fig$height)
multiplot(plotlist = pai1.faq.il6.12.fig$fig, layout = pai1.faq.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_faqnoil6_results_12.pdf', width = 8, height = pai1.faq.12.fig$height)
multiplot(plotlist = pai1.faq.12.fig$fig, layout = pai1.faq.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_faq_results_3.pdf', width = 8, height = s100b.faq.il6.3.fig$height)
multiplot(plotlist = s100b.faq.il6.3.fig$fig, layout = s100b.faq.il6.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_faqnoil6_results_3.pdf', width = 8, height = s100b.faq.3.fig$height)
multiplot(plotlist = s100b.faq.3.fig$fig, layout = s100b.faq.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_faq_results_12.pdf', width = 8, height = s100b.faq.il6.12.fig$height)
multiplot(plotlist = s100b.faq.il6.12.fig$fig, layout = s100b.faq.il6.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_faqnoil6_results_12.pdf', width = 8, height = s100b.faq.12.fig$height)
multiplot(plotlist = s100b.faq.12.fig$fig, layout = s100b.faq.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_faq_results_3.pdf', width = 8, height = uchl.faq.il6.3.fig$height)
multiplot(plotlist = uchl.faq.il6.3.fig$fig, layout = uchl.faq.il6.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_faqnoil6_results_3.pdf', width = 8, height = uchl.faq.3.fig$height)
multiplot(plotlist = uchl.faq.3.fig$fig, layout = uchl.faq.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_faq_results_12.pdf', width = 8, height = uchl.faq.il6.12.fig$height)
multiplot(plotlist = uchl.faq.il6.12.fig$fig, layout = uchl.faq.il6.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_faqnoil6_results_12.pdf', width = 8, height = uchl.faq.12.fig$height)
multiplot(plotlist = uchl.faq.12.fig$fig, layout = uchl.faq.12.fig$layoutmat)
dev.off()

@

\clearpage
\subsection{BDNF vs. Functional Activities Questionnaire}
We see no significant association between log10(BDNF) and FAQ scores at either time point.

<<printbdnffaq, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.faq.il6.3, 'BDNF'),
                       create.pval.table(bdnf.faq.3, 'BDNF')),
                 caption = 'BDNF vs 3-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(bdnf.faq.il6.12, 'BDNF'),
                       create.pval.table(bdnf.faq.12, 'BDNF')),
                 caption = 'BDNF vs 12-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{bdnf_faq_results_3.pdf}}
\caption{Log10(BDNF) vs. FAQ at 3 Months, Adjusting for Log10(IL-6)}\label{fig:bdnffaq3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_faqnoil6_results_3.pdf}}
\caption{Log10(BDNF) vs. FAQ at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnffaq3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{bdnf_faq_results_12.pdf}}
\caption{Log10(BDNF) vs. FAQ at 12 Months, Adjusting for Log10(IL-6)}\label{fig:bdnffaq12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_faqnoil6_results_12.pdf}}
\caption{Log10(BDNF) vs. FAQ at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnffaq12}
\end{figure}

\clearpage
\subsection{E-selectin vs. Functional Activities Questionnaire}
We see no significant association between log10(E-selectin) and FAQ scores at either time point.

<<printeselfaq, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.faq.il6.3, 'E-selectin'),
                       create.pval.table(esel.faq.3, 'E-selectin')),
                 caption = 'E-selectin vs 3-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(esel.faq.il6.12, 'E-selectin'),
                       create.pval.table(esel.faq.12, 'E-selectin')),
                 caption = 'E-selectin vs 12-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{esel_faq_results_3.pdf}}
\caption{Log10(E-selectin) vs. FAQ at 3 Months, Adjusting for Log10(IL-6)}\label{fig:eselfaq3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{esel_faqnoil6_results_3.pdf}}
\caption{Log10(E-selectin) vs. FAQ at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:eselfaq3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{esel_faq_results_12.pdf}}
\caption{Log10(E-selectin) vs. FAQ at 12 Months, Adjusting for Log10(IL-6)}\label{fig:eselfaq12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{esel_faqnoil6_results_12.pdf}}
\caption{Log10(E-selectin) vs. FAQ at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:eselfaq12}
\end{figure}

\clearpage
\subsection{PAI-1 vs. Functional Activities Questionnaire}
We see no significant association between PAI-1 and FAQ scores at either time point.

<<printpai1faq, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.faq.il6.3, 'PAI-1'),
                       create.pval.table(pai1.faq.3, 'PAI-1')),
                 caption = 'PAI-1 vs 3-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(pai1.faq.il6.12, 'BDNF'),
                       create.pval.table(pai1.faq.12, 'BDNF')),
                 caption = 'PAI-1 vs 12-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{pai1_faq_results_3.pdf}}
\caption{Log10(PAI-1) vs. FAQ at 3 Months, Adjusting for Log10(IL-6)}\label{fig:pai1faq3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{pai1_faqnoil6_results_3.pdf}}
\caption{Log10(PAI-1) vs. FAQ at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1faq3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{pai1_faq_results_12.pdf}}
\caption{Log10(PAI-1) vs. FAQ at 12 Months, Adjusting for Log10(IL-6)}\label{fig:pai1faq12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{pai1_faqnoil6_results_12.pdf}}
\caption{Log10(PAI-1) vs. FAQ at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1faq12}
\end{figure}

\clearpage
\subsection{S100B vs. Functional Activities Questionnaire}
We see no significant association between log10(S100B) and FAQ scores at either time point.

<<prints100bfaq, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.faq.il6.3, 'S100B'),
                       create.pval.table(s100b.faq.3, 'S100B')),
                 caption = 'S100B vs 3-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(s100b.faq.il6.12, 'S100B'),
                       create.pval.table(s100b.faq.12, 'S100B')),
                 caption = 'S100B vs 12-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{s100b_faq_results_3.pdf}}
\caption{Log10(S100B) vs. FAQ at 3 Months, Adjusting for Log10(IL-6)}\label{fig:s100bfaq3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{s100b_faqnoil6_results_3.pdf}}
\caption{Log10(S100B) vs. FAQ at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:s100bfaq3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{s100b_faq_results_12.pdf}}
\caption{Log10(S100B) vs. FAQ at 12 Months, Adjusting for Log10(IL-6)}\label{fig:s100bfaq12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{s100b_faqnoil6_results_12.pdf}}
\caption{Log10(S100B) vs. FAQ at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:s100bfaq12}
\end{figure}

\clearpage
\subsection{UCHL vs. Functional Activities Questionnaire}
We see no significant association between log10(UCHL) and FAQ scores at either time point. At
12-month followup, UCHL and FAQ scores are nearly significantly associated if we do not account for
IL-6, but after accounting for inflammation, this association is no longer significant.

<<printuchlfaq, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.faq.il6.3, 'UCHL'),
                       create.pval.table(uchl.faq.3, 'UCHL')),
                 caption = 'UCHL vs 3-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

latex.pval.table(cbind(create.pval.table(uchl.faq.il6.12, 'UCHL'),
                       create.pval.table(uchl.faq.12, 'UCHL')),
                 caption = 'UCHL vs 12-Month FAQ',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))

@

\begin{figure}[!h]
{\centering\includegraphics{uchl_faq_results_3.pdf}}
\caption{Log10(UCHL) vs. FAQ at 3 Months, Adjusting for Log10(IL-6)}\label{fig:uchlfaq3}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{uchl_faqnoil6_results_3.pdf}}
\caption{Log10(UCHL) vs. FAQ at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:uchlfaq3}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{uchl_faq_results_12.pdf}}
\caption{Log10(UCHL) vs. FAQ at 12 Months, Adjusting for Log10(IL-6)}\label{fig:uchlfaq12}
\end{figure}
\begin{figure}[!h]
{\centering\includegraphics{bdnf_faqnoil6_results_12.pdf}}
\caption{Log10(UCHL) vs. FAQ at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:uchlfaq12}
\end{figure}


\clearpage
\section{Endothelial/BBB Injury Markers vs. RBANS Global Score}

To examine the association between endothelial/BBB injury at study enrollment and RBANS global
scores at 3- and 12-month followup, we used linear regression, adjusting for the following
covariates:
\begin{itemize}
\item Charlson score
\item Years of education
\item IQCODE score
\item Framingham stroke risk score
\item Mean daily modified SOFA (no GCS) during ICU stay
\item Duration of severe sepsis
\item Duration of delirium
\item Duration of coma
\end{itemize}

We checked residual vs. fitted and QQ plots to ensure that model assumptions were met adequately.

All continuous variables, including biomarkers, were initially allowed to have a nonlinear
relationship with the outcome, with the exception of IQCODE, which had too little variability to
allow for splines. If the global p-value for nonlinearity was clearly nonsignificant
(p $>$ \Sexpr{pcutoff}), nonlinear terms were removed from the model for parsimony. We allowed for
potential interactions between endothelial/BBB markers and both systemic inflammation (log10(IL-6))
on study day 1 and age at study enrollment. If the global p-value for interactions were clearly nonsignificant (p $>$ \Sexpr{format(pcutoff, nsmall = 2)}), those terms are removed from the final
model for parsimony. All biomarkers are transformed using the log10 transformation in order to improve model fit and reduce the influence of extremely high values. All p-values are calculated using the Wald method.

We used multiple imputation to reduce bias from missing data; there is very little missing covariate
data, but there is more data missing from outcomes, which could bias our results since the patients
who would perform the worst are probably less likely to complete testing.

For models where interaction terms are kept in the final model, the association of the biomarker is
shown for the 25th, 50th, 75th, and 90th percentiles of the interacting variable.

<<rbansmodels>>=
## Formula for full delirium model, subbing "marker" in place of actual biomarker prefix
cog.righthand <- "rcs(charlson.score, 3) + rcs(edu.div10, 3) + iqcode.score.e + rcs(stroke.risk, 3) + rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(age.div10, 3)*rcs(marker.log10, 3) + rcs(il6.log10, 3)*rcs(marker.log10, 3)"

## Set datadist for ols() to work
dd <- datadist(endo.data); options(datadist = 'dd')

## 3-month models
fit.rbans.models.3 <- function(marker){
  fit.ols.models(formula.right = cog.righthand,
                 outcome = 'rbans.global.score.3',
                 impobj = areg.3,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.3',
                 marker = marker)
}
bdnf.rbans.3 <- fit.rbans.models.3('bdnf')
esel.rbans.3 <- fit.rbans.models.3('esel')
pai1.rbans.3 <- fit.rbans.models.3('pai1')
s100b.rbans.3 <- fit.rbans.models.3('s100b')
uchl.rbans.3 <- fit.rbans.models.3('uchl')

# ## Check assumptions of final models
# ols.diagnostics(model.obj.ma = bdnf.rbans.3$final.mod, labeltext = 'BDNF vs RBANS, 3m')
# ols.diagnostics(model.obj.ma = esel.rbans.3$final.mod, labeltext = 'E-selectin vs RBANS, 3m')
# ols.diagnostics(model.obj.ma = pai1.rbans.3$final.mod, labeltext = 'PAI-1 vs RBANS, 3m')
# ols.diagnostics(model.obj.ma = s100b.rbans.3$final.mod, labeltext = 'S100B vs RBANS, 3m')
# ols.diagnostics(model.obj.ma = uchl.rbans.3$final.mod, labeltext = 'UCHL vs RBANS, 3m')

ols.figures.rbans.3 <- function(olslist, xvar, xstring){
  ols.figures(olslist = olslist, xvar = xvar, xstring = xstring, ystring = 'RBANS, 3 Months')
}
bdnf.rbans.3.fig <-
  ols.figures.rbans.3(olslist = 'bdnf.rbans.3', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.rbans.3.fig <-
  ols.figures.rbans.3(olslist = 'esel.rbans.3', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.rbans.3.fig <-
  ols.figures.rbans.3(olslist = 'pai1.rbans.3', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.rbans.3.fig <-
  ols.figures.rbans.3(olslist = 's100b.rbans.3', xvar = 's100b.log10', xstring = 'S100B')
uchl.rbans.3.fig <-
  ols.figures.rbans.3(olslist = 'uchl.rbans.3', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_rbans3_results.pdf', width = 8, height = bdnf.rbans.3.fig$height)
multiplot(plotlist = bdnf.rbans.3.fig$fig, layout = bdnf.rbans.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_rbans3_results.pdf', width = 8, height = esel.rbans.3.fig$height)
multiplot(plotlist = esel.rbans.3.fig$fig, layout = esel.rbans.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_rbans3_results.pdf', width = 8, height = pai1.rbans.3.fig$height)
multiplot(plotlist = pai1.rbans.3.fig$fig, layout = pai1.rbans.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_rbans3_results.pdf', width = 8, height = s100b.rbans.3.fig$height)
multiplot(plotlist = s100b.rbans.3.fig$fig, layout = s100b.rbans.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_rbans3_results.pdf', width = 8, height = uchl.rbans.3.fig$height)
multiplot(plotlist = uchl.rbans.3.fig$fig, layout = uchl.rbans.3.fig$layoutmat)
dev.off()

## 12-month models
fit.rbans.models.12 <- function(marker){
  fit.ols.models(formula.right = cog.righthand,
                 outcome = 'rbans.global.score.12',
                 impobj = areg.12,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.12',
                 marker = marker)
}
bdnf.rbans.12 <- fit.rbans.models.12('bdnf')
esel.rbans.12 <- fit.rbans.models.12('esel')
pai1.rbans.12 <- fit.rbans.models.12('pai1')
s100b.rbans.12 <- fit.rbans.models.12('s100b')
uchl.rbans.12 <- fit.rbans.models.12('uchl')

# ## Check assumptions of final models
# ols.diagnostics(model.obj.ma = bdnf.rbans.12$final.mod, labeltext = 'BDNF vs RBANS, 12m')
# ols.diagnostics(model.obj.ma = esel.rbans.12$final.mod, labeltext = 'E-selectin vs RBANS, 12m')
# ols.diagnostics(model.obj.ma = pai1.rbans.12$final.mod, labeltext = 'PAI-1 vs RBANS, 12m')
# ols.diagnostics(model.obj.ma = s100b.rbans.12$final.mod, labeltext = 'S100B vs RBANS, 12m')
# ols.diagnostics(model.obj.ma = uchl.rbans.12$final.mod, labeltext = 'UCHL vs RBANS, 12m')

# ## Test by hand with S100B
# ## Fit full model
# s100b.full.rbans.3 <- fit.mult.impute(rbans.global.score.3 ~ rcs(charlson.score, 3) + rcs(edu, 3) +
#                                         iqcode.score.e + rcs(stroke.risk, 3) +
#                                         rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) +
#                                         rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) +
#                                         rcs(age.div10, 3)*rcs(s100b.log10, 3) +
#                                         rcs(il6.log10, 3)*rcs(s100b.log10, 3),
#                                       fitter = ols,
#                                       xtrans = areg.cog.3,
#                                       data = endo.data[endo.data$cog.cohort.3,])
# anova(s100b.full.rbans.3); s100b.rbans.3$p.nonlin
#
# ## Nonlinear terms needed; test interactions
# s100b.rbans.3$p.int
#
# ## Interactions needed; test marker, IL-6
# s100b.rbans.3$p.marker
# s100b.rbans.3$p.il6

ols.figures.rbans.12 <- function(olslist, xvar, xstring){
  ols.figures(olslist = olslist, xvar = xvar, xstring = xstring, ystring = 'RBANS, 12 Months')
}
bdnf.rbans.12.fig <-
  ols.figures.rbans.12(olslist = 'bdnf.rbans.12', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.rbans.12.fig <-
  ols.figures.rbans.12(olslist = 'esel.rbans.12', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.rbans.12.fig <-
  ols.figures.rbans.12(olslist = 'pai1.rbans.12', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.rbans.12.fig <-
  ols.figures.rbans.12(olslist = 's100b.rbans.12', xvar = 's100b.log10', xstring = 'S100B')
uchl.rbans.12.fig <-
  ols.figures.rbans.12(olslist = 'uchl.rbans.12', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_rbans12_results.pdf', width = 8, height = bdnf.rbans.12.fig$height)
multiplot(plotlist = bdnf.rbans.12.fig$fig, layout = bdnf.rbans.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_rbans12_results.pdf', width = 8, height = esel.rbans.12.fig$height)
multiplot(plotlist = esel.rbans.12.fig$fig, layout = esel.rbans.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_rbans12_results.pdf', width = 8, height = pai1.rbans.12.fig$height)
multiplot(plotlist = pai1.rbans.12.fig$fig, layout = pai1.rbans.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_rbans12_results.pdf', width = 8, height = s100b.rbans.12.fig$height)
multiplot(plotlist = s100b.rbans.12.fig$fig, layout = s100b.rbans.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_rbans12_results.pdf', width = 8, height = uchl.rbans.12.fig$height)
multiplot(plotlist = uchl.rbans.12.fig$fig, layout = uchl.rbans.12.fig$layoutmat)
dev.off()


## -- Models without IL-6 --------------------------------------------------------------------------
## Formula for full delirium model, subbing "markervar" in place of actual biomarker variable
cog.righthand.noil6 <- "rcs(charlson.score, 3) + rcs(edu.div10, 3) + iqcode.score.e + rcs(stroke.risk, 3) + rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(age.div10, 3)*rcs(marker.log10, 3)"

## 3-month models
fit.rbans.noil6.models.3 <- function(marker){
  fit.ols.models(formula.right = cog.righthand.noil6,
                 outcome = 'rbans.global.score.3',
                 impobj = areg.3,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.3',
                 marker = marker)
}
bdnf.rbans.noil6.3 <- fit.rbans.noil6.models.3('bdnf')
esel.rbans.noil6.3 <- fit.rbans.noil6.models.3('esel')
pai1.rbans.noil6.3 <- fit.rbans.noil6.models.3('pai1')
s100b.rbans.noil6.3 <- fit.rbans.noil6.models.3('s100b')
uchl.rbans.noil6.3 <- fit.rbans.noil6.models.3('uchl')

bdnf.rbans.noil6.3.fig <-
  ols.figures.rbans.3(olslist = 'bdnf.rbans.noil6.3', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.rbans.noil6.3.fig <-
  ols.figures.rbans.3(olslist = 'esel.rbans.noil6.3', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.rbans.noil6.3.fig <-
  ols.figures.rbans.3(olslist = 'pai1.rbans.noil6.3', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.rbans.noil6.3.fig <-
  ols.figures.rbans.3(olslist = 's100b.rbans.noil6.3', xvar = 's100b.log10', xstring = 'S100B')
uchl.rbans.noil6.3.fig <-
  ols.figures.rbans.3(olslist = 'uchl.rbans.noil6.3', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_rbansnoil63_results.pdf', width = 8, height = bdnf.rbans.noil6.3.fig$height)
multiplot(plotlist = bdnf.rbans.noil6.3.fig$fig, layout = bdnf.rbans.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_rbansnoil63_results.pdf', width = 8, height = esel.rbans.noil6.3.fig$height)
multiplot(plotlist = esel.rbans.noil6.3.fig$fig, layout = esel.rbans.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_rbansnoil63_results.pdf', width = 8, height = pai1.rbans.noil6.3.fig$height)
multiplot(plotlist = pai1.rbans.noil6.3.fig$fig, layout = pai1.rbans.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_rbansnoil63_results.pdf', width = 8, height = s100b.rbans.noil6.3.fig$height)
multiplot(plotlist = s100b.rbans.noil6.3.fig$fig, layout = s100b.rbans.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_rbansnoil63_results.pdf', width = 8, height = uchl.rbans.noil6.3.fig$height)
multiplot(plotlist = uchl.rbans.noil6.3.fig$fig, layout = uchl.rbans.noil6.3.fig$layoutmat)
dev.off()

## 12-month models
fit.rbans.noil6.models.12 <- function(marker){
  fit.ols.models(formula.right = cog.righthand.noil6,
                 outcome = 'rbans.global.score.12',
                 impobj = areg.12,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.12',
                 marker = marker)
}
bdnf.rbans.noil6.12 <- fit.rbans.noil6.models.12('bdnf')
esel.rbans.noil6.12 <- fit.rbans.noil6.models.12('esel')
pai1.rbans.noil6.12 <- fit.rbans.noil6.models.12('pai1')
s100b.rbans.noil6.12 <- fit.rbans.noil6.models.12('s100b')
uchl.rbans.noil6.12 <- fit.rbans.noil6.models.12('uchl')

bdnf.rbans.noil6.12.fig <-
  ols.figures.rbans.12(olslist = 'bdnf.rbans.noil6.12', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.rbans.noil6.12.fig <-
  ols.figures.rbans.12(olslist = 'esel.rbans.noil6.12', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.rbans.noil6.12.fig <-
  ols.figures.rbans.12(olslist = 'pai1.rbans.noil6.12', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.rbans.noil6.12.fig <-
  ols.figures.rbans.12(olslist = 's100b.rbans.noil6.12', xvar = 's100b.log10', xstring = 'S100B')
uchl.rbans.noil6.12.fig <-
  ols.figures.rbans.12(olslist = 'uchl.rbans.noil6.12', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_rbansnoil612_results.pdf', width = 8, height = bdnf.rbans.noil6.12.fig$height)
multiplot(plotlist = bdnf.rbans.noil6.12.fig$fig, layout = bdnf.rbans.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_rbansnoil612_results.pdf', width = 8, height = esel.rbans.noil6.12.fig$height)
multiplot(plotlist = esel.rbans.noil6.12.fig$fig, layout = esel.rbans.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_rbansnoil612_results.pdf', width = 8, height = pai1.rbans.noil6.12.fig$height)
multiplot(plotlist = pai1.rbans.noil6.12.fig$fig, layout = pai1.rbans.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_rbansnoil612_results.pdf', width = 8, height = s100b.rbans.noil6.12.fig$height)
multiplot(plotlist = s100b.rbans.noil6.12.fig$fig, layout = s100b.rbans.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_rbansnoil612_results.pdf', width = 8, height = uchl.rbans.noil6.12.fig$height)
multiplot(plotlist = uchl.rbans.noil6.12.fig$fig, layout = uchl.rbans.noil6.12.fig$layoutmat)
dev.off()

@


\clearpage
\subsection{BDNF vs. RBANS}
We see no significant overall association between log10(BDNF) at baseline and RBANS scores at
3-month followup. At 12-month followup, however, there is a marginally significant association that
is strongly modified by log10(IL-6).

<<printbdnfrbans3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.rbans.3, 'BDNF'),
                       create.pval.table(bdnf.rbans.noil6.3, 'BDNF')),
                 caption = 'BDNF vs 3-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printbdnfrbans12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.rbans.12, 'BDNF'),
                       create.pval.table(bdnf.rbans.noil6.12, 'BDNF')),
                 caption = 'BDNF vs 12-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{bdnf_rbans3_results.pdf}}
\caption{Log10(BDNF) vs. RBANS at 3 Months, Adjusting for Log10(IL-6)}\label{fig:bdnfrbans3}
{\centering\includegraphics{bdnf_rbansnoil63_results.pdf}}
\caption{Log10(BDNF) vs. RBANS at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnfrbansnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{bdnf_rbans12_results.pdf}}
\caption{Log10(BDNF) vs. RBANS at 12 Months, Adjusting for Log10(IL-6)}\label{fig:bdnfrbans12}
{\centering\includegraphics{bdnf_rbansnoil612_results.pdf}}
\caption{Log10(BDNF) vs. RBANS at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnfrbansnoil612}\end{figure}

\clearpage
\subsection{E-selectin vs. RBANS}
We see a significant association between log10(E-selectin) at baseline and RBANS scores at
3-month followup. This association has weakened by 12-month followup.

<<printeselrbans3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.rbans.3, 'E-selectin'),
                       create.pval.table(esel.rbans.noil6.3, 'E-selectin')),
                 caption = 'E-selectin vs 3-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printeselrbans12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.rbans.12, 'E-selectin'),
                       create.pval.table(esel.rbans.noil6.12, 'E-selectin')),
                 caption = 'E-selectin vs 12-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{esel_rbans3_results.pdf}}
\caption{Log10(E-selectin) vs. RBANS at 3 Months, Adjusting for Log10(IL-6)}\label{fig:eselrbans3}
{\centering\includegraphics{esel_rbansnoil63_results.pdf}}
\caption{Log10(E-selectin) vs. RBANS at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:eselrbansnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{esel_rbans12_results.pdf}}
\caption{Log10(E-selectin) vs. RBANS at 12 Months, Adjusting for Log10(IL-6)}\label{fig:eselrbans12}
{\centering\includegraphics{esel_rbansnoil612_results.pdf}}
\caption{Log10(E-selectin) vs. RBANS at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:eselrbansnoil612}\end{figure}

\clearpage
\subsection{PAI-1 vs. RBANS}
We see a marginally significant association between log10(PAI-1) and RBANS scores at 3 months when
adjusting for IL-6. This association has disappeared by 12-month followup.

<<printpai1rbans3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.rbans.3, 'PAI-1'),
                       create.pval.table(pai1.rbans.noil6.3, 'PAI-1')),
                 caption = 'PAI-1 vs 3-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printpai1rbans12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.rbans.12, 'PAI-1'),
                       create.pval.table(pai1.rbans.noil6.12, 'PAI-1')),
                 caption = 'PAI-1 vs 12-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{pai1_rbans3_results.pdf}}
\caption{Log10(PAI-1) vs. RBANS at 3 Months, Adjusting for Log10(IL-6)}\label{fig:pai1rbans3}
{\centering\includegraphics{pai1_rbansnoil63_results.pdf}}
\caption{Log10(PAI-1) vs. RBANS at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1rbansnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{pai1_rbans12_results.pdf}}
\caption{Log10(PAI-1) vs. RBANS at 12 Months, Adjusting for Log10(IL-6)}\label{fig:pai1rbans12}
{\centering\includegraphics{pai1_rbansnoil612_results.pdf}}
\caption{Log10(PAI-1) vs. RBANS at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1rbansnoil612}\end{figure}

\clearpage
\subsection{S100B vs. RBANS}
We see, at most, a marginally significant overall association between log10(S100B) at baseline and
RBANS scores at 3-month followup. At 12-month followup, however, there is a significant association
that is modified by log10(IL-6).

<<prints100brbans3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.rbans.3, 'S100B'),
                       create.pval.table(s100b.rbans.noil6.3, 'S100B')),
                 caption = 'S100B vs 3-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<prints100brbans12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.rbans.12, 'S100B'),
                       create.pval.table(s100b.rbans.noil6.12, 'S100B')),
                 caption = 'S100B vs 12-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{s100b_rbans3_results.pdf}}
\caption{Log10(S100B) vs. RBANS at 3 Months, Adjusting for Log10(IL-6)}\label{fig:s100brbans3}
{\centering\includegraphics{s100b_rbansnoil63_results.pdf}}
\caption{Log10(S100B) vs. RBANS at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:s100brbansnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{s100b_rbans12_results.pdf}}
\caption{Log10(S100B) vs. RBANS at 12 Months, Adjusting for Log10(IL-6)}\label{fig:s100brbans12}
{\centering\includegraphics{s100b_rbansnoil612_results.pdf}}
\caption{Log10(S100B) vs. RBANS at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:s100brbansnoil612}\end{figure}

\clearpage
\subsection{UCHL vs. RBANS}
We see a significant, or nearly significant, association between log10(UCHL) at baseline and RBANS
scores at 3-month followup. By 12-month followup, however, this association is no longer present.

<<printuchlrbans3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.rbans.3, 'UCHL'),
                       create.pval.table(uchl.rbans.noil6.3, 'UCHL')),
                 caption = 'UCHL vs 3-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printuchlrbans12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.rbans.12, 'UCHL'),
                       create.pval.table(uchl.rbans.noil6.12, 'UCHL')),
                 caption = 'UCHl vs 12-Month RBANS',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{uchl_rbans3_results.pdf}}
\caption{Log10(UCHL) vs. RBANS at 3 Months, Adjusting for Log10(IL-6)}\label{fig:uchlrbans3}
{\centering\includegraphics{uchl_rbansnoil63_results.pdf}}
\caption{Log10(UCHL) vs. RBANS at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:uchlrbansnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{uchl_rbans12_results.pdf}}
\caption{Log10(UCHL) vs. RBANS at 12 Months, Adjusting for Log10(IL-6)}\label{fig:uchlrbans12}
{\centering\includegraphics{uchl_rbansnoil612_results.pdf}}
\caption{Log10(UCHL) vs. RBANS at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:uchlrbansnoil612}\end{figure}


\clearpage
\section{Endothelial/BBB Injury Markers vs. Trails B T-Score}

To examine the association between endothelial/BBB injury at study enrollment and Trails B t-scores
at 3- and 12-month followup, we used linear regression, adjusting for the following covariates:
\begin{itemize}
\item Charlson score
\item Years of education
\item IQCODE score
\item Framingham stroke risk score
\item Mean daily modified SOFA (no GCS) during ICU stay
\item Duration of severe sepsis
\item Duration of delirium
\item Duration of coma
\end{itemize}

We checked residual vs. fitted and QQ plots to ensure that model assumptions were met adequately.

All continuous variables, including biomarkers, were initially allowed to have a nonlinear
relationship with the outcome, with the exception of IQCODE, which had too little variability to
allow for splines. If the global p-value for nonlinearity was clearly nonsignificant
(p $>$ \Sexpr{pcutoff}), nonlinear terms were removed from the model for parsimony. We allowed for
potential interactions between endothelial/BBB markers and both systemic inflammation (log10(IL-6))
on study day 1 and age at study enrollment. If the global p-value for interactions were clearly nonsignificant (p $>$ \Sexpr{format(pcutoff, nsmall = 2)}), those terms are removed from the final
model for parsimony. All biomarkers are transformed using the log10 transformation in order to improve model fit and reduce the influence of extremely high values. All p-values are calculated using the Wald method.

We used multiple imputation to reduce bias from missing data; there is very little missing covariate
data, but there is more data missing from outcomes, which could bias our results since the patients
who would perform the worst are probably less likely to complete testing.

For models where interaction terms are kept in the final model, the association of the biomarker is
shown for the 25th, 50th, 75th, and 90th percentiles of the interacting variable.

<<trailbmodels>>=
## 3-month models
fit.trailb.models.3 <- function(marker){
  fit.ols.models(formula.right = cog.righthand,
                 outcome = 'trail.b.tscore.3',
                 impobj = areg.3,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.3',
                 marker = marker)
}
bdnf.trailb.3 <- fit.trailb.models.3('bdnf')
esel.trailb.3 <- fit.trailb.models.3('esel')
pai1.trailb.3 <- fit.trailb.models.3('pai1')
s100b.trailb.3 <- fit.trailb.models.3('s100b')
uchl.trailb.3 <- fit.trailb.models.3('uchl')

# ## Check assumptions of final models
# ols.diagnostics(model.obj.ma = bdnf.trailb.3$final.mod, labeltext = 'BDNF vs Trails B, 3m')
# ols.diagnostics(model.obj.ma = esel.trailb.3$final.mod, labeltext = 'E-selectin vs Trails B, 3m')
# ols.diagnostics(model.obj.ma = pai1.trailb.3$final.mod, labeltext = 'PAI-1 vs Trails B, 3m')
# ols.diagnostics(model.obj.ma = s100b.trailb.3$final.mod, labeltext = 'S100B vs Trails B, 3m')
# ols.diagnostics(model.obj.ma = uchl.trailb.3$final.mod, labeltext = 'UCHL vs Trails B, 3m')

ols.figures.trailb.3 <- function(olslist, xvar, xstring){
  ols.figures(olslist = olslist, xvar = xvar, xstring = xstring, ystring = 'Trails B, 3 Months')
}
bdnf.trailb.3.fig <-
  ols.figures.trailb.3(olslist = 'bdnf.trailb.3', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.trailb.3.fig <-
  ols.figures.trailb.3(olslist = 'esel.trailb.3', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.trailb.3.fig <-
  ols.figures.trailb.3(olslist = 'pai1.trailb.3', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.trailb.3.fig <-
  ols.figures.trailb.3(olslist = 's100b.trailb.3', xvar = 's100b.log10', xstring = 'S100B')
uchl.trailb.3.fig <-
  ols.figures.trailb.3(olslist = 'uchl.trailb.3', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_trailb3_results.pdf', width = 8, height = bdnf.trailb.3.fig$height)
multiplot(plotlist = bdnf.trailb.3.fig$fig, layout = bdnf.trailb.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_trailb3_results.pdf', width = 8, height = esel.trailb.3.fig$height)
multiplot(plotlist = esel.trailb.3.fig$fig, layout = esel.trailb.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_trailb3_results.pdf', width = 8, height = pai1.trailb.3.fig$height)
multiplot(plotlist = pai1.trailb.3.fig$fig, layout = pai1.trailb.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_trailb3_results.pdf', width = 8, height = s100b.trailb.3.fig$height)
multiplot(plotlist = s100b.trailb.3.fig$fig, layout = s100b.trailb.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_trailb3_results.pdf', width = 8, height = uchl.trailb.3.fig$height)
multiplot(plotlist = uchl.trailb.3.fig$fig, layout = uchl.trailb.3.fig$layoutmat)
dev.off()

## 12-month models
fit.trailb.models.12 <- function(marker){
  fit.ols.models(formula.right = cog.righthand,
                 outcome = 'trail.b.tscore.12',
                 impobj = areg.12,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.12',
                 marker = marker)
}
bdnf.trailb.12 <- fit.trailb.models.12('bdnf')
esel.trailb.12 <- fit.trailb.models.12('esel')
pai1.trailb.12 <- fit.trailb.models.12('pai1')
s100b.trailb.12 <- fit.trailb.models.12('s100b')
uchl.trailb.12 <- fit.trailb.models.12('uchl')

# ## Check assumptions of final models
# ols.diagnostics(model.obj.ma = bdnf.trailb.12$final.mod, labeltext = 'BDNF vs Trails B, 12m')
# ols.diagnostics(model.obj.ma = esel.trailb.12$final.mod, labeltext = 'E-selectin vs Trails B, 12m')
# ols.diagnostics(model.obj.ma = pai1.trailb.12$final.mod, labeltext = 'PAI-1 vs Trails B, 12m')
# ols.diagnostics(model.obj.ma = s100b.trailb.12$final.mod, labeltext = 'S100B vs Trails B, 12m')
# ols.diagnostics(model.obj.ma = uchl.trailb.12$final.mod, labeltext = 'UCHL vs Trails B, 12m')

ols.figures.trailb.12 <- function(olslist, xvar, xstring){
  ols.figures(olslist = olslist, xvar = xvar, xstring = xstring, ystring = 'Trails B, 12 Months')
}
bdnf.trailb.12.fig <-
  ols.figures.trailb.12(olslist = 'bdnf.trailb.12', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.trailb.12.fig <-
  ols.figures.trailb.12(olslist = 'esel.trailb.12', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.trailb.12.fig <-
  ols.figures.trailb.12(olslist = 'pai1.trailb.12', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.trailb.12.fig <-
  ols.figures.trailb.12(olslist = 's100b.trailb.12', xvar = 's100b.log10', xstring = 'S100B')
uchl.trailb.12.fig <-
  ols.figures.trailb.12(olslist = 'uchl.trailb.12', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_trailb12_results.pdf', width = 8, height = bdnf.trailb.12.fig$height)
multiplot(plotlist = bdnf.trailb.12.fig$fig, layout = bdnf.trailb.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_trailb12_results.pdf', width = 8, height = esel.trailb.12.fig$height)
multiplot(plotlist = esel.trailb.12.fig$fig, layout = esel.trailb.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_trailb12_results.pdf', width = 8, height = pai1.trailb.12.fig$height)
multiplot(plotlist = pai1.trailb.12.fig$fig, layout = pai1.trailb.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_trailb12_results.pdf', width = 8, height = s100b.trailb.12.fig$height)
multiplot(plotlist = s100b.trailb.12.fig$fig, layout = s100b.trailb.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_trailb12_results.pdf', width = 8, height = uchl.trailb.12.fig$height)
multiplot(plotlist = uchl.trailb.12.fig$fig, layout = uchl.trailb.12.fig$layoutmat)
dev.off()


## -- Models without IL-6 --------------------------------------------------------------------------
## 3-month models
fit.trailb.noil6.models.3 <- function(marker){
  fit.ols.models(formula.right = cog.righthand.noil6,
                 outcome = 'trail.b.tscore.3',
                 impobj = areg.3,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.3',
                 marker = marker)
}
bdnf.trailb.noil6.3 <- fit.trailb.noil6.models.3('bdnf')
esel.trailb.noil6.3 <- fit.trailb.noil6.models.3('esel')
pai1.trailb.noil6.3 <- fit.trailb.noil6.models.3('pai1')
s100b.trailb.noil6.3 <- fit.trailb.noil6.models.3('s100b')
uchl.trailb.noil6.3 <- fit.trailb.noil6.models.3('uchl')

bdnf.trailb.noil6.3.fig <-
  ols.figures.trailb.3(olslist = 'bdnf.trailb.noil6.3', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.trailb.noil6.3.fig <-
  ols.figures.trailb.3(olslist = 'esel.trailb.noil6.3', xvar = 'esel.log10', xstring = 'E-selectin')
pai1.trailb.noil6.3.fig <-
  ols.figures.trailb.3(olslist = 'pai1.trailb.noil6.3', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.trailb.noil6.3.fig <-
  ols.figures.trailb.3(olslist = 's100b.trailb.noil6.3', xvar = 's100b.log10', xstring = 'S100B')
uchl.trailb.noil6.3.fig <-
  ols.figures.trailb.3(olslist = 'uchl.trailb.noil6.3', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_trailbnoil63_results.pdf', width = 8, height = bdnf.trailb.noil6.3.fig$height)
multiplot(plotlist = bdnf.trailb.noil6.3.fig$fig, layout = bdnf.trailb.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 'esel_trailbnoil63_results.pdf', width = 8, height = esel.trailb.noil6.3.fig$height)
multiplot(plotlist = esel.trailb.noil6.3.fig$fig, layout = esel.trailb.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 'pai1_trailbnoil63_results.pdf', width = 8, height = pai1.trailb.noil6.3.fig$height)
multiplot(plotlist = pai1.trailb.noil6.3.fig$fig, layout = pai1.trailb.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 's100b_trailbnoil63_results.pdf', width = 8, height = s100b.trailb.noil6.3.fig$height)
multiplot(plotlist = s100b.trailb.noil6.3.fig$fig, layout = s100b.trailb.noil6.3.fig$layoutmat)
dev.off()

pdf(file = 'uchl_trailbnoil63_results.pdf', width = 8, height = uchl.trailb.noil6.3.fig$height)
multiplot(plotlist = uchl.trailb.noil6.3.fig$fig, layout = uchl.trailb.noil6.3.fig$layoutmat)
dev.off()

## 12-month models
fit.trailb.noil6.models.12 <- function(marker){
  fit.ols.models(formula.right = cog.righthand.noil6,
                 outcome = 'trail.b.tscore.12',
                 impobj = areg.12,
                 dataset = endo.data,
                 cohort.var = 'fu.cohort.12',
                 marker = marker)
}
bdnf.trailb.noil6.12 <- fit.trailb.noil6.models.12('bdnf')
esel.trailb.noil6.12 <- fit.trailb.noil6.models.12('esel')
pai1.trailb.noil6.12 <- fit.trailb.noil6.models.12('pai1')
s100b.trailb.noil6.12 <- fit.trailb.noil6.models.12('s100b')
uchl.trailb.noil6.12 <- fit.trailb.noil6.models.12('uchl')

bdnf.trailb.noil6.12.fig <-
  ols.figures.trailb.12(olslist = 'bdnf.trailb.noil6.12', xvar = 'bdnf.log10', xstring = 'BDNF')
esel.trailb.noil6.12.fig <- ols.figures.trailb.12(olslist = 'esel.trailb.noil6.12',
                                                  xvar = 'esel.log10', xstring = 'E-selectin')
pai1.trailb.noil6.12.fig <-
  ols.figures.trailb.12(olslist = 'pai1.trailb.noil6.12', xvar = 'pai1.log10', xstring = 'PAI-1')
s100b.trailb.noil6.12.fig <-
  ols.figures.trailb.12(olslist = 's100b.trailb.noil6.12', xvar = 's100b.log10', xstring = 'S100B')
uchl.trailb.noil6.12.fig <-
  ols.figures.trailb.12(olslist = 'uchl.trailb.noil6.12', xvar = 'uchl.log10', xstring = 'UCHL')

pdf(file = 'bdnf_trailbnoil612_results.pdf', width = 8, height = bdnf.trailb.noil6.12.fig$height)
multiplot(plotlist = bdnf.trailb.noil6.12.fig$fig, layout = bdnf.trailb.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 'esel_trailbnoil612_results.pdf', width = 8, height = esel.trailb.noil6.12.fig$height)
multiplot(plotlist = esel.trailb.noil6.12.fig$fig, layout = esel.trailb.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 'pai1_trailbnoil612_results.pdf', width = 8, height = pai1.trailb.noil6.12.fig$height)
multiplot(plotlist = pai1.trailb.noil6.12.fig$fig, layout = pai1.trailb.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 's100b_trailbnoil612_results.pdf', width = 8, height = s100b.trailb.noil6.12.fig$height)
multiplot(plotlist = s100b.trailb.noil6.12.fig$fig, layout = s100b.trailb.noil6.12.fig$layoutmat)
dev.off()

pdf(file = 'uchl_trailbnoil612_results.pdf', width = 8, height = uchl.trailb.noil6.12.fig$height)
multiplot(plotlist = uchl.trailb.noil6.12.fig$fig, layout = uchl.trailb.noil6.12.fig$layoutmat)
dev.off()

@


\clearpage
\subsection{BDNF vs. Trails B}
We see no significant overall association between log10(BDNF) at baseline and Trails B t-scores at
either time point.

<<printbdnftrailb3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.trailb.3, 'BDNF'),
                       create.pval.table(bdnf.trailb.noil6.3, 'BDNF')),
                 caption = 'BDNF vs 3-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printbdnftrailb12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(bdnf.trailb.12, 'BDNF'),
                       create.pval.table(bdnf.trailb.noil6.12, 'BDNF')),
                 caption = 'BDNF vs 12-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{bdnf_trailb3_results.pdf}}
\caption{Log10(BDNF) vs. Trails B at 3 Months, Adjusting for Log10(IL-6)}\label{fig:bdnftrailb3}
{\centering\includegraphics{bdnf_trailbnoil63_results.pdf}}
\caption{Log10(BDNF) vs. Trails B at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnftrailbnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{bdnf_trailb12_results.pdf}}
\caption{Log10(BDNF) vs. Trails B at 12 Months, Adjusting for Log10(IL-6)}\label{fig:bdnftrailb12}
{\centering\includegraphics{bdnf_trailbnoil612_results.pdf}}
\caption{Log10(BDNF) vs. Trails B at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:bdnftrailbnoil612}\end{figure}

\clearpage
\subsection{E-selectin vs. Trails B}
We see no significant association between log10(E-selectin) at baseline and Trails B t-scores at
either time point.

<<printeseltrailb3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.trailb.3, 'E-selectin'),
                       create.pval.table(esel.trailb.noil6.3, 'E-selectin')),
                 caption = 'E-selectin vs 3-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printeseltrailb12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(esel.trailb.12, 'E-selectin'),
                       create.pval.table(esel.trailb.noil6.12, 'E-selectin')),
                 caption = 'E-selectin vs 12-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{esel_trailb3_results.pdf}}
\caption{Log10(E-selectin) vs. Trails B at 3 Months, Adjusting for Log10(IL-6)}\label{fig:eseltrailb3}
{\centering\includegraphics{esel_trailbnoil63_results.pdf}}
\caption{Log10(E-selectin) vs. Trails B at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:eseltrailbnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{esel_trailb12_results.pdf}}
\caption{Log10(E-selectin) vs. Trails B at 12 Months, Adjusting for Log10(IL-6)}\label{fig:eseltrailb12}
{\centering\includegraphics{esel_trailbnoil612_results.pdf}}
\caption{Log10(E-selectin) vs. Trails B at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:eseltrailbnoil612}\end{figure}

\clearpage
\subsection{PAI-1 vs. Trails B}
We see a marginally significant association between log10(PAI-1) and Trails B t-scores at 3 months
only when adjusting for IL-6. This association has disappeared by 12-month followup.

<<printpai1trailb3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.trailb.3, 'PAI-1'),
                       create.pval.table(pai1.trailb.noil6.3, 'PAI-1')),
                 caption = 'PAI-1 vs 3-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printpai1trailb12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(pai1.trailb.12, 'PAI-1'),
                       create.pval.table(pai1.trailb.noil6.12, 'PAI-1')),
                 caption = 'PAI-1 vs 12-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{pai1_trailb3_results.pdf}}
\caption{Log10(PAI-1) vs. Trails B at 3 Months, Adjusting for Log10(IL-6)}\label{fig:pai1trailb3}
{\centering\includegraphics{pai1_trailbnoil63_results.pdf}}
\caption{Log10(PAI-1) vs. Trails B at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1trailbnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{pai1_trailb12_results.pdf}}
\caption{Log10(PAI-1) vs. Trails B at 12 Months, Adjusting for Log10(IL-6)}\label{fig:pai1trailb12}
{\centering\includegraphics{pai1_trailbnoil612_results.pdf}}
\caption{Log10(PAI-1) vs. Trails B at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:pai1trailbnoil612}\end{figure}

\clearpage
\subsection{S100B vs. Trails B}
We see no significant association between log10(S100B) and Trails B t-scores at either time point.

<<prints100btrailb3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.trailb.3, 'S100B'),
                       create.pval.table(s100b.trailb.noil6.3, 'S100B')),
                 caption = 'S100B vs 3-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<prints100btrailb12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(s100b.trailb.12, 'S100B'),
                       create.pval.table(s100b.trailb.noil6.12, 'S100B')),
                 caption = 'S100B vs 12-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{s100b_trailb3_results.pdf}}
\caption{Log10(S100B) vs. Trails B at 3 Months, Adjusting for Log10(IL-6)}\label{fig:s100btrailb3}
{\centering\includegraphics{s100b_trailbnoil63_results.pdf}}
\caption{Log10(S100B) vs. Trails B at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:s100btrailbnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{s100b_trailb12_results.pdf}}
\caption{Log10(S100B) vs. Trails B at 12 Months, Adjusting for Log10(IL-6)}\label{fig:s100btrailb12}
{\centering\includegraphics{s100b_trailbnoil612_results.pdf}}
\caption{Log10(S100B) vs. Trails B at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:s100btrailbnoil612}\end{figure}

\clearpage
\subsection{UCHL vs. Trails B}
We see no substantial association between log10(UCHL) at baseline and Trails B t-scores at either time point.

<<printuchltrailb3, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.trailb.3, 'UCHL'),
                       create.pval.table(uchl.trailb.noil6.3, 'UCHL')),
                 caption = 'UCHL vs 3-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@

<<printuchltrailb12, results = 'asis'>>=
latex.pval.table(cbind(create.pval.table(uchl.trailb.12, 'UCHL'),
                       create.pval.table(uchl.trailb.noil6.12, 'UCHL')),
                 caption = 'UCHL vs 12-Month Trails B',
                 use.colheads = c('P, Adjusting for Log10(IL-6)',
                                  'P, No Adjustment for Log10(IL-6)'))
@


\begin{figure}[!h]
{\centering\includegraphics{uchl_trailb3_results.pdf}}
\caption{Log10(UCHL) vs. Trails B at 3 Months, Adjusting for Log10(IL-6)}\label{fig:uchltrailb3}
{\centering\includegraphics{uchl_trailbnoil63_results.pdf}}
\caption{Log10(UCHL) vs. Trails B at 3 Months, Not Accounting for Log10(IL-6)}\label{fig:uchltrailbnoil63}
\end{figure}

\begin{figure}[!h]
{\centering\includegraphics{uchl_trailb12_results.pdf}}
\caption{Log10(UCHL) vs. Trails B at 12 Months, Adjusting for Log10(IL-6)}\label{fig:uchltrailb12}
{\centering\includegraphics{uchl_trailbnoil612_results.pdf}}
\caption{Log10(UCHL) vs. Trails B at 12 Months, Not Accounting for Log10(IL-6)}\label{fig:uchltrailbnoil612}\end{figure}

%' \clearpage
%' \section{Code Used for Analysis}
%' <<all-code, ref.label=all_labels(), echo = TRUE, eval = FALSE>>=
%' @

<<publication_figures>>=
## -- S100B vs RBANS: two panels each for age & inflammation in main paper; ------------------------
## -- four panels for supplement -------------------------------------------------------------------
library(purrr)

which.quants.ms <- c(0.25, 0.90)

fu.age.quants <- quantile(subset(endo.data, fu.cohort.either)$age.div10,
                          probs = c(which.quants.ms, 0.5), na.rm = TRUE)
age.1 <- as.numeric(min(fu.age.quants[1]))
age.2 <- as.numeric(max(fu.age.quants))
age.med <- as.numeric(fu.age.quants['50%'])

fu.il6.quants <- quantile(subset(endo.data, fu.cohort.either)$il6.log10,
                          probs = c(which.quants.ms, 0.5), na.rm = TRUE)
il6.1 <- as.numeric(min(fu.il6.quants[1]))
il6.2 <- as.numeric(max(fu.il6.quants))
il6.med <- as.numeric(fu.il6.quants['50%'])

## Which values of E-selectin, S100B to plot? Use 2.5th-97.5th %iles among followup cohorts
plot.quantiles <- c(0.025, 0.975)

esel.fu.limits <- quantile(subset(endo.data, fu.cohort.either)$esel.log10,
                           probs = plot.quantiles, na.rm = TRUE)
esel.fu.vals <- sort(unique(endo.data$esel.log10[endo.data$esel.log10 >= esel.fu.limits[1] &
                                                   endo.data$esel.log10 <= esel.fu.limits[2]]))

s100b.fu.limits <- quantile(subset(endo.data, fu.cohort.either)$s100b.log10,
                            probs = plot.quantiles, na.rm = TRUE)
s100b.fu.vals <- sort(unique(endo.data$s100b.log10[endo.data$s100b.log10 >= s100b.fu.limits[1] &
                                                     endo.data$s100b.log10 <= s100b.fu.limits[2]]))

## Function to do exactly what I want for each panel
wranglePredict <- function(df, intvar, timept){
    mutate(df,
           intvar = intvar,
           timept = timept,
           intval = ifelse(intvar == 'age.div10', age.div10, il6.log10))
}

## -- E-selectin vs RBANS, manuscript version ------------------------------------------------------
## At 3 months, we want 25th and 90th %iles of IL-6; at 12 months, just median (no plots for age)
args.Predict.esel.rbans <- list('x' = list(esel.rbans.3$final.mod, esel.rbans.3$final.mod,
                                           esel.rbans.12$final.mod),
                                'il6.log10' = c(il6.1, il6.2, il6.med))

## Create big data frame of all E-selectin vs RBANS model predicted values
Predict.esel.rbans <- pmap(args.Predict.esel.rbans, .f = Predict, esel.log10 = esel.fu.vals) %>%
  map(.f = as.data.frame)

args.wrangle.esel.rbans <- list('df' = Predict.esel.rbans,
                                'intvar' = c(rep('il6.log10', 2), 'overall'),
                                'timept' = c(rep(3, 2), 12))

predvals.esel.rbans <- pmap(args.wrangle.esel.rbans, .f = wranglePredict) %>%
  bind_rows() %>%
  mutate(time.f = factor(ifelse(timept == 3, 1, 2),
                         levels = 1:2, labels = paste(c(3, 12), 'Months')),
         int.f = ifelse(intvar == 'age.div10', paste('Age* =', round(intval*10)),
                 ifelse(intvar == 'il6.log10',
                        paste('IL-6* =', format(round(intval, 2), nsmall = 2)),
                        'Overall Association')))

plot.esel.rbans.3 <- ggplot(data = subset(predvals.esel.rbans, time.f == '3 Months'),
                            aes(x = esel.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 1) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'E-Selectin* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted RBANS Global Score',
                     limits = c(60, 90), breaks = seq(60, 90, 10)) +
  ggtitle('3-Month Follow-Up') +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', , hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

plot.esel.rbans.12 <- ggplot(data = subset(predvals.esel.rbans, time.f == '12 Months'),
                             aes(x = esel.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 1) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'E-Selectin* Plasma Concentration') +
  # scale_y_continuous(name = '\nAdjusted RBANS global score') +
  scale_y_continuous(name = NULL,
                     limits = c(60, 90), breaks = seq(60, 90, 10)) +
  ggtitle('12-Month Follow-Up') +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

pdf(file = 'brain_endobbb_eselrbans_ms.pdf', width = 10, height = 4)
multiplot(plot.esel.rbans.3, plot.esel.rbans.12, layout = matrix(c(1, 1, 2), nrow = 1))
dev.off()

## -- S100B vs RBANS, manuscript version -----------------------------------------------------------
## For each model, we want to get predicted values for two %iles each of age and IL-6
args.Predict.s100b.rbans <- list('x' = list(s100b.rbans.3$final.mod, s100b.rbans.3$final.mod,
                                            s100b.rbans.3$final.mod, s100b.rbans.3$final.mod,
                                            s100b.rbans.12$final.mod, s100b.rbans.12$final.mod,
                                            s100b.rbans.12$final.mod, s100b.rbans.12$final.mod),
                                 'age.div10' = c(age.1, age.2, age.med, age.med,
                                                 age.1, age.2, age.med, age.med),
                                 'il6.log10' = c(il6.med, il6.med, il6.1, il6.2,
                                                 il6.med, il6.med, il6.1, il6.2))

## Create big data frame of all S100B vs RBANS model predicted values
Predict.s100b.rbans <- pmap(args.Predict.s100b.rbans, .f = Predict, s100b.log10 = s100b.fu.vals) %>%
  map(.f = as.data.frame)

args.wrangle.s100b.rbans <- list('df' = Predict.s100b.rbans,
                                 'intvar' = rep(c(rep('age.div10', 2), rep('il6.log10', 2)), 2),
                                 'timept' = c(rep(3, 4), rep(12, 4)))

predvals.s100b.rbans <- pmap(args.wrangle.s100b.rbans, .f = wranglePredict) %>%
  bind_rows() %>%
  mutate(time.f = factor(ifelse(timept == 3, 1, 2),
                         levels = 1:2, labels = paste(c(3, 12), 'Months')),
         int.f = ifelse(intvar == 'age.div10', paste('Age* =', round(intval*10)),
                        paste('IL-6* =', format(round(intval, 2), nsmall = 2))))

plot.s100b.rbans.3 <- ggplot(data = subset(predvals.s100b.rbans, time.f == '3 Months'),
                             aes(x = s100b.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 2) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'S100B* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted RBANS Global Score',
                     limits = c(60, 100), breaks = seq(60, 100, 10)) +
  ggtitle('3-Month Follow-Up') +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', , hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

plot.s100b.rbans.12 <- ggplot(data = subset(predvals.s100b.rbans, time.f == '12 Months'),
                             aes(x = s100b.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 2) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'S100B* Plasma Concentration') +
  # scale_y_continuous(name = '\nAdjusted RBANS global score') +
  scale_y_continuous(name = NULL,
                     limits = c(60, 100), breaks = seq(60, 100, 10)) +
  ggtitle('12-Month Follow-Up') +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

pdf(file = 'brain_endobbb_s100brbans_ms.pdf', width = 10, height = 6)
multiplot(plot.s100b.rbans.3, plot.s100b.rbans.12, layout = matrix(1:2, nrow = 1))
dev.off()

@

<<supplement_figures>>=
## -- Preliminaries --------------------------------------------------------------------------------
which.quants.supp <- c(0.25, 0.5, 0.75, 0.90)

supp.age.quants <- quantile(subset(endo.data, fu.cohort.either)$age.div10,
                            probs = which.quants.supp, na.rm = TRUE)
age.med <- as.numeric(supp.age.quants['50%'])

supp.il6.quants <- quantile(subset(endo.data, fu.cohort.either)$il6.log10,
                            probs = which.quants.supp, na.rm = TRUE)
il6.med <- as.numeric(supp.il6.quants['50%'])

## -- E-selectin vs RBANS, supplement version ------------------------------------------------------
## 3 months only, four panels for IL-6
args.Predict.esel.rbans <- list('x' = list(esel.rbans.3$final.mod),
                                'il6.log10' = as.numeric(supp.il6.quants))

## Create big data frame of all E-selectin vs RBANS model predicted values
Predict.esel.rbans <- pmap(args.Predict.esel.rbans, .f = Predict, esel.log10 = esel.fu.vals) %>%
  map(.f = as.data.frame)

args.wrangle.esel.rbans <- list('df' = Predict.esel.rbans, 'intvar' = 'il6.log10', 'timept' = 3)

predvals.esel.rbans <- pmap(args.wrangle.esel.rbans, .f = wranglePredict) %>%
  bind_rows() %>%
  mutate(int.f = ifelse(intvar == 'age.div10', paste('Age* =', round(intval*10)),
                 ifelse(intvar == 'il6.log10',
                        paste('IL-6* =', format(round(intval, 2), nsmall = 2)),
                        'Overall Association')))

suppplot.esel.rbans.3 <- ggplot(data = predvals.esel.rbans, aes(x = esel.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 1) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'E-Selectin* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted RBANS Global Score',
                     limits = c(60, 90), breaks = seq(60, 90, 10)) +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

pdf(file = 'brain_endobbb_eselrbans3_supp.pdf', width = 10, height = 4)
suppplot.esel.rbans.3
dev.off()

## -- S100B vs RBANS, supplement version: four panels each for age and IL-6 ------------------------
args.Predict.s100b.rbans <- list('x' = list(s100b.rbans.3$final.mod, s100b.rbans.3$final.mod,
                                            s100b.rbans.3$final.mod, s100b.rbans.3$final.mod,
                                            s100b.rbans.3$final.mod, s100b.rbans.3$final.mod,
                                            s100b.rbans.3$final.mod, s100b.rbans.3$final.mod,
                                            s100b.rbans.12$final.mod, s100b.rbans.12$final.mod,
                                            s100b.rbans.12$final.mod, s100b.rbans.12$final.mod,
                                            s100b.rbans.12$final.mod, s100b.rbans.12$final.mod,
                                            s100b.rbans.12$final.mod, s100b.rbans.12$final.mod),
                                 'age.div10' = c(as.numeric(supp.age.quants), rep(age.med, 4),
                                                 as.numeric(supp.age.quants), rep(age.med, 4)),
                                 'il6.log10' = c(rep(il6.med, 4), as.numeric(supp.il6.quants),
                                                 rep(il6.med, 4), as.numeric(supp.il6.quants)))

## Create big data frame of all S100B vs RBANS model predicted values
Predict.s100b.rbans <- pmap(args.Predict.s100b.rbans, .f = Predict, s100b.log10 = s100b.fu.vals) %>%
  map(.f = as.data.frame)

args.wrangle.s100b.rbans <- list('df' = Predict.s100b.rbans,
                                 'intvar' = rep(c(rep('age.div10', 4), rep('il6.log10', 4)), 2),
                                 'timept' = c(rep(3, 8), rep(12, 8)))

predvals.s100b.rbans <- pmap(args.wrangle.s100b.rbans, .f = wranglePredict) %>%
  bind_rows() %>%
  mutate(time.f = factor(ifelse(timept == 3, 1, 2),
                         levels = 1:2, labels = paste(c(3, 12), 'Months')),
         int.f = ifelse(intvar == 'age.div10', paste('Age* =', round(intval*10)),
                        paste('IL-6* =', format(round(intval, 2), nsmall = 2))))

margin.lines <- c(1, 0.5, 0.5, 0.5)

suppplot.s100b.rbans.3 <- ggplot(data = subset(predvals.s100b.rbans, time.f == '3 Months'),
                                 aes(x = s100b.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 2, ncol = 4) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'S100B* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted RBANS Global Score',
                     limits = c(60, 100), breaks = seq(60, 100, 10)) +
  ggtitle('3-Month Follow-Up') +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', , hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'),
        plot.margin = unit(margin.lines, units = 'lines'))

suppplot.s100b.rbans.12 <- ggplot(data = subset(predvals.s100b.rbans, time.f == '12 Months'),
                                  aes(x = s100b.log10, y = yhat)) +
  facet_wrap(~ int.f, nrow = 2, ncol = 4) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'S100B* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted RBANS Global Score',
                     limits = c(60, 100), breaks = seq(60, 100, 10)) +
  ggtitle('12-Month Follow-Up') +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', , hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'),
        plot.margin = unit(margin.lines, units = 'lines'))

pdf(file = 'brain_endobbb_s100brbans_supp.pdf', width = 8, height = 8)
multiplot(suppplot.s100b.rbans.3, suppplot.s100b.rbans.12, layout = matrix(1:2, nrow = 2))
dev.off()

## -- E-selectin vs ADL, 3m only (no interactions) -------------------------------------------------
esel.designmat <- nb.designmat.list(esel.adl.il6.3, 'esel')[[1]]
predvals.esel.adl <- calc.nbresults(esel.adl.il6.3$final.mod,
                                    designmat = esel.designmat,
                                    xvar = 'esel.log10')

suppplot.esel.adl.3 <- ggplot(data = predvals.esel.adl, aes(x = xvalue, y = count.pe)) +
  geom_ribbon(aes(ymin = count.lcl, ymax = count.ucl), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'E-selectin* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted Katz Activities of Daily Living Score,\n3-Month Followup',
                     limits = c(0, 1.1), breaks = seq(0, 1, 0.2)) +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

pdf(file = 'brain_endobbb_eseladl3_supp.pdf', width = 7, height = 5)
suppplot.esel.adl.3
dev.off()

## -- UCHL vs RBANS, supplement version -------------------------------------------------------------
## 3 months only, no interactions (one panel)
args.Predict.uchl.rbans <- list('x' = list(uchl.rbans.3$final.mod))

uchl.fu.limits <- quantile(subset(endo.data, fu.cohort.either)$uchl.log10,
                           probs = plot.quantiles, na.rm = TRUE)
uchl.fu.vals <- sort(unique(endo.data$uchl.log10[endo.data$uchl.log10 >= uchl.fu.limits[1] &
                                                   endo.data$uchl.log10 <= uchl.fu.limits[2]]))

## Create data frame of all UCHL vs RBANS model predicted values
Predict.uchl.rbans <- Predict(uchl.rbans.3$final.mod, uchl.log10 = uchl.fu.vals) %>%
  as.data.frame()

suppplot.uchl.rbans.3 <- ggplot(data = Predict.uchl.rbans, aes(x = uchl.log10, y = yhat)) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = '#003D79') +
  geom_line(colour = '#003D79') +
  scale_x_continuous(name = 'UCHL* Plasma Concentration') +
  scale_y_continuous(name = 'Adjusted RBANS Global Score',
                     limits = c(70, 90), breaks = seq(70, 90, 5)) +
  theme_minimal() +
  theme(panel.border = element_rect(fill = NA, colour = 'grey80'),
        panel.background = element_rect(fill = 'white', colour = 'grey80'),
        strip.text = element_text(face = 'bold'),
        plot.title = element_text(face = 'bold', hjust = 0.5),
        plot.background = element_rect(fill = 'grey95', colour = 'grey95'))

pdf(file = 'brain_endobbb_uchlrbans3_supp.pdf', width = 6, height = 4)
suppplot.uchl.rbans.3
dev.off()

@

\clearpage
\section{Technical Details}

<<choosepkgs>>=
relevant.pkgs <-
  data.frame(pkg = c('dplyr', 'ggplot2', 'knitr', 'Hmisc', 'MASS', 'mice', 'rms', 'tidyr'),
             rsn = c('Data management', 'Plotting', 'Reproducible reporting',
                     'Descriptive statistics', 'Modeling (spec. negative binomial)',
                     'Multiple imputation', 'Modeling (spec. linear regression)',
                     'Data management'))
use.packages <- session_info()$packages %>%
  filter(package %in% relevant.pkgs$pkg) %>%
  mutate(reason = relevant.pkgs$rsn[match(package, relevant.pkgs$pkg)]) %>%
  select(-2)

@

All analyses were produced using \Sexpr{session_info()$platform$version}, along with the following
add-on packages and primary reason for their use.

<<printpkgs, results='asis'>>=
latex(use.packages, file = '',
      where = '!h',
      rowname = NULL,
      caption = 'List of Add-On R Packages',
      col.just = c('l', 'r', 'r', 'l', 'l'),
      colheads = capitalize(names(use.packages)))
@

\end{document}
